{
    "title": "Caddy v2 autogenerated JSON schema",
    "description": ": `object`  \n",
    "markdownDescription": ": `object`  \n",
    "type": "object",
    "definitions": {
        "admin.api.load": {
            "description": "load: `object`  \nModule: `admin.api.load`  \n",
            "markdownDescription": "load: `object`  \nModule: `admin.api.load`  \n",
            "type": "object"
        },
        "caddy.adapters.caddyfile": {
            "description": "caddyfile: `object`  \nModule: `caddy.adapters.caddyfile`  \n",
            "markdownDescription": "caddyfile: `object`  \nModule: `caddy.adapters.caddyfile`  \n",
            "type": "object"
        },
        "caddy.listeners.tls": {
            "description": "tls: `object`  \nModule: `caddy.listeners.tls`  \n",
            "markdownDescription": "tls: `object`  \nModule: `caddy.listeners.tls`  \n",
            "type": "object"
        },
        "caddy.logging.encoders.console": {
            "description": "console: `object`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
            "markdownDescription": "console: `object`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
            "type": "object",
            "properties": {
                "caller_key": {
                    "description": "caller_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "markdownDescription": "caller_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "type": "string"
                },
                "duration_format": {
                    "description": "duration_format: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "markdownDescription": "duration_format: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "type": "string"
                },
                "level_format": {
                    "description": "level_format: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "markdownDescription": "level_format: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "type": "string"
                },
                "level_key": {
                    "description": "level_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "markdownDescription": "level_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "type": "string"
                },
                "line_ending": {
                    "description": "line_ending: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "markdownDescription": "line_ending: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "type": "string"
                },
                "message_key": {
                    "description": "message_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "markdownDescription": "message_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "type": "string"
                },
                "name_key": {
                    "description": "name_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "markdownDescription": "name_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "type": "string"
                },
                "stacktrace_key": {
                    "description": "stacktrace_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "markdownDescription": "stacktrace_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "type": "string"
                },
                "time_format": {
                    "description": "time_format: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "markdownDescription": "time_format: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "type": "string"
                },
                "time_key": {
                    "description": "time_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "markdownDescription": "time_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)",
                    "type": "string"
                }
            }
        },
        "caddy.logging.encoders.filter": {
            "description": "filter: `object`  \nModule: `caddy.logging.encoders.filter`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FilterEncoder)",
            "markdownDescription": "filter: `object`  \nModule: `caddy.logging.encoders.filter`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FilterEncoder)",
            "type": "object",
            "properties": {
                "fields": {
                    "description": "fields: `array`  \nModule: `caddy.logging.encoders.filter`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FilterEncoder)",
                    "markdownDescription": "fields: `array`  \nModule: `caddy.logging.encoders.filter`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FilterEncoder)",
                    "type": "array",
                    "items": {
                        "required": [
                            "filter"
                        ],
                        "allOf": [
                            {
                                "if": {
                                    "properties": {
                                        "filter": {
                                            "const": "delete"
                                        }
                                    }
                                },
                                "then": {
                                    "$ref": "#/definitions/caddy.logging.encoders.filter.delete"
                                }
                            },
                            {
                                "if": {
                                    "properties": {
                                        "filter": {
                                            "const": "ip_mask"
                                        }
                                    }
                                },
                                "then": {
                                    "$ref": "#/definitions/caddy.logging.encoders.filter.ip_mask"
                                }
                            },
                            {
                                "properties": {
                                    "filter": {
                                        "description": "`fields` key to identify specified module.  \nfilter: `string`  \nModule: `caddy.logging.encoders.filter`",
                                        "markdownDescription": "`fields` key to identify specified module.  \nfilter: `string`  \nModule: `caddy.logging.encoders.filter`",
                                        "type": "string",
                                        "enum": [
                                            "delete",
                                            "ip_mask"
                                        ]
                                    }
                                }
                            }
                        ]
                    }
                },
                "wrap": {
                    "description": "wrap: ``  \nModule: `caddy.logging.encoders`  \n",
                    "markdownDescription": "wrap: ``  \nModule: `caddy.logging.encoders`  \n",
                    "required": [
                        "format"
                    ],
                    "allOf": [
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "console"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.console"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "filter"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.filter"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "json"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.json"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "logfmt"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.logfmt"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "single_field"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.single_field"
                            }
                        },
                        {
                            "properties": {
                                "format": {
                                    "description": "`wrap` key to identify specified module.  \nformat: `string`  \nModule: `caddy.logging.encoders`",
                                    "markdownDescription": "`wrap` key to identify specified module.  \nformat: `string`  \nModule: `caddy.logging.encoders`",
                                    "type": "string",
                                    "enum": [
                                        "console",
                                        "filter",
                                        "json",
                                        "logfmt",
                                        "single_field"
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },
        "caddy.logging.encoders.filter.delete": {
            "description": "delete: `object`  \nModule: `caddy.logging.encoders.filter.delete`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#DeleteFilter)",
            "markdownDescription": "delete: `object`  \nModule: `caddy.logging.encoders.filter.delete`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#DeleteFilter)",
            "type": "object"
        },
        "caddy.logging.encoders.filter.ip_mask": {
            "description": "ip_mask: `object`  \nModule: `caddy.logging.encoders.filter.ip_mask`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#IPMaskFilter)",
            "markdownDescription": "ip_mask: `object`  \nModule: `caddy.logging.encoders.filter.ip_mask`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#IPMaskFilter)",
            "type": "object",
            "properties": {
                "ipv4_cidr": {
                    "description": "ipv4_cidr: `number`  \nModule: `caddy.logging.encoders.filter.ip_mask`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#IPMaskFilter)",
                    "markdownDescription": "ipv4_cidr: `number`  \nModule: `caddy.logging.encoders.filter.ip_mask`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#IPMaskFilter)",
                    "type": "number"
                },
                "ipv6_cidr": {
                    "description": "ipv6_cidr: `number`  \nModule: `caddy.logging.encoders.filter.ip_mask`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#IPMaskFilter)",
                    "markdownDescription": "ipv6_cidr: `number`  \nModule: `caddy.logging.encoders.filter.ip_mask`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#IPMaskFilter)",
                    "type": "number"
                }
            }
        },
        "caddy.logging.encoders.json": {
            "description": "json: `object`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
            "markdownDescription": "json: `object`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
            "type": "object",
            "properties": {
                "caller_key": {
                    "description": "caller_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "markdownDescription": "caller_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "type": "string"
                },
                "duration_format": {
                    "description": "duration_format: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "markdownDescription": "duration_format: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "type": "string"
                },
                "level_format": {
                    "description": "level_format: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "markdownDescription": "level_format: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "type": "string"
                },
                "level_key": {
                    "description": "level_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "markdownDescription": "level_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "type": "string"
                },
                "line_ending": {
                    "description": "line_ending: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "markdownDescription": "line_ending: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "type": "string"
                },
                "message_key": {
                    "description": "message_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "markdownDescription": "message_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "type": "string"
                },
                "name_key": {
                    "description": "name_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "markdownDescription": "name_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "type": "string"
                },
                "stacktrace_key": {
                    "description": "stacktrace_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "markdownDescription": "stacktrace_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "type": "string"
                },
                "time_format": {
                    "description": "time_format: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "markdownDescription": "time_format: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "type": "string"
                },
                "time_key": {
                    "description": "time_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "markdownDescription": "time_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)",
                    "type": "string"
                }
            }
        },
        "caddy.logging.encoders.logfmt": {
            "description": "logfmt: `object`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
            "markdownDescription": "logfmt: `object`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
            "type": "object",
            "properties": {
                "caller_key": {
                    "description": "caller_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "markdownDescription": "caller_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "type": "string"
                },
                "duration_format": {
                    "description": "duration_format: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "markdownDescription": "duration_format: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "type": "string"
                },
                "level_format": {
                    "description": "level_format: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "markdownDescription": "level_format: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "type": "string"
                },
                "level_key": {
                    "description": "level_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "markdownDescription": "level_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "type": "string"
                },
                "line_ending": {
                    "description": "line_ending: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "markdownDescription": "line_ending: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "type": "string"
                },
                "message_key": {
                    "description": "message_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "markdownDescription": "message_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "type": "string"
                },
                "name_key": {
                    "description": "name_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "markdownDescription": "name_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "type": "string"
                },
                "stacktrace_key": {
                    "description": "stacktrace_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "markdownDescription": "stacktrace_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "type": "string"
                },
                "time_format": {
                    "description": "time_format: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "markdownDescription": "time_format: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "type": "string"
                },
                "time_key": {
                    "description": "time_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "markdownDescription": "time_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)",
                    "type": "string"
                }
            }
        },
        "caddy.logging.encoders.single_field": {
            "description": "single_field: `object`  \nModule: `caddy.logging.encoders.single_field`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#SingleFieldEncoder)",
            "markdownDescription": "single_field: `object`  \nModule: `caddy.logging.encoders.single_field`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#SingleFieldEncoder)",
            "type": "object",
            "properties": {
                "fallback": {
                    "description": "fallback: ``  \nModule: `caddy.logging.encoders`  \n",
                    "markdownDescription": "fallback: ``  \nModule: `caddy.logging.encoders`  \n",
                    "required": [
                        "format"
                    ],
                    "allOf": [
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "console"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.console"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "filter"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.filter"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "json"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.json"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "logfmt"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.logfmt"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "single_field"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.single_field"
                            }
                        },
                        {
                            "properties": {
                                "format": {
                                    "description": "`fallback` key to identify specified module.  \nformat: `string`  \nModule: `caddy.logging.encoders`",
                                    "markdownDescription": "`fallback` key to identify specified module.  \nformat: `string`  \nModule: `caddy.logging.encoders`",
                                    "type": "string",
                                    "enum": [
                                        "console",
                                        "filter",
                                        "json",
                                        "logfmt",
                                        "single_field"
                                    ]
                                }
                            }
                        }
                    ]
                },
                "field": {
                    "description": "field: `string`  \nModule: `caddy.logging.encoders.single_field`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#SingleFieldEncoder)",
                    "markdownDescription": "field: `string`  \nModule: `caddy.logging.encoders.single_field`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#SingleFieldEncoder)",
                    "type": "string"
                }
            }
        },
        "caddy.logging.writers.discard": {
            "description": "discard: `object`  \nModule: `caddy.logging.writers.discard`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2#DiscardWriter)",
            "markdownDescription": "discard: `object`  \nModule: `caddy.logging.writers.discard`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2#DiscardWriter)",
            "type": "object"
        },
        "caddy.logging.writers.file": {
            "description": "file: `object`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
            "markdownDescription": "file: `object`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
            "type": "object",
            "properties": {
                "filename": {
                    "description": "filename: `string`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
                    "markdownDescription": "filename: `string`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
                    "type": "string"
                },
                "roll": {
                    "description": "roll: `boolean`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
                    "markdownDescription": "roll: `boolean`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
                    "type": "boolean"
                },
                "roll_gzip": {
                    "description": "roll_gzip: `boolean`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
                    "markdownDescription": "roll_gzip: `boolean`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
                    "type": "boolean"
                },
                "roll_keep": {
                    "description": "roll_keep: `number`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
                    "markdownDescription": "roll_keep: `number`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
                    "type": "number"
                },
                "roll_keep_days": {
                    "description": "roll_keep_days: `number`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
                    "markdownDescription": "roll_keep_days: `number`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
                    "type": "number"
                },
                "roll_local_time": {
                    "description": "roll_local_time: `boolean`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
                    "markdownDescription": "roll_local_time: `boolean`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
                    "type": "boolean"
                },
                "roll_size_mb": {
                    "description": "roll_size_mb: `number`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
                    "markdownDescription": "roll_size_mb: `number`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)",
                    "type": "number"
                }
            }
        },
        "caddy.logging.writers.net": {
            "description": "net: `object`  \nModule: `caddy.logging.writers.net`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#NetWriter)",
            "markdownDescription": "net: `object`  \nModule: `caddy.logging.writers.net`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#NetWriter)",
            "type": "object",
            "properties": {
                "address": {
                    "description": "address: `string`  \nModule: `caddy.logging.writers.net`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#NetWriter)",
                    "markdownDescription": "address: `string`  \nModule: `caddy.logging.writers.net`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#NetWriter)",
                    "type": "string"
                }
            }
        },
        "caddy.logging.writers.stderr": {
            "description": "stderr: `object`  \nModule: `caddy.logging.writers.stderr`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2#StderrWriter)",
            "markdownDescription": "stderr: `object`  \nModule: `caddy.logging.writers.stderr`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2#StderrWriter)",
            "type": "object"
        },
        "caddy.logging.writers.stdout": {
            "description": "stdout: `object`  \nModule: `caddy.logging.writers.stdout`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2#StdoutWriter)",
            "markdownDescription": "stdout: `object`  \nModule: `caddy.logging.writers.stdout`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2#StdoutWriter)",
            "type": "object"
        },
        "caddy.storage.file_system": {
            "description": "file_system: `object`  \nModule: `caddy.storage.file_system`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/filestorage#FileStorage)",
            "markdownDescription": "file_system: `object`  \nModule: `caddy.storage.file_system`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/filestorage#FileStorage)",
            "type": "object",
            "properties": {
                "root": {
                    "description": "root: `string`  \nModule: `caddy.storage.file_system`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/filestorage#FileStorage)",
                    "markdownDescription": "root: `string`  \nModule: `caddy.storage.file_system`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/filestorage#FileStorage)",
                    "type": "string"
                }
            }
        },
        "exec": {
            "description": "exec: `object`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
            "markdownDescription": "exec: `object`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
            "type": "object",
            "properties": {
                "commands": {
                    "description": "commands: `array`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                    "markdownDescription": "commands: `array`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "args": {
                                "description": "args: `array`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "markdownDescription": "args: `array`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "at": {
                                "description": "at: `array`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "markdownDescription": "at: `array`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "command": {
                                "description": "command: `string`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "markdownDescription": "command: `string`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "type": "string"
                            },
                            "directory": {
                                "description": "directory: `string`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "markdownDescription": "directory: `string`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "type": "string"
                            },
                            "foreground": {
                                "description": "foreground: `boolean`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "markdownDescription": "foreground: `boolean`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "type": "boolean"
                            },
                            "timeout": {
                                "description": "timeout: `string`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "markdownDescription": "timeout: `string`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "http": {
            "description": "http: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
            "markdownDescription": "http: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
            "type": "object",
            "properties": {
                "grace_period": {
                    "description": "grace_period: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                    "markdownDescription": "grace_period: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                    "type": "number"
                },
                "http_port": {
                    "description": "http_port: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                    "markdownDescription": "http_port: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                    "type": "number"
                },
                "https_port": {
                    "description": "https_port: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                    "markdownDescription": "https_port: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                    "type": "number"
                },
                "servers": {
                    "description": "servers: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                    "markdownDescription": "servers: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                    "type": "object",
                    "additionalProperties": {
                        "properties": {
                            "automatic_https": {
                                "description": "automatic_https: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "markdownDescription": "automatic_https: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "type": "object",
                                "properties": {
                                    "disable": {
                                        "description": "disable: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "markdownDescription": "disable: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "type": "boolean"
                                    },
                                    "disable_redirects": {
                                        "description": "disable_redirects: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "markdownDescription": "disable_redirects: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "type": "boolean"
                                    },
                                    "ignore_loaded_certificates": {
                                        "description": "ignore_loaded_certificates: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "markdownDescription": "ignore_loaded_certificates: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "type": "boolean"
                                    },
                                    "skip": {
                                        "description": "skip: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "markdownDescription": "skip: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "skip_certificates": {
                                        "description": "skip_certificates: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "markdownDescription": "skip_certificates: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "errors": {
                                "description": "errors: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "markdownDescription": "errors: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "type": "object",
                                "properties": {
                                    "routes": {
                                        "description": "routes: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "markdownDescription": "routes: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "group": {
                                                    "description": "group: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "markdownDescription": "group: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "type": "string"
                                                },
                                                "handle": {
                                                    "description": "handle: `array`  \nModule: `http.handlers`  \n",
                                                    "markdownDescription": "handle: `array`  \nModule: `http.handlers`  \n",
                                                    "type": "array",
                                                    "items": {
                                                        "required": [
                                                            "handler"
                                                        ],
                                                        "allOf": [
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "hmac"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.hmac"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "encode"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.encode"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "error"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.error"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "exec"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.exec"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "headers"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.headers"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "visitor_ip"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.visitor_ip"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "request_body"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.request_body"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "reverse_proxy"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.reverse_proxy"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "rewrite"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.rewrite"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "templates"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.templates"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "vars"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.vars"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "authentication"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.authentication"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "file_server"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.file_server"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "json_parse"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.json_parse"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "static_response"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.static_response"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "subroute"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.subroute"
                                                                }
                                                            },
                                                            {
                                                                "properties": {
                                                                    "handler": {
                                                                        "description": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                                        "markdownDescription": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                                        "type": "string",
                                                                        "enum": [
                                                                            "hmac",
                                                                            "encode",
                                                                            "error",
                                                                            "exec",
                                                                            "headers",
                                                                            "visitor_ip",
                                                                            "request_body",
                                                                            "reverse_proxy",
                                                                            "rewrite",
                                                                            "templates",
                                                                            "vars",
                                                                            "authentication",
                                                                            "file_server",
                                                                            "json_parse",
                                                                            "static_response",
                                                                            "subroute"
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                "match": {
                                                    "description": "match: `array`  \nModule: `http.matchers`  \n",
                                                    "markdownDescription": "match: `array`  \nModule: `http.matchers`  \n",
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "execnopmatch": {
                                                                "$ref": "#/definitions/http.matchers.execnopmatch"
                                                            },
                                                            "expression": {
                                                                "$ref": "#/definitions/http.matchers.expression"
                                                            },
                                                            "file": {
                                                                "$ref": "#/definitions/http.matchers.file"
                                                            },
                                                            "header": {
                                                                "$ref": "#/definitions/http.matchers.header"
                                                            },
                                                            "header_regexp": {
                                                                "$ref": "#/definitions/http.matchers.header_regexp"
                                                            },
                                                            "host": {
                                                                "$ref": "#/definitions/http.matchers.host"
                                                            },
                                                            "method": {
                                                                "$ref": "#/definitions/http.matchers.method"
                                                            },
                                                            "not": {
                                                                "$ref": "#/definitions/http.matchers.not"
                                                            },
                                                            "path": {
                                                                "$ref": "#/definitions/http.matchers.path"
                                                            },
                                                            "path_regexp": {
                                                                "$ref": "#/definitions/http.matchers.path_regexp"
                                                            },
                                                            "protocol": {
                                                                "$ref": "#/definitions/http.matchers.protocol"
                                                            },
                                                            "query": {
                                                                "$ref": "#/definitions/http.matchers.query"
                                                            },
                                                            "remote_ip": {
                                                                "$ref": "#/definitions/http.matchers.remote_ip"
                                                            },
                                                            "vars": {
                                                                "$ref": "#/definitions/http.matchers.vars"
                                                            },
                                                            "vars_regexp": {
                                                                "$ref": "#/definitions/http.matchers.vars_regexp"
                                                            }
                                                        }
                                                    }
                                                },
                                                "terminal": {
                                                    "description": "terminal: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "markdownDescription": "terminal: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "experimental_http3": {
                                "description": "experimental_http3: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "markdownDescription": "experimental_http3: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "type": "boolean"
                            },
                            "idle_timeout": {
                                "description": "idle_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "markdownDescription": "idle_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "type": "number"
                            },
                            "listen": {
                                "description": "listen: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "markdownDescription": "listen: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "listener_wrappers": {
                                "description": "listener_wrappers: `array`  \nModule: `caddy.listeners`  \n",
                                "markdownDescription": "listener_wrappers: `array`  \nModule: `caddy.listeners`  \n",
                                "type": "array",
                                "items": {
                                    "required": [
                                        "wrapper"
                                    ],
                                    "allOf": [
                                        {
                                            "if": {
                                                "properties": {
                                                    "wrapper": {
                                                        "const": "tls"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/caddy.listeners.tls"
                                            }
                                        },
                                        {
                                            "properties": {
                                                "wrapper": {
                                                    "description": "`listener_wrappers` key to identify specified module.  \nwrapper: `string`  \nModule: `caddy.listeners`",
                                                    "markdownDescription": "`listener_wrappers` key to identify specified module.  \nwrapper: `string`  \nModule: `caddy.listeners`",
                                                    "type": "string",
                                                    "enum": [
                                                        "tls"
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            "logs": {
                                "description": "logs: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "markdownDescription": "logs: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "type": "object",
                                "properties": {
                                    "default_logger_name": {
                                        "description": "default_logger_name: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "markdownDescription": "default_logger_name: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "type": "string"
                                    },
                                    "logger_names": {
                                        "description": "logger_names: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "markdownDescription": "logger_names: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "type": "object",
                                        "additionalProperties": {}
                                    },
                                    "skip_hosts": {
                                        "description": "skip_hosts: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "markdownDescription": "skip_hosts: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "skip_unmapped_hosts": {
                                        "description": "skip_unmapped_hosts: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "markdownDescription": "skip_unmapped_hosts: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                        "type": "boolean"
                                    }
                                }
                            },
                            "max_header_bytes": {
                                "description": "max_header_bytes: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "markdownDescription": "max_header_bytes: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "type": "number"
                            },
                            "read_header_timeout": {
                                "description": "read_header_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "markdownDescription": "read_header_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "type": "number"
                            },
                            "read_timeout": {
                                "description": "read_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "markdownDescription": "read_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "type": "number"
                            },
                            "routes": {
                                "description": "routes: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "markdownDescription": "routes: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "group": {
                                            "description": "group: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "markdownDescription": "group: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "type": "string"
                                        },
                                        "handle": {
                                            "description": "handle: `array`  \nModule: `http.handlers`  \n",
                                            "markdownDescription": "handle: `array`  \nModule: `http.handlers`  \n",
                                            "type": "array",
                                            "items": {
                                                "required": [
                                                    "handler"
                                                ],
                                                "allOf": [
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "encode"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.encode"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "error"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.error"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "exec"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.exec"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "hmac"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.hmac"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "headers"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.headers"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "visitor_ip"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.visitor_ip"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "rewrite"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.rewrite"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "templates"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.templates"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "vars"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.vars"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "authentication"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.authentication"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "file_server"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.file_server"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "json_parse"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.json_parse"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "request_body"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.request_body"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "reverse_proxy"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.reverse_proxy"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "static_response"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.static_response"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "subroute"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.subroute"
                                                        }
                                                    },
                                                    {
                                                        "properties": {
                                                            "handler": {
                                                                "description": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                                "markdownDescription": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                                "type": "string",
                                                                "enum": [
                                                                    "encode",
                                                                    "error",
                                                                    "exec",
                                                                    "hmac",
                                                                    "headers",
                                                                    "visitor_ip",
                                                                    "rewrite",
                                                                    "templates",
                                                                    "vars",
                                                                    "authentication",
                                                                    "file_server",
                                                                    "json_parse",
                                                                    "request_body",
                                                                    "reverse_proxy",
                                                                    "static_response",
                                                                    "subroute"
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        "match": {
                                            "description": "match: `array`  \nModule: `http.matchers`  \n",
                                            "markdownDescription": "match: `array`  \nModule: `http.matchers`  \n",
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "execnopmatch": {
                                                        "$ref": "#/definitions/http.matchers.execnopmatch"
                                                    },
                                                    "expression": {
                                                        "$ref": "#/definitions/http.matchers.expression"
                                                    },
                                                    "file": {
                                                        "$ref": "#/definitions/http.matchers.file"
                                                    },
                                                    "header": {
                                                        "$ref": "#/definitions/http.matchers.header"
                                                    },
                                                    "header_regexp": {
                                                        "$ref": "#/definitions/http.matchers.header_regexp"
                                                    },
                                                    "host": {
                                                        "$ref": "#/definitions/http.matchers.host"
                                                    },
                                                    "method": {
                                                        "$ref": "#/definitions/http.matchers.method"
                                                    },
                                                    "not": {
                                                        "$ref": "#/definitions/http.matchers.not"
                                                    },
                                                    "path": {
                                                        "$ref": "#/definitions/http.matchers.path"
                                                    },
                                                    "path_regexp": {
                                                        "$ref": "#/definitions/http.matchers.path_regexp"
                                                    },
                                                    "protocol": {
                                                        "$ref": "#/definitions/http.matchers.protocol"
                                                    },
                                                    "query": {
                                                        "$ref": "#/definitions/http.matchers.query"
                                                    },
                                                    "remote_ip": {
                                                        "$ref": "#/definitions/http.matchers.remote_ip"
                                                    },
                                                    "vars": {
                                                        "$ref": "#/definitions/http.matchers.vars"
                                                    },
                                                    "vars_regexp": {
                                                        "$ref": "#/definitions/http.matchers.vars_regexp"
                                                    }
                                                }
                                            }
                                        },
                                        "terminal": {
                                            "description": "terminal: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "markdownDescription": "terminal: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "type": "boolean"
                                        }
                                    }
                                }
                            },
                            "strict_sni_host": {
                                "description": "strict_sni_host: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "markdownDescription": "strict_sni_host: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "type": "boolean"
                            },
                            "tls_connection_policies": {
                                "description": "tls_connection_policies: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "markdownDescription": "tls_connection_policies: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "alpn": {
                                            "description": "alpn: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "markdownDescription": "alpn: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "certificate_selection": {
                                            "description": "certificate_selection: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "markdownDescription": "certificate_selection: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "type": "object",
                                            "properties": {
                                                "all_tags": {
                                                    "description": "all_tags: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "markdownDescription": "all_tags: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "any_tag": {
                                                    "description": "any_tag: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "markdownDescription": "any_tag: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "public_key_algorithm": {
                                                    "description": "public_key_algorithm: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "markdownDescription": "public_key_algorithm: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "type": "number"
                                                },
                                                "serial_number": {
                                                    "description": "serial_number: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "markdownDescription": "serial_number: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                },
                                                "subject_organization": {
                                                    "description": "subject_organization: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "markdownDescription": "subject_organization: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        },
                                        "cipher_suites": {
                                            "description": "cipher_suites: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "markdownDescription": "cipher_suites: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "client_authentication": {
                                            "description": "client_authentication: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "markdownDescription": "client_authentication: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "type": "object",
                                            "properties": {
                                                "mode": {
                                                    "description": "mode: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "markdownDescription": "mode: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "type": "string"
                                                },
                                                "trusted_ca_certs": {
                                                    "description": "trusted_ca_certs: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "markdownDescription": "trusted_ca_certs: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "trusted_leaf_certs": {
                                                    "description": "trusted_leaf_certs: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "markdownDescription": "trusted_leaf_certs: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        },
                                        "curves": {
                                            "description": "curves: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "markdownDescription": "curves: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "default_sni": {
                                            "description": "default_sni: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "markdownDescription": "default_sni: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "type": "string"
                                        },
                                        "match": {
                                            "description": "match: ``  \nModule: `tls.handshake_match`  \n",
                                            "markdownDescription": "match: ``  \nModule: `tls.handshake_match`  \n",
                                            "properties": {
                                                "sni": {
                                                    "$ref": "#/definitions/tls.handshake_match.sni"
                                                }
                                            }
                                        },
                                        "protocol_max": {
                                            "description": "protocol_max: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "markdownDescription": "protocol_max: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "type": "string"
                                        },
                                        "protocol_min": {
                                            "description": "protocol_min: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "markdownDescription": "protocol_min: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "write_timeout": {
                                "description": "write_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "markdownDescription": "write_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)",
                                "type": "number"
                            }
                        }
                    }
                }
            }
        },
        "http.authentication.hashes.bcrypt": {
            "description": "bcrypt: `object`  \nModule: `http.authentication.hashes.bcrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#BcryptHash)",
            "markdownDescription": "bcrypt: `object`  \nModule: `http.authentication.hashes.bcrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#BcryptHash)",
            "type": "object"
        },
        "http.authentication.hashes.scrypt": {
            "description": "scrypt: `object`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
            "markdownDescription": "scrypt: `object`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
            "type": "object",
            "properties": {
                "N": {
                    "description": "N: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "markdownDescription": "N: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "type": "number"
                },
                "key_length": {
                    "description": "key_length: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "markdownDescription": "key_length: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "type": "number"
                },
                "p": {
                    "description": "p: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "markdownDescription": "p: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "type": "number"
                },
                "r": {
                    "description": "r: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "markdownDescription": "r: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "type": "number"
                }
            }
        },
        "http.authentication.providers.http_basic": {
            "description": "http_basic: `object`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
            "markdownDescription": "http_basic: `object`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
            "type": "object",
            "properties": {
                "accounts": {
                    "description": "accounts: `array`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                    "markdownDescription": "accounts: `array`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "password": {
                                "description": "password: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                                "markdownDescription": "password: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                                "type": "string"
                            },
                            "salt": {
                                "description": "salt: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                                "markdownDescription": "salt: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                                "type": "string"
                            },
                            "username": {
                                "description": "username: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                                "markdownDescription": "username: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                                "type": "string"
                            }
                        }
                    }
                },
                "hash": {
                    "description": "hash: ``  \nModule: `http.authentication.hashes`  \n",
                    "markdownDescription": "hash: ``  \nModule: `http.authentication.hashes`  \n",
                    "required": [
                        "algorithm"
                    ],
                    "allOf": [
                        {
                            "if": {
                                "properties": {
                                    "algorithm": {
                                        "const": "scrypt"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/http.authentication.hashes.scrypt"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "algorithm": {
                                        "const": "bcrypt"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/http.authentication.hashes.bcrypt"
                            }
                        },
                        {
                            "properties": {
                                "algorithm": {
                                    "description": "`hash` key to identify specified module.  \nalgorithm: `string`  \nModule: `http.authentication.hashes`",
                                    "markdownDescription": "`hash` key to identify specified module.  \nalgorithm: `string`  \nModule: `http.authentication.hashes`",
                                    "type": "string",
                                    "enum": [
                                        "scrypt",
                                        "bcrypt"
                                    ]
                                }
                            }
                        }
                    ]
                },
                "realm": {
                    "description": "realm: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                    "markdownDescription": "realm: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                    "type": "string"
                }
            }
        },
        "http.encoders.gzip": {
            "description": "gzip: `object`  \nModule: `http.encoders.gzip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode/gzip#Gzip)",
            "markdownDescription": "gzip: `object`  \nModule: `http.encoders.gzip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode/gzip#Gzip)",
            "type": "object",
            "properties": {
                "level": {
                    "description": "level: `number`  \nModule: `http.encoders.gzip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode/gzip#Gzip)",
                    "markdownDescription": "level: `number`  \nModule: `http.encoders.gzip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode/gzip#Gzip)",
                    "type": "number"
                }
            }
        },
        "http.encoders.zstd": {
            "description": "zstd: `object`  \nModule: `http.encoders.zstd`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode/zstd#Zstd)",
            "markdownDescription": "zstd: `object`  \nModule: `http.encoders.zstd`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode/zstd#Zstd)",
            "type": "object"
        },
        "http.handlers.authentication": {
            "description": "authentication: `object`  \nModule: `http.handlers.authentication`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#Authentication)",
            "markdownDescription": "authentication: `object`  \nModule: `http.handlers.authentication`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#Authentication)",
            "type": "object",
            "properties": {
                "providers": {
                    "description": "providers: ``  \nModule: `http.authentication.providers`  \n",
                    "markdownDescription": "providers: ``  \nModule: `http.authentication.providers`  \n",
                    "properties": {
                        "http_basic": {
                            "$ref": "#/definitions/http.authentication.providers.http_basic"
                        }
                    }
                }
            }
        },
        "http.handlers.encode": {
            "description": "encode: `object`  \nModule: `http.handlers.encode`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode#Encode)",
            "markdownDescription": "encode: `object`  \nModule: `http.handlers.encode`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode#Encode)",
            "type": "object",
            "properties": {
                "encodings": {
                    "description": "encodings: ``  \nModule: `http.encoders`  \n",
                    "markdownDescription": "encodings: ``  \nModule: `http.encoders`  \n",
                    "properties": {
                        "gzip": {
                            "$ref": "#/definitions/http.encoders.gzip"
                        },
                        "zstd": {
                            "$ref": "#/definitions/http.encoders.zstd"
                        }
                    }
                },
                "minimum_length": {
                    "description": "minimum_length: `number`  \nModule: `http.handlers.encode`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode#Encode)",
                    "markdownDescription": "minimum_length: `number`  \nModule: `http.handlers.encode`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode#Encode)",
                    "type": "number"
                }
            }
        },
        "http.handlers.error": {
            "description": "error: `object`  \nModule: `http.handlers.error`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticError)",
            "markdownDescription": "error: `object`  \nModule: `http.handlers.error`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticError)",
            "type": "object",
            "properties": {
                "error": {
                    "description": "error: `string`  \nModule: `http.handlers.error`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticError)",
                    "markdownDescription": "error: `string`  \nModule: `http.handlers.error`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticError)",
                    "type": "string"
                },
                "status_code": {
                    "description": "status_code: `string`  \nModule: `http.handlers.error`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticError)",
                    "markdownDescription": "status_code: `string`  \nModule: `http.handlers.error`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticError)",
                    "type": "string"
                }
            }
        },
        "http.handlers.exec": {
            "description": "exec: `object`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
            "markdownDescription": "exec: `object`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
            "type": "object",
            "properties": {
                "args": {
                    "description": "args: `array`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "markdownDescription": "args: `array`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "at": {
                    "description": "at: `array`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "markdownDescription": "at: `array`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "command: `string`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "markdownDescription": "command: `string`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "type": "string"
                },
                "directory": {
                    "description": "directory: `string`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "markdownDescription": "directory: `string`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "type": "string"
                },
                "foreground": {
                    "description": "foreground: `boolean`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "markdownDescription": "foreground: `boolean`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "type": "boolean"
                },
                "timeout": {
                    "description": "timeout: `string`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "markdownDescription": "timeout: `string`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "type": "string"
                }
            }
        },
        "http.handlers.file_server": {
            "description": "file_server: `object`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
            "markdownDescription": "file_server: `object`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
            "type": "object",
            "properties": {
                "browse": {
                    "description": "browse: `object`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
                    "markdownDescription": "browse: `object`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
                    "type": "object",
                    "properties": {
                        "template_file": {
                            "description": "template_file: `string`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
                            "markdownDescription": "template_file: `string`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
                            "type": "string"
                        }
                    }
                },
                "canonical_uris": {
                    "description": "canonical_uris: `boolean`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
                    "markdownDescription": "canonical_uris: `boolean`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
                    "type": "boolean"
                },
                "hide": {
                    "description": "hide: `array`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
                    "markdownDescription": "hide: `array`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "index_names": {
                    "description": "index_names: `array`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
                    "markdownDescription": "index_names: `array`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pass_thru": {
                    "description": "pass_thru: `boolean`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
                    "markdownDescription": "pass_thru: `boolean`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
                    "type": "boolean"
                },
                "root": {
                    "description": "root: `string`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
                    "markdownDescription": "root: `string`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)",
                    "type": "string"
                }
            }
        },
        "http.handlers.headers": {
            "description": "headers: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
            "markdownDescription": "headers: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
            "type": "object",
            "properties": {
                "request": {
                    "description": "request: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                    "markdownDescription": "request: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                    "type": "object",
                    "properties": {
                        "add": {
                            "description": "add: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "markdownDescription": "add: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "delete": {
                            "description": "delete: `array`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "markdownDescription": "delete: `array`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "replace": {
                            "description": "replace: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "markdownDescription": "replace: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "replace": {
                                            "description": "replace: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                            "markdownDescription": "replace: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                            "type": "string"
                                        },
                                        "search": {
                                            "description": "search: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                            "markdownDescription": "search: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                            "type": "string"
                                        },
                                        "search_regexp": {
                                            "description": "search_regexp: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                            "markdownDescription": "search_regexp: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "set": {
                            "description": "set: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "markdownDescription": "set: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "response": {
                    "description": "response: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                    "markdownDescription": "response: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                    "type": "object",
                    "properties": {
                        "add": {
                            "description": "add: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "markdownDescription": "add: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "deferred": {
                            "description": "deferred: `boolean`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "markdownDescription": "deferred: `boolean`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "type": "boolean"
                        },
                        "delete": {
                            "description": "delete: `array`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "markdownDescription": "delete: `array`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "replace": {
                            "description": "replace: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "markdownDescription": "replace: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "replace": {
                                            "description": "replace: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                            "markdownDescription": "replace: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                            "type": "string"
                                        },
                                        "search": {
                                            "description": "search: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                            "markdownDescription": "search: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                            "type": "string"
                                        },
                                        "search_regexp": {
                                            "description": "search_regexp: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                            "markdownDescription": "search_regexp: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "require": {
                            "description": "require: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "markdownDescription": "require: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "type": "object",
                            "properties": {
                                "headers": {
                                    "description": "headers: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                    "markdownDescription": "headers: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "status_code": {
                                    "description": "status_code: `array`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                    "markdownDescription": "status_code: `array`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                                    "type": "array",
                                    "items": {
                                        "type": "number"
                                    }
                                }
                            }
                        },
                        "set": {
                            "description": "set: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "markdownDescription": "set: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)",
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "http.handlers.hmac": {
            "description": "hmac: `object`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
            "markdownDescription": "hmac: `object`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
            "type": "object",
            "properties": {
                "algorithm": {
                    "description": "algorithm: `string`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
                    "markdownDescription": "algorithm: `string`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
                    "type": "string"
                },
                "name": {
                    "description": "name: `string`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
                    "markdownDescription": "name: `string`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
                    "type": "string"
                },
                "secret": {
                    "description": "secret: `string`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
                    "markdownDescription": "secret: `string`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
                    "type": "string"
                }
            }
        },
        "http.handlers.json_parse": {
            "description": "json_parse: `object`  \nModule: `http.handlers.json_parse`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-json-parse#JSONParse)",
            "markdownDescription": "json_parse: `object`  \nModule: `http.handlers.json_parse`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-json-parse#JSONParse)",
            "type": "object",
            "properties": {
                "strict": {
                    "description": "strict: `boolean`  \nModule: `http.handlers.json_parse`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-json-parse#JSONParse)",
                    "markdownDescription": "strict: `boolean`  \nModule: `http.handlers.json_parse`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-json-parse#JSONParse)",
                    "type": "boolean"
                }
            }
        },
        "http.handlers.request_body": {
            "description": "request_body: `object`  \nModule: `http.handlers.request_body`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/requestbody#RequestBody)",
            "markdownDescription": "request_body: `object`  \nModule: `http.handlers.request_body`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/requestbody#RequestBody)",
            "type": "object",
            "properties": {
                "max_size": {
                    "description": "max_size: `number`  \nModule: `http.handlers.request_body`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/requestbody#RequestBody)",
                    "markdownDescription": "max_size: `number`  \nModule: `http.handlers.request_body`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/requestbody#RequestBody)",
                    "type": "number"
                }
            }
        },
        "http.handlers.reverse_proxy": {
            "description": "reverse_proxy: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
            "markdownDescription": "reverse_proxy: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
            "type": "object",
            "properties": {
                "buffer_requests": {
                    "description": "buffer_requests: `boolean`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                    "markdownDescription": "buffer_requests: `boolean`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                    "type": "boolean"
                },
                "circuit_breaker": {
                    "description": "circuit_breaker: `object`  \nModule: `http.reverse_proxy.circuit_breakers`  \n",
                    "markdownDescription": "circuit_breaker: `object`  \nModule: `http.reverse_proxy.circuit_breakers`  \n",
                    "type": "object"
                },
                "flush_interval": {
                    "description": "flush_interval: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                    "markdownDescription": "flush_interval: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                    "type": "number"
                },
                "headers": {
                    "description": "headers: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                    "markdownDescription": "headers: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                    "type": "object",
                    "properties": {
                        "request": {
                            "description": "request: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                            "markdownDescription": "request: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                            "type": "object",
                            "properties": {
                                "add": {
                                    "description": "add: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "add: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "delete": {
                                    "description": "delete: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "delete: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "replace": {
                                    "description": "replace: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "replace: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "replace": {
                                                    "description": "replace: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                                    "markdownDescription": "replace: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                                    "type": "string"
                                                },
                                                "search": {
                                                    "description": "search: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                                    "markdownDescription": "search: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                                    "type": "string"
                                                },
                                                "search_regexp": {
                                                    "description": "search_regexp: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                                    "markdownDescription": "search_regexp: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "set": {
                                    "description": "set: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "set: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "response": {
                            "description": "response: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                            "markdownDescription": "response: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                            "type": "object",
                            "properties": {
                                "add": {
                                    "description": "add: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "add: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "deferred": {
                                    "description": "deferred: `boolean`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "deferred: `boolean`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "boolean"
                                },
                                "delete": {
                                    "description": "delete: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "delete: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "replace": {
                                    "description": "replace: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "replace: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "replace": {
                                                    "description": "replace: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                                    "markdownDescription": "replace: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                                    "type": "string"
                                                },
                                                "search": {
                                                    "description": "search: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                                    "markdownDescription": "search: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                                    "type": "string"
                                                },
                                                "search_regexp": {
                                                    "description": "search_regexp: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                                    "markdownDescription": "search_regexp: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "require": {
                                    "description": "require: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "require: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "object",
                                    "properties": {
                                        "headers": {
                                            "description": "headers: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                            "markdownDescription": "headers: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "status_code": {
                                            "description": "status_code: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                            "markdownDescription": "status_code: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                            "type": "array",
                                            "items": {
                                                "type": "number"
                                            }
                                        }
                                    }
                                },
                                "set": {
                                    "description": "set: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "set: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "health_checks": {
                    "description": "health_checks: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                    "markdownDescription": "health_checks: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                    "type": "object",
                    "properties": {
                        "active": {
                            "description": "active: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                            "markdownDescription": "active: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                            "type": "object",
                            "properties": {
                                "expect_body": {
                                    "description": "expect_body: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "expect_body: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "string"
                                },
                                "expect_status": {
                                    "description": "expect_status: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "expect_status: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "number"
                                },
                                "headers": {
                                    "description": "headers: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "headers: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "interval": {
                                    "description": "interval: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "interval: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "number"
                                },
                                "max_size": {
                                    "description": "max_size: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "max_size: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "number"
                                },
                                "path": {
                                    "description": "path: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "path: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "string"
                                },
                                "port": {
                                    "description": "port: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "port: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "number"
                                },
                                "timeout": {
                                    "description": "timeout: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "timeout: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "number"
                                }
                            }
                        },
                        "passive": {
                            "description": "passive: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                            "markdownDescription": "passive: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                            "type": "object",
                            "properties": {
                                "fail_duration": {
                                    "description": "fail_duration: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "fail_duration: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "number"
                                },
                                "max_fails": {
                                    "description": "max_fails: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "max_fails: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "number"
                                },
                                "unhealthy_latency": {
                                    "description": "unhealthy_latency: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "unhealthy_latency: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "number"
                                },
                                "unhealthy_request_count": {
                                    "description": "unhealthy_request_count: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "unhealthy_request_count: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "number"
                                },
                                "unhealthy_status": {
                                    "description": "unhealthy_status: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "markdownDescription": "unhealthy_status: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                    "type": "array",
                                    "items": {
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    }
                },
                "load_balancing": {
                    "description": "load_balancing: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                    "markdownDescription": "load_balancing: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                    "type": "object",
                    "properties": {
                        "retry_match": {
                            "description": "retry_match: `array`  \nModule: `http.matchers`  \n",
                            "markdownDescription": "retry_match: `array`  \nModule: `http.matchers`  \n",
                            "type": "array",
                            "items": {
                                "properties": {
                                    "execnopmatch": {
                                        "$ref": "#/definitions/http.matchers.execnopmatch"
                                    },
                                    "expression": {
                                        "$ref": "#/definitions/http.matchers.expression"
                                    },
                                    "file": {
                                        "$ref": "#/definitions/http.matchers.file"
                                    },
                                    "header": {
                                        "$ref": "#/definitions/http.matchers.header"
                                    },
                                    "header_regexp": {
                                        "$ref": "#/definitions/http.matchers.header_regexp"
                                    },
                                    "host": {
                                        "$ref": "#/definitions/http.matchers.host"
                                    },
                                    "method": {
                                        "$ref": "#/definitions/http.matchers.method"
                                    },
                                    "not": {
                                        "$ref": "#/definitions/http.matchers.not"
                                    },
                                    "path": {
                                        "$ref": "#/definitions/http.matchers.path"
                                    },
                                    "path_regexp": {
                                        "$ref": "#/definitions/http.matchers.path_regexp"
                                    },
                                    "protocol": {
                                        "$ref": "#/definitions/http.matchers.protocol"
                                    },
                                    "query": {
                                        "$ref": "#/definitions/http.matchers.query"
                                    },
                                    "remote_ip": {
                                        "$ref": "#/definitions/http.matchers.remote_ip"
                                    },
                                    "vars": {
                                        "$ref": "#/definitions/http.matchers.vars"
                                    },
                                    "vars_regexp": {
                                        "$ref": "#/definitions/http.matchers.vars_regexp"
                                    }
                                }
                            }
                        },
                        "selection_policy": {
                            "description": "selection_policy: ``  \nModule: `http.reverse_proxy.selection_policies`  \n",
                            "markdownDescription": "selection_policy: ``  \nModule: `http.reverse_proxy.selection_policies`  \n",
                            "required": [
                                "policy"
                            ],
                            "allOf": [
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "random"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.random"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "random_choose"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.random_choose"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "round_robin"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.round_robin"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "uri_hash"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.uri_hash"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "first"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.first"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "header"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.header"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "ip_hash"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.ip_hash"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "least_conn"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.least_conn"
                                    }
                                },
                                {
                                    "properties": {
                                        "policy": {
                                            "description": "`selection_policy` key to identify specified module.  \npolicy: `string`  \nModule: `http.reverse_proxy.selection_policies`",
                                            "markdownDescription": "`selection_policy` key to identify specified module.  \npolicy: `string`  \nModule: `http.reverse_proxy.selection_policies`",
                                            "type": "string",
                                            "enum": [
                                                "random",
                                                "random_choose",
                                                "round_robin",
                                                "uri_hash",
                                                "first",
                                                "header",
                                                "ip_hash",
                                                "least_conn"
                                            ]
                                        }
                                    }
                                }
                            ]
                        },
                        "try_duration": {
                            "description": "try_duration: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                            "markdownDescription": "try_duration: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                            "type": "number"
                        },
                        "try_interval": {
                            "description": "try_interval: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                            "markdownDescription": "try_interval: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                            "type": "number"
                        }
                    }
                },
                "transport": {
                    "description": "transport: ``  \nModule: `http.reverse_proxy.transport`  \n",
                    "markdownDescription": "transport: ``  \nModule: `http.reverse_proxy.transport`  \n",
                    "required": [
                        "protocol"
                    ],
                    "allOf": [
                        {
                            "if": {
                                "properties": {
                                    "protocol": {
                                        "const": "fastcgi"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/http.reverse_proxy.transport.fastcgi"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "protocol": {
                                        "const": "http"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/http.reverse_proxy.transport.http"
                            }
                        },
                        {
                            "properties": {
                                "protocol": {
                                    "description": "`transport` key to identify specified module.  \nprotocol: `string`  \nModule: `http.reverse_proxy.transport`",
                                    "markdownDescription": "`transport` key to identify specified module.  \nprotocol: `string`  \nModule: `http.reverse_proxy.transport`",
                                    "type": "string",
                                    "enum": [
                                        "fastcgi",
                                        "http"
                                    ]
                                }
                            }
                        }
                    ]
                },
                "upstreams": {
                    "description": "upstreams: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                    "markdownDescription": "upstreams: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "dial": {
                                "description": "dial: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                "markdownDescription": "dial: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                "type": "string"
                            },
                            "lookup_srv": {
                                "description": "lookup_srv: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                "markdownDescription": "lookup_srv: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                "type": "string"
                            },
                            "max_requests": {
                                "description": "max_requests: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                "markdownDescription": "max_requests: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)",
                                "type": "number"
                            }
                        }
                    }
                }
            }
        },
        "http.handlers.rewrite": {
            "description": "rewrite: `object`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
            "markdownDescription": "rewrite: `object`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
            "type": "object",
            "properties": {
                "method": {
                    "description": "method: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                    "markdownDescription": "method: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                    "type": "string"
                },
                "strip_path_prefix": {
                    "description": "strip_path_prefix: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                    "markdownDescription": "strip_path_prefix: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                    "type": "string"
                },
                "strip_path_suffix": {
                    "description": "strip_path_suffix: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                    "markdownDescription": "strip_path_suffix: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                    "type": "string"
                },
                "uri": {
                    "description": "uri: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                    "markdownDescription": "uri: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                    "type": "string"
                },
                "uri_substring": {
                    "description": "uri_substring: `array`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                    "markdownDescription": "uri_substring: `array`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "find": {
                                "description": "find: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                                "markdownDescription": "find: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                                "type": "string"
                            },
                            "limit": {
                                "description": "limit: `number`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                                "markdownDescription": "limit: `number`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                                "type": "number"
                            },
                            "replace": {
                                "description": "replace: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                                "markdownDescription": "replace: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)",
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "http.handlers.static_response": {
            "description": "static_response: `object`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)",
            "markdownDescription": "static_response: `object`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)",
            "type": "object",
            "properties": {
                "body": {
                    "description": "body: `string`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)",
                    "markdownDescription": "body: `string`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)",
                    "type": "string"
                },
                "close": {
                    "description": "close: `boolean`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)",
                    "markdownDescription": "close: `boolean`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)",
                    "type": "boolean"
                },
                "headers": {
                    "description": "headers: `object`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)",
                    "markdownDescription": "headers: `object`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "status_code": {
                    "description": "status_code: `string`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)",
                    "markdownDescription": "status_code: `string`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)",
                    "type": "string"
                }
            }
        },
        "http.handlers.subroute": {
            "description": "subroute: `object`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
            "markdownDescription": "subroute: `object`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
            "type": "object",
            "properties": {
                "errors": {
                    "description": "errors: `object`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
                    "markdownDescription": "errors: `object`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
                    "type": "object",
                    "properties": {
                        "routes": {
                            "description": "routes: `array`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
                            "markdownDescription": "routes: `array`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "group": {
                                        "description": "group: `string`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
                                        "markdownDescription": "group: `string`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
                                        "type": "string"
                                    },
                                    "handle": {
                                        "description": "handle: `array`  \nModule: `http.handlers`  \n",
                                        "markdownDescription": "handle: `array`  \nModule: `http.handlers`  \n",
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "handler"
                                            ],
                                            "allOf": [
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "exec"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.exec"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "hmac"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.hmac"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "encode"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.encode"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "error"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.error"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "headers"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.headers"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "visitor_ip"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.visitor_ip"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "json_parse"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.json_parse"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "request_body"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.request_body"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "reverse_proxy"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.reverse_proxy"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "rewrite"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.rewrite"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "templates"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.templates"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "vars"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.vars"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "authentication"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.authentication"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "file_server"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.file_server"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "static_response"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.static_response"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "subroute"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.subroute"
                                                    }
                                                },
                                                {
                                                    "properties": {
                                                        "handler": {
                                                            "description": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                            "markdownDescription": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                            "type": "string",
                                                            "enum": [
                                                                "exec",
                                                                "hmac",
                                                                "encode",
                                                                "error",
                                                                "headers",
                                                                "visitor_ip",
                                                                "json_parse",
                                                                "request_body",
                                                                "reverse_proxy",
                                                                "rewrite",
                                                                "templates",
                                                                "vars",
                                                                "authentication",
                                                                "file_server",
                                                                "static_response",
                                                                "subroute"
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "match": {
                                        "description": "match: `array`  \nModule: `http.matchers`  \n",
                                        "markdownDescription": "match: `array`  \nModule: `http.matchers`  \n",
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "execnopmatch": {
                                                    "$ref": "#/definitions/http.matchers.execnopmatch"
                                                },
                                                "expression": {
                                                    "$ref": "#/definitions/http.matchers.expression"
                                                },
                                                "file": {
                                                    "$ref": "#/definitions/http.matchers.file"
                                                },
                                                "header": {
                                                    "$ref": "#/definitions/http.matchers.header"
                                                },
                                                "header_regexp": {
                                                    "$ref": "#/definitions/http.matchers.header_regexp"
                                                },
                                                "host": {
                                                    "$ref": "#/definitions/http.matchers.host"
                                                },
                                                "method": {
                                                    "$ref": "#/definitions/http.matchers.method"
                                                },
                                                "not": {
                                                    "$ref": "#/definitions/http.matchers.not"
                                                },
                                                "path": {
                                                    "$ref": "#/definitions/http.matchers.path"
                                                },
                                                "path_regexp": {
                                                    "$ref": "#/definitions/http.matchers.path_regexp"
                                                },
                                                "protocol": {
                                                    "$ref": "#/definitions/http.matchers.protocol"
                                                },
                                                "query": {
                                                    "$ref": "#/definitions/http.matchers.query"
                                                },
                                                "remote_ip": {
                                                    "$ref": "#/definitions/http.matchers.remote_ip"
                                                },
                                                "vars": {
                                                    "$ref": "#/definitions/http.matchers.vars"
                                                },
                                                "vars_regexp": {
                                                    "$ref": "#/definitions/http.matchers.vars_regexp"
                                                }
                                            }
                                        }
                                    },
                                    "terminal": {
                                        "description": "terminal: `boolean`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
                                        "markdownDescription": "terminal: `boolean`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "routes": {
                    "description": "routes: `array`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
                    "markdownDescription": "routes: `array`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "group": {
                                "description": "group: `string`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
                                "markdownDescription": "group: `string`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
                                "type": "string"
                            },
                            "handle": {
                                "description": "handle: `array`  \nModule: `http.handlers`  \n",
                                "markdownDescription": "handle: `array`  \nModule: `http.handlers`  \n",
                                "type": "array",
                                "items": {
                                    "required": [
                                        "handler"
                                    ],
                                    "allOf": [
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "encode"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.encode"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "error"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.error"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "exec"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.exec"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "hmac"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.hmac"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "headers"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.headers"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "visitor_ip"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.visitor_ip"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "vars"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.vars"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "authentication"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.authentication"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "file_server"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.file_server"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "json_parse"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.json_parse"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "request_body"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.request_body"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "reverse_proxy"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.reverse_proxy"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "rewrite"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.rewrite"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "templates"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.templates"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "static_response"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.static_response"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "subroute"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.subroute"
                                            }
                                        },
                                        {
                                            "properties": {
                                                "handler": {
                                                    "description": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                    "markdownDescription": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                    "type": "string",
                                                    "enum": [
                                                        "encode",
                                                        "error",
                                                        "exec",
                                                        "hmac",
                                                        "headers",
                                                        "visitor_ip",
                                                        "vars",
                                                        "authentication",
                                                        "file_server",
                                                        "json_parse",
                                                        "request_body",
                                                        "reverse_proxy",
                                                        "rewrite",
                                                        "templates",
                                                        "static_response",
                                                        "subroute"
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            "match": {
                                "description": "match: `array`  \nModule: `http.matchers`  \n",
                                "markdownDescription": "match: `array`  \nModule: `http.matchers`  \n",
                                "type": "array",
                                "items": {
                                    "properties": {
                                        "execnopmatch": {
                                            "$ref": "#/definitions/http.matchers.execnopmatch"
                                        },
                                        "expression": {
                                            "$ref": "#/definitions/http.matchers.expression"
                                        },
                                        "file": {
                                            "$ref": "#/definitions/http.matchers.file"
                                        },
                                        "header": {
                                            "$ref": "#/definitions/http.matchers.header"
                                        },
                                        "header_regexp": {
                                            "$ref": "#/definitions/http.matchers.header_regexp"
                                        },
                                        "host": {
                                            "$ref": "#/definitions/http.matchers.host"
                                        },
                                        "method": {
                                            "$ref": "#/definitions/http.matchers.method"
                                        },
                                        "not": {
                                            "$ref": "#/definitions/http.matchers.not"
                                        },
                                        "path": {
                                            "$ref": "#/definitions/http.matchers.path"
                                        },
                                        "path_regexp": {
                                            "$ref": "#/definitions/http.matchers.path_regexp"
                                        },
                                        "protocol": {
                                            "$ref": "#/definitions/http.matchers.protocol"
                                        },
                                        "query": {
                                            "$ref": "#/definitions/http.matchers.query"
                                        },
                                        "remote_ip": {
                                            "$ref": "#/definitions/http.matchers.remote_ip"
                                        },
                                        "vars": {
                                            "$ref": "#/definitions/http.matchers.vars"
                                        },
                                        "vars_regexp": {
                                            "$ref": "#/definitions/http.matchers.vars_regexp"
                                        }
                                    }
                                }
                            },
                            "terminal": {
                                "description": "terminal: `boolean`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
                                "markdownDescription": "terminal: `boolean`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)",
                                "type": "boolean"
                            }
                        }
                    }
                }
            }
        },
        "http.handlers.templates": {
            "description": "templates: `object`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)",
            "markdownDescription": "templates: `object`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)",
            "type": "object",
            "properties": {
                "delimiters": {
                    "description": "delimiters: `array`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)",
                    "markdownDescription": "delimiters: `array`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "file_root": {
                    "description": "file_root: `string`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)",
                    "markdownDescription": "file_root: `string`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)",
                    "type": "string"
                },
                "mime_types": {
                    "description": "mime_types: `array`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)",
                    "markdownDescription": "mime_types: `array`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "http.handlers.vars": {
            "description": "vars: `object`  \nModule: `http.handlers.vars`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#VarsMiddleware)",
            "markdownDescription": "vars: `object`  \nModule: `http.handlers.vars`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#VarsMiddleware)",
            "type": "object",
            "additionalProperties": {}
        },
        "http.handlers.visitor_ip": {
            "description": "visitor_ip: `object`  \nModule: `http.handlers.visitor_ip`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-webhooks#Middleware)",
            "markdownDescription": "visitor_ip: `object`  \nModule: `http.handlers.visitor_ip`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-webhooks#Middleware)",
            "type": "object",
            "properties": {
                "output": {
                    "description": "output: `string`  \nModule: `http.handlers.visitor_ip`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-webhooks#Middleware)",
                    "markdownDescription": "output: `string`  \nModule: `http.handlers.visitor_ip`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-webhooks#Middleware)",
                    "type": "string"
                }
            }
        },
        "http.matchers.execnopmatch": {
            "description": "execnopmatch: `object`  \nModule: `http.matchers.execnopmatch`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#NopMatcher)",
            "markdownDescription": "execnopmatch: `object`  \nModule: `http.matchers.execnopmatch`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#NopMatcher)",
            "type": "object",
            "properties": {
                "label": {
                    "description": "label: `string`  \nModule: `http.matchers.execnopmatch`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#NopMatcher)",
                    "markdownDescription": "label: `string`  \nModule: `http.matchers.execnopmatch`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#NopMatcher)",
                    "type": "string"
                }
            }
        },
        "http.matchers.expression": {
            "description": "expression: `object`  \nModule: `http.matchers.expression`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchExpression)",
            "markdownDescription": "expression: `object`  \nModule: `http.matchers.expression`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchExpression)",
            "type": "object"
        },
        "http.matchers.file": {
            "description": "file: `object`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)",
            "markdownDescription": "file: `object`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)",
            "type": "object",
            "properties": {
                "root": {
                    "description": "root: `string`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)",
                    "markdownDescription": "root: `string`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)",
                    "type": "string"
                },
                "split_path": {
                    "description": "split_path: `array`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)",
                    "markdownDescription": "split_path: `array`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "try_files": {
                    "description": "try_files: `array`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)",
                    "markdownDescription": "try_files: `array`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "try_policy": {
                    "description": "try_policy: `string`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)",
                    "markdownDescription": "try_policy: `string`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)",
                    "type": "string"
                }
            }
        },
        "http.matchers.header": {
            "description": "header: `object`  \nModule: `http.matchers.header`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeader)",
            "markdownDescription": "header: `object`  \nModule: `http.matchers.header`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeader)",
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        },
        "http.matchers.header_regexp": {
            "description": "header_regexp: `object`  \nModule: `http.matchers.header_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeaderRE)",
            "markdownDescription": "header_regexp: `object`  \nModule: `http.matchers.header_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeaderRE)",
            "type": "object",
            "additionalProperties": {
                "properties": {
                    "name": {
                        "description": "name: `string`  \nModule: `http.matchers.header_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeaderRE)",
                        "markdownDescription": "name: `string`  \nModule: `http.matchers.header_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeaderRE)",
                        "type": "string"
                    },
                    "pattern": {
                        "description": "pattern: `string`  \nModule: `http.matchers.header_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeaderRE)",
                        "markdownDescription": "pattern: `string`  \nModule: `http.matchers.header_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeaderRE)",
                        "type": "string"
                    }
                }
            }
        },
        "http.matchers.host": {
            "description": "host: `array`  \nModule: `http.matchers.host`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHost)",
            "markdownDescription": "host: `array`  \nModule: `http.matchers.host`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHost)",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "http.matchers.method": {
            "description": "method: `array`  \nModule: `http.matchers.method`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchMethod)",
            "markdownDescription": "method: `array`  \nModule: `http.matchers.method`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchMethod)",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "http.matchers.not": {
            "description": "not: `object`  \nModule: `http.matchers.not`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchNot)",
            "markdownDescription": "not: `object`  \nModule: `http.matchers.not`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchNot)",
            "type": "object"
        },
        "http.matchers.path": {
            "description": "path: `array`  \nModule: `http.matchers.path`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPath)",
            "markdownDescription": "path: `array`  \nModule: `http.matchers.path`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPath)",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "http.matchers.path_regexp": {
            "description": "path_regexp: `object`  \nModule: `http.matchers.path_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPathRE)",
            "markdownDescription": "path_regexp: `object`  \nModule: `http.matchers.path_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPathRE)",
            "type": "object",
            "properties": {
                "name": {
                    "description": "name: `string`  \nModule: `http.matchers.path_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPathRE)",
                    "markdownDescription": "name: `string`  \nModule: `http.matchers.path_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPathRE)",
                    "type": "string"
                },
                "pattern": {
                    "description": "pattern: `string`  \nModule: `http.matchers.path_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPathRE)",
                    "markdownDescription": "pattern: `string`  \nModule: `http.matchers.path_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPathRE)",
                    "type": "string"
                }
            }
        },
        "http.matchers.protocol": {
            "description": "protocol: `string`  \nModule: `http.matchers.protocol`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchProtocol)",
            "markdownDescription": "protocol: `string`  \nModule: `http.matchers.protocol`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchProtocol)",
            "type": "string"
        },
        "http.matchers.query": {
            "description": "query: `object`  \nModule: `http.matchers.query`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchQuery)",
            "markdownDescription": "query: `object`  \nModule: `http.matchers.query`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchQuery)",
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        },
        "http.matchers.remote_ip": {
            "description": "remote_ip: `object`  \nModule: `http.matchers.remote_ip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchRemoteIP)",
            "markdownDescription": "remote_ip: `object`  \nModule: `http.matchers.remote_ip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchRemoteIP)",
            "type": "object",
            "properties": {
                "ranges": {
                    "description": "ranges: `array`  \nModule: `http.matchers.remote_ip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchRemoteIP)",
                    "markdownDescription": "ranges: `array`  \nModule: `http.matchers.remote_ip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchRemoteIP)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "http.matchers.vars": {
            "description": "vars: `object`  \nModule: `http.matchers.vars`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#VarsMatcher)",
            "markdownDescription": "vars: `object`  \nModule: `http.matchers.vars`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#VarsMatcher)",
            "type": "object",
            "additionalProperties": {}
        },
        "http.matchers.vars_regexp": {
            "description": "vars_regexp: `object`  \nModule: `http.matchers.vars_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchVarsRE)",
            "markdownDescription": "vars_regexp: `object`  \nModule: `http.matchers.vars_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchVarsRE)",
            "type": "object",
            "additionalProperties": {
                "properties": {
                    "name": {
                        "description": "name: `string`  \nModule: `http.matchers.vars_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchVarsRE)",
                        "markdownDescription": "name: `string`  \nModule: `http.matchers.vars_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchVarsRE)",
                        "type": "string"
                    },
                    "pattern": {
                        "description": "pattern: `string`  \nModule: `http.matchers.vars_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchVarsRE)",
                        "markdownDescription": "pattern: `string`  \nModule: `http.matchers.vars_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchVarsRE)",
                        "type": "string"
                    }
                }
            }
        },
        "http.reverse_proxy.selection_policies.first": {
            "description": "first: `object`  \nModule: `http.reverse_proxy.selection_policies.first`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#FirstSelection)",
            "markdownDescription": "first: `object`  \nModule: `http.reverse_proxy.selection_policies.first`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#FirstSelection)",
            "type": "object"
        },
        "http.reverse_proxy.selection_policies.header": {
            "description": "header: `object`  \nModule: `http.reverse_proxy.selection_policies.header`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HeaderHashSelection)",
            "markdownDescription": "header: `object`  \nModule: `http.reverse_proxy.selection_policies.header`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HeaderHashSelection)",
            "type": "object",
            "properties": {
                "field": {
                    "description": "field: `string`  \nModule: `http.reverse_proxy.selection_policies.header`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HeaderHashSelection)",
                    "markdownDescription": "field: `string`  \nModule: `http.reverse_proxy.selection_policies.header`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HeaderHashSelection)",
                    "type": "string"
                }
            }
        },
        "http.reverse_proxy.selection_policies.ip_hash": {
            "description": "ip_hash: `object`  \nModule: `http.reverse_proxy.selection_policies.ip_hash`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#IPHashSelection)",
            "markdownDescription": "ip_hash: `object`  \nModule: `http.reverse_proxy.selection_policies.ip_hash`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#IPHashSelection)",
            "type": "object"
        },
        "http.reverse_proxy.selection_policies.least_conn": {
            "description": "least_conn: `object`  \nModule: `http.reverse_proxy.selection_policies.least_conn`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#LeastConnSelection)",
            "markdownDescription": "least_conn: `object`  \nModule: `http.reverse_proxy.selection_policies.least_conn`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#LeastConnSelection)",
            "type": "object"
        },
        "http.reverse_proxy.selection_policies.random": {
            "description": "random: `object`  \nModule: `http.reverse_proxy.selection_policies.random`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RandomSelection)",
            "markdownDescription": "random: `object`  \nModule: `http.reverse_proxy.selection_policies.random`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RandomSelection)",
            "type": "object"
        },
        "http.reverse_proxy.selection_policies.random_choose": {
            "description": "random_choose: `object`  \nModule: `http.reverse_proxy.selection_policies.random_choose`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RandomChoiceSelection)",
            "markdownDescription": "random_choose: `object`  \nModule: `http.reverse_proxy.selection_policies.random_choose`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RandomChoiceSelection)",
            "type": "object",
            "properties": {
                "choose": {
                    "description": "choose: `number`  \nModule: `http.reverse_proxy.selection_policies.random_choose`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RandomChoiceSelection)",
                    "markdownDescription": "choose: `number`  \nModule: `http.reverse_proxy.selection_policies.random_choose`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RandomChoiceSelection)",
                    "type": "number"
                }
            }
        },
        "http.reverse_proxy.selection_policies.round_robin": {
            "description": "round_robin: `object`  \nModule: `http.reverse_proxy.selection_policies.round_robin`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RoundRobinSelection)",
            "markdownDescription": "round_robin: `object`  \nModule: `http.reverse_proxy.selection_policies.round_robin`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RoundRobinSelection)",
            "type": "object"
        },
        "http.reverse_proxy.selection_policies.uri_hash": {
            "description": "uri_hash: `object`  \nModule: `http.reverse_proxy.selection_policies.uri_hash`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#URIHashSelection)",
            "markdownDescription": "uri_hash: `object`  \nModule: `http.reverse_proxy.selection_policies.uri_hash`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#URIHashSelection)",
            "type": "object"
        },
        "http.reverse_proxy.transport.fastcgi": {
            "description": "fastcgi: `object`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
            "markdownDescription": "fastcgi: `object`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
            "type": "object",
            "properties": {
                "dial_timeout": {
                    "description": "dial_timeout: `number`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "markdownDescription": "dial_timeout: `number`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "type": "number"
                },
                "env": {
                    "description": "env: `object`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "markdownDescription": "env: `object`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "type": "object",
                    "additionalProperties": {}
                },
                "read_timeout": {
                    "description": "read_timeout: `number`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "markdownDescription": "read_timeout: `number`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "type": "number"
                },
                "root": {
                    "description": "root: `string`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "markdownDescription": "root: `string`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "type": "string"
                },
                "split_path": {
                    "description": "split_path: `array`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "markdownDescription": "split_path: `array`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "write_timeout": {
                    "description": "write_timeout: `number`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "markdownDescription": "write_timeout: `number`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "type": "number"
                }
            }
        },
        "http.reverse_proxy.transport.http": {
            "description": "http: `object`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
            "markdownDescription": "http: `object`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
            "type": "object",
            "properties": {
                "compression": {
                    "description": "compression: `boolean`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "compression: `boolean`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "boolean"
                },
                "dial_fallback_delay": {
                    "description": "dial_fallback_delay: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "dial_fallback_delay: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                },
                "dial_timeout": {
                    "description": "dial_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "dial_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                },
                "expect_continue_timeout": {
                    "description": "expect_continue_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "expect_continue_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                },
                "keep_alive": {
                    "description": "keep_alive: `object`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "keep_alive: `object`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "description": "enabled: `boolean`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "enabled: `boolean`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "boolean"
                        },
                        "idle_timeout": {
                            "description": "idle_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "idle_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "number"
                        },
                        "max_idle_conns": {
                            "description": "max_idle_conns: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "max_idle_conns: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "number"
                        },
                        "max_idle_conns_per_host": {
                            "description": "max_idle_conns_per_host: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "max_idle_conns_per_host: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "number"
                        },
                        "probe_interval": {
                            "description": "probe_interval: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "probe_interval: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "number"
                        }
                    }
                },
                "max_conns_per_host": {
                    "description": "max_conns_per_host: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "max_conns_per_host: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                },
                "max_response_header_size": {
                    "description": "max_response_header_size: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "max_response_header_size: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                },
                "read_buffer_size": {
                    "description": "read_buffer_size: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "read_buffer_size: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                },
                "response_header_timeout": {
                    "description": "response_header_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "response_header_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                },
                "tls": {
                    "description": "tls: `object`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "tls: `object`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "object",
                    "properties": {
                        "client_certificate_file": {
                            "description": "client_certificate_file: `string`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "client_certificate_file: `string`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "string"
                        },
                        "client_certificate_key_file": {
                            "description": "client_certificate_key_file: `string`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "client_certificate_key_file: `string`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "string"
                        },
                        "handshake_timeout": {
                            "description": "handshake_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "handshake_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "number"
                        },
                        "insecure_skip_verify": {
                            "description": "insecure_skip_verify: `boolean`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "insecure_skip_verify: `boolean`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "boolean"
                        },
                        "root_ca_pem_files": {
                            "description": "root_ca_pem_files: `array`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "root_ca_pem_files: `array`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "root_ca_pool": {
                            "description": "root_ca_pool: `array`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "root_ca_pool: `array`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "server_name": {
                            "description": "server_name: `string`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "server_name: `string`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "string"
                        }
                    }
                },
                "versions": {
                    "description": "versions: `array`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "versions: `array`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "write_buffer_size": {
                    "description": "write_buffer_size: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "write_buffer_size: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                }
            }
        },
        "pki": {
            "description": "pki: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
            "markdownDescription": "pki: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
            "type": "object",
            "properties": {
                "certificate_authorities": {
                    "description": "certificate_authorities: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                    "markdownDescription": "certificate_authorities: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                    "type": "object",
                    "additionalProperties": {
                        "properties": {
                            "install_trust": {
                                "description": "install_trust: `boolean`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                "markdownDescription": "install_trust: `boolean`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                "type": "boolean"
                            },
                            "intermediate": {
                                "description": "intermediate: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                "markdownDescription": "intermediate: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                "type": "object",
                                "properties": {
                                    "certificate": {
                                        "description": "certificate: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                        "markdownDescription": "certificate: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                        "type": "string"
                                    },
                                    "format": {
                                        "description": "format: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                        "markdownDescription": "format: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                        "type": "string"
                                    },
                                    "private_key": {
                                        "description": "private_key: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                        "markdownDescription": "private_key: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                        "type": "string"
                                    }
                                }
                            },
                            "intermediate_common_name": {
                                "description": "intermediate_common_name: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                "markdownDescription": "intermediate_common_name: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                "type": "string"
                            },
                            "name": {
                                "description": "name: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                "markdownDescription": "name: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                "type": "string"
                            },
                            "root": {
                                "description": "root: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                "markdownDescription": "root: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                "type": "object",
                                "properties": {
                                    "certificate": {
                                        "description": "certificate: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                        "markdownDescription": "certificate: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                        "type": "string"
                                    },
                                    "format": {
                                        "description": "format: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                        "markdownDescription": "format: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                        "type": "string"
                                    },
                                    "private_key": {
                                        "description": "private_key: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                        "markdownDescription": "private_key: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                        "type": "string"
                                    }
                                }
                            },
                            "root_common_name": {
                                "description": "root_common_name: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                "markdownDescription": "root_common_name: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)",
                                "type": "string"
                            },
                            "storage": {
                                "description": "storage: ``  \nModule: `caddy.storage`  \n",
                                "markdownDescription": "storage: ``  \nModule: `caddy.storage`  \n",
                                "required": [
                                    "module"
                                ],
                                "allOf": [
                                    {
                                        "if": {
                                            "properties": {
                                                "module": {
                                                    "const": "file_system"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.storage.file_system"
                                        }
                                    },
                                    {
                                        "properties": {
                                            "module": {
                                                "description": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                                                "markdownDescription": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                                                "type": "string",
                                                "enum": [
                                                    "file_system"
                                                ]
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "tls": {
            "description": "tls: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
            "markdownDescription": "tls: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
            "type": "object",
            "properties": {
                "automation": {
                    "description": "automation: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                    "markdownDescription": "automation: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                    "type": "object",
                    "properties": {
                        "ocsp_interval": {
                            "description": "ocsp_interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "markdownDescription": "ocsp_interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "type": "number"
                        },
                        "on_demand": {
                            "description": "on_demand: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "markdownDescription": "on_demand: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "type": "object",
                            "properties": {
                                "ask": {
                                    "description": "ask: `string`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                    "markdownDescription": "ask: `string`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                    "type": "string"
                                },
                                "rate_limit": {
                                    "description": "rate_limit: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                    "markdownDescription": "rate_limit: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                    "type": "object",
                                    "properties": {
                                        "burst": {
                                            "description": "burst: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                            "markdownDescription": "burst: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                            "type": "number"
                                        },
                                        "interval": {
                                            "description": "interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                            "markdownDescription": "interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                            "type": "number"
                                        }
                                    }
                                }
                            }
                        },
                        "policies": {
                            "description": "policies: `array`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "markdownDescription": "policies: `array`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "issuer": {
                                        "description": "issuer: ``  \nModule: `tls.issuance`  \n",
                                        "markdownDescription": "issuer: ``  \nModule: `tls.issuance`  \n",
                                        "required": [
                                            "module"
                                        ],
                                        "allOf": [
                                            {
                                                "if": {
                                                    "properties": {
                                                        "module": {
                                                            "const": "acme"
                                                        }
                                                    }
                                                },
                                                "then": {
                                                    "$ref": "#/definitions/tls.issuance.acme"
                                                }
                                            },
                                            {
                                                "if": {
                                                    "properties": {
                                                        "module": {
                                                            "const": "internal"
                                                        }
                                                    }
                                                },
                                                "then": {
                                                    "$ref": "#/definitions/tls.issuance.internal"
                                                }
                                            },
                                            {
                                                "properties": {
                                                    "module": {
                                                        "description": "`issuer` key to identify specified module.  \nmodule: `string`  \nModule: `tls.issuance`",
                                                        "markdownDescription": "`issuer` key to identify specified module.  \nmodule: `string`  \nModule: `tls.issuance`",
                                                        "type": "string",
                                                        "enum": [
                                                            "acme",
                                                            "internal"
                                                        ]
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "key_type": {
                                        "description": "key_type: `string`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                        "markdownDescription": "key_type: `string`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                        "type": "string"
                                    },
                                    "must_staple": {
                                        "description": "must_staple: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                        "markdownDescription": "must_staple: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                        "type": "boolean"
                                    },
                                    "on_demand": {
                                        "description": "on_demand: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                        "markdownDescription": "on_demand: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                        "type": "boolean"
                                    },
                                    "renewal_window_ratio": {
                                        "description": "renewal_window_ratio: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                        "markdownDescription": "renewal_window_ratio: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                        "type": "object"
                                    },
                                    "storage": {
                                        "description": "storage: ``  \nModule: `caddy.storage`  \n",
                                        "markdownDescription": "storage: ``  \nModule: `caddy.storage`  \n",
                                        "required": [
                                            "module"
                                        ],
                                        "allOf": [
                                            {
                                                "if": {
                                                    "properties": {
                                                        "module": {
                                                            "const": "file_system"
                                                        }
                                                    }
                                                },
                                                "then": {
                                                    "$ref": "#/definitions/caddy.storage.file_system"
                                                }
                                            },
                                            {
                                                "properties": {
                                                    "module": {
                                                        "description": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                                                        "markdownDescription": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                                                        "type": "string",
                                                        "enum": [
                                                            "file_system"
                                                        ]
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "subjects": {
                                        "description": "subjects: `array`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                        "markdownDescription": "subjects: `array`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "renew_interval": {
                            "description": "renew_interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "markdownDescription": "renew_interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "type": "number"
                        }
                    }
                },
                "certificates": {
                    "description": "certificates: ``  \nModule: `tls.certificates`  \n",
                    "markdownDescription": "certificates: ``  \nModule: `tls.certificates`  \n",
                    "properties": {
                        "automate": {
                            "$ref": "#/definitions/tls.certificates.automate"
                        },
                        "load_files": {
                            "$ref": "#/definitions/tls.certificates.load_files"
                        },
                        "load_folders": {
                            "$ref": "#/definitions/tls.certificates.load_folders"
                        },
                        "load_pem": {
                            "$ref": "#/definitions/tls.certificates.load_pem"
                        }
                    }
                },
                "session_tickets": {
                    "description": "session_tickets: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                    "markdownDescription": "session_tickets: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                    "type": "object",
                    "properties": {
                        "disable_rotation": {
                            "description": "disable_rotation: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "markdownDescription": "disable_rotation: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "type": "boolean"
                        },
                        "disabled": {
                            "description": "disabled: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "markdownDescription": "disabled: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "type": "boolean"
                        },
                        "key_source": {
                            "description": "key_source: ``  \nModule: `tls.stek`  \n",
                            "markdownDescription": "key_source: ``  \nModule: `tls.stek`  \n",
                            "required": [
                                "provider"
                            ],
                            "allOf": [
                                {
                                    "if": {
                                        "properties": {
                                            "provider": {
                                                "const": "distributed"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/tls.stek.distributed"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "provider": {
                                                "const": "standard"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/tls.stek.standard"
                                    }
                                },
                                {
                                    "properties": {
                                        "provider": {
                                            "description": "`key_source` key to identify specified module.  \nprovider: `string`  \nModule: `tls.stek`",
                                            "markdownDescription": "`key_source` key to identify specified module.  \nprovider: `string`  \nModule: `tls.stek`",
                                            "type": "string",
                                            "enum": [
                                                "distributed",
                                                "standard"
                                            ]
                                        }
                                    }
                                }
                            ]
                        },
                        "max_keys": {
                            "description": "max_keys: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "markdownDescription": "max_keys: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "type": "number"
                        },
                        "rotation_interval": {
                            "description": "rotation_interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "markdownDescription": "rotation_interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)",
                            "type": "number"
                        }
                    }
                }
            }
        },
        "tls.certificates.automate": {
            "description": "automate: `array`  \nModule: `tls.certificates.automate`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#AutomateLoader)",
            "markdownDescription": "automate: `array`  \nModule: `tls.certificates.automate`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#AutomateLoader)",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "tls.certificates.load_files": {
            "description": "load_files: `array`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)",
            "markdownDescription": "load_files: `array`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "certificate": {
                        "description": "certificate: `string`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)",
                        "markdownDescription": "certificate: `string`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)",
                        "type": "string"
                    },
                    "format": {
                        "description": "format: `string`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)",
                        "markdownDescription": "format: `string`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)",
                        "type": "string"
                    },
                    "key": {
                        "description": "key: `string`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)",
                        "markdownDescription": "key: `string`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)",
                        "type": "string"
                    },
                    "tags": {
                        "description": "tags: `array`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)",
                        "markdownDescription": "tags: `array`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "tls.certificates.load_folders": {
            "description": "load_folders: `array`  \nModule: `tls.certificates.load_folders`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FolderLoader)",
            "markdownDescription": "load_folders: `array`  \nModule: `tls.certificates.load_folders`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FolderLoader)",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "tls.certificates.load_pem": {
            "description": "load_pem: `array`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)",
            "markdownDescription": "load_pem: `array`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "certificate": {
                        "description": "certificate: `string`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)",
                        "markdownDescription": "certificate: `string`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)",
                        "type": "string"
                    },
                    "key": {
                        "description": "key: `string`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)",
                        "markdownDescription": "key: `string`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)",
                        "type": "string"
                    },
                    "tags": {
                        "description": "tags: `array`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)",
                        "markdownDescription": "tags: `array`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "tls.handshake_match.sni": {
            "description": "sni: `array`  \nModule: `tls.handshake_match.sni`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#MatchServerName)",
            "markdownDescription": "sni: `array`  \nModule: `tls.handshake_match.sni`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#MatchServerName)",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "tls.issuance.acme": {
            "description": "acme: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
            "markdownDescription": "acme: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
            "type": "object",
            "properties": {
                "acme_timeout": {
                    "description": "acme_timeout: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                    "markdownDescription": "acme_timeout: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                    "type": "number"
                },
                "ca": {
                    "description": "ca: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                    "markdownDescription": "ca: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                    "type": "string"
                },
                "challenges": {
                    "description": "challenges: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                    "markdownDescription": "challenges: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                    "type": "object",
                    "properties": {
                        "bind_host": {
                            "description": "bind_host: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                            "markdownDescription": "bind_host: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                            "type": "string"
                        },
                        "dns": {
                            "description": "dns: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                            "markdownDescription": "dns: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                            "type": "object",
                            "properties": {
                                "provider": {
                                    "description": "provider: `object`  \nModule: `dns.providers`  \n",
                                    "markdownDescription": "provider: `object`  \nModule: `dns.providers`  \n",
                                    "type": "object"
                                },
                                "ttl": {
                                    "description": "ttl: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                                    "markdownDescription": "ttl: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                                    "type": "number"
                                }
                            }
                        },
                        "http": {
                            "description": "http: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                            "markdownDescription": "http: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                            "type": "object",
                            "properties": {
                                "alternate_port": {
                                    "description": "alternate_port: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                                    "markdownDescription": "alternate_port: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                                    "type": "number"
                                },
                                "disabled": {
                                    "description": "disabled: `boolean`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                                    "markdownDescription": "disabled: `boolean`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                                    "type": "boolean"
                                }
                            }
                        },
                        "tls-alpn": {
                            "description": "tls-alpn: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                            "markdownDescription": "tls-alpn: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                            "type": "object",
                            "properties": {
                                "alternate_port": {
                                    "description": "alternate_port: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                                    "markdownDescription": "alternate_port: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                                    "type": "number"
                                },
                                "disabled": {
                                    "description": "disabled: `boolean`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                                    "markdownDescription": "disabled: `boolean`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "email": {
                    "description": "email: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                    "markdownDescription": "email: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                    "type": "string"
                },
                "external_account": {
                    "description": "external_account: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                    "markdownDescription": "external_account: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                    "type": "object",
                    "properties": {
                        "hmac": {
                            "description": "hmac: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                            "markdownDescription": "hmac: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                            "type": "string"
                        },
                        "key_id": {
                            "description": "key_id: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                            "markdownDescription": "key_id: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                            "type": "string"
                        }
                    }
                },
                "test_ca": {
                    "description": "test_ca: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                    "markdownDescription": "test_ca: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                    "type": "string"
                },
                "trusted_roots_pem_files": {
                    "description": "trusted_roots_pem_files: `array`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                    "markdownDescription": "trusted_roots_pem_files: `array`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "tls.issuance.internal": {
            "description": "internal: `object`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)",
            "markdownDescription": "internal: `object`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)",
            "type": "object",
            "properties": {
                "ca": {
                    "description": "ca: `string`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)",
                    "markdownDescription": "ca: `string`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)",
                    "type": "string"
                },
                "lifetime": {
                    "description": "lifetime: `number`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)",
                    "markdownDescription": "lifetime: `number`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)",
                    "type": "number"
                },
                "sign_with_root": {
                    "description": "sign_with_root: `boolean`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)",
                    "markdownDescription": "sign_with_root: `boolean`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)",
                    "type": "boolean"
                }
            }
        },
        "tls.stek.distributed": {
            "description": "distributed: `object`  \nModule: `tls.stek.distributed`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls/distributedstek#Provider)",
            "markdownDescription": "distributed: `object`  \nModule: `tls.stek.distributed`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls/distributedstek#Provider)",
            "type": "object",
            "properties": {
                "storage": {
                    "description": "storage: ``  \nModule: `caddy.storage`  \n",
                    "markdownDescription": "storage: ``  \nModule: `caddy.storage`  \n",
                    "required": [
                        "module"
                    ],
                    "allOf": [
                        {
                            "if": {
                                "properties": {
                                    "module": {
                                        "const": "file_system"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.storage.file_system"
                            }
                        },
                        {
                            "properties": {
                                "module": {
                                    "description": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                                    "markdownDescription": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                                    "type": "string",
                                    "enum": [
                                        "file_system"
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },
        "tls.stek.standard": {
            "description": "standard: `object`  \nModule: `tls.stek.standard`  \n",
            "markdownDescription": "standard: `object`  \nModule: `tls.stek.standard`  \n",
            "type": "object"
        }
    },
    "properties": {
        "admin": {
            "description": "admin: `object`  \n",
            "markdownDescription": "admin: `object`  \n",
            "type": "object",
            "properties": {
                "config": {
                    "description": "config: `object`  \n",
                    "markdownDescription": "config: `object`  \n",
                    "type": "object",
                    "properties": {
                        "persist": {
                            "description": "persist: `boolean`  \n",
                            "markdownDescription": "persist: `boolean`  \n",
                            "type": "boolean"
                        }
                    }
                },
                "disabled": {
                    "description": "disabled: `boolean`  \n",
                    "markdownDescription": "disabled: `boolean`  \n",
                    "type": "boolean"
                },
                "enforce_origin": {
                    "description": "enforce_origin: `boolean`  \n",
                    "markdownDescription": "enforce_origin: `boolean`  \n",
                    "type": "boolean"
                },
                "listen": {
                    "description": "listen: `string`  \n",
                    "markdownDescription": "listen: `string`  \n",
                    "type": "string"
                },
                "origins": {
                    "description": "origins: `array`  \n",
                    "markdownDescription": "origins: `array`  \n",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "apps": {
            "description": "apps: ``  \n",
            "markdownDescription": "apps: ``  \n",
            "properties": {
                "exec": {
                    "$ref": "#/definitions/exec"
                },
                "http": {
                    "$ref": "#/definitions/http"
                },
                "pki": {
                    "$ref": "#/definitions/pki"
                },
                "tls": {
                    "$ref": "#/definitions/tls"
                }
            }
        },
        "logging": {
            "description": "logging: `object`  \n",
            "markdownDescription": "logging: `object`  \n",
            "type": "object",
            "properties": {
                "logs": {
                    "description": "logs: `object`  \n",
                    "markdownDescription": "logs: `object`  \n",
                    "type": "object",
                    "additionalProperties": {
                        "properties": {
                            "encoder": {
                                "description": "encoder: ``  \nModule: `caddy.logging.encoders`  \n",
                                "markdownDescription": "encoder: ``  \nModule: `caddy.logging.encoders`  \n",
                                "required": [
                                    "format"
                                ],
                                "allOf": [
                                    {
                                        "if": {
                                            "properties": {
                                                "format": {
                                                    "const": "filter"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.encoders.filter"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "format": {
                                                    "const": "json"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.encoders.json"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "format": {
                                                    "const": "logfmt"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.encoders.logfmt"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "format": {
                                                    "const": "single_field"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.encoders.single_field"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "format": {
                                                    "const": "console"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.encoders.console"
                                        }
                                    },
                                    {
                                        "properties": {
                                            "format": {
                                                "description": "`encoder` key to identify specified module.  \nformat: `string`  \nModule: `caddy.logging.encoders`",
                                                "markdownDescription": "`encoder` key to identify specified module.  \nformat: `string`  \nModule: `caddy.logging.encoders`",
                                                "type": "string",
                                                "enum": [
                                                    "filter",
                                                    "json",
                                                    "logfmt",
                                                    "single_field",
                                                    "console"
                                                ]
                                            }
                                        }
                                    }
                                ]
                            },
                            "exclude": {
                                "description": "exclude: `array`  \n",
                                "markdownDescription": "exclude: `array`  \n",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "include": {
                                "description": "include: `array`  \n",
                                "markdownDescription": "include: `array`  \n",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "level": {
                                "description": "level: `string`  \n",
                                "markdownDescription": "level: `string`  \n",
                                "type": "string"
                            },
                            "sampling": {
                                "description": "sampling: `object`  \n",
                                "markdownDescription": "sampling: `object`  \n",
                                "type": "object",
                                "properties": {
                                    "first": {
                                        "description": "first: `number`  \n",
                                        "markdownDescription": "first: `number`  \n",
                                        "type": "number"
                                    },
                                    "interval": {
                                        "description": "interval: `number`  \n",
                                        "markdownDescription": "interval: `number`  \n",
                                        "type": "number"
                                    },
                                    "thereafter": {
                                        "description": "thereafter: `number`  \n",
                                        "markdownDescription": "thereafter: `number`  \n",
                                        "type": "number"
                                    }
                                }
                            },
                            "writer": {
                                "description": "writer: ``  \nModule: `caddy.logging.writers`  \n",
                                "markdownDescription": "writer: ``  \nModule: `caddy.logging.writers`  \n",
                                "required": [
                                    "output"
                                ],
                                "allOf": [
                                    {
                                        "if": {
                                            "properties": {
                                                "output": {
                                                    "const": "discard"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.writers.discard"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "output": {
                                                    "const": "file"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.writers.file"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "output": {
                                                    "const": "net"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.writers.net"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "output": {
                                                    "const": "stderr"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.writers.stderr"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "output": {
                                                    "const": "stdout"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.writers.stdout"
                                        }
                                    },
                                    {
                                        "properties": {
                                            "output": {
                                                "description": "`writer` key to identify specified module.  \noutput: `string`  \nModule: `caddy.logging.writers`",
                                                "markdownDescription": "`writer` key to identify specified module.  \noutput: `string`  \nModule: `caddy.logging.writers`",
                                                "type": "string",
                                                "enum": [
                                                    "discard",
                                                    "file",
                                                    "net",
                                                    "stderr",
                                                    "stdout"
                                                ]
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                },
                "sink": {
                    "description": "sink: `object`  \n",
                    "markdownDescription": "sink: `object`  \n",
                    "type": "object",
                    "properties": {
                        "writer": {
                            "description": "writer: ``  \nModule: `caddy.logging.writers`  \n",
                            "markdownDescription": "writer: ``  \nModule: `caddy.logging.writers`  \n",
                            "required": [
                                "output"
                            ],
                            "allOf": [
                                {
                                    "if": {
                                        "properties": {
                                            "output": {
                                                "const": "stdout"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/caddy.logging.writers.stdout"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "output": {
                                                "const": "discard"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/caddy.logging.writers.discard"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "output": {
                                                "const": "file"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/caddy.logging.writers.file"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "output": {
                                                "const": "net"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/caddy.logging.writers.net"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "output": {
                                                "const": "stderr"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/caddy.logging.writers.stderr"
                                    }
                                },
                                {
                                    "properties": {
                                        "output": {
                                            "description": "`writer` key to identify specified module.  \noutput: `string`  \nModule: `caddy.logging.writers`",
                                            "markdownDescription": "`writer` key to identify specified module.  \noutput: `string`  \nModule: `caddy.logging.writers`",
                                            "type": "string",
                                            "enum": [
                                                "stdout",
                                                "discard",
                                                "file",
                                                "net",
                                                "stderr"
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "storage": {
            "description": "storage: ``  \nModule: `caddy.storage`  \n",
            "markdownDescription": "storage: ``  \nModule: `caddy.storage`  \n",
            "required": [
                "module"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "module": {
                                "const": "file_system"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/caddy.storage.file_system"
                    }
                },
                {
                    "properties": {
                        "module": {
                            "description": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                            "markdownDescription": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                            "type": "string",
                            "enum": [
                                "file_system"
                            ]
                        }
                    }
                }
            ]
        }
    },
    "additionalItems": true
}