{
    "title": "Caddy v2 autogenerated JSON schema  \nhttps://github.com/abiosoft/caddy-json-schema",
    "description": ": `object`  \n\nConfig is the top (or beginning) of the Caddy configuration structure.\nCaddy config is expressed natively as a JSON document. If you prefer\nnot to work with JSON directly, there are [many config adapters](/docs/config-adapters)\navailable that can convert various inputs into Caddy JSON.\n\nMany parts of this config are extensible through the use of Caddy modules.\nFields which have a json.RawMessage type and which appear as dots (•••) in\nthe online docs can be fulfilled by modules in a certain module\nnamespace. The docs show which modules can be used in a given place.\n\nWhenever a module is used, its name must be given either inline as part of\nthe module, or as the key to the module's value. The docs will make it clear\nwhich to use.\n\nGenerally, all config settings are optional, as it is Caddy convention to\nhave good, documented default values. If a parameter is required, the docs\nshould say so.\n\nGo programs which are directly building a Config struct value should take\ncare to populate the JSON-encodable fields of the struct (i.e. the fields\nwith `json` struct tags) if employing the module lifecycle (e.g. Provision\nmethod calls).\n",
    "markdownDescription": ": `object`  \n  \nConfig is the top (or beginning) of the Caddy configuration structure.\nCaddy config is expressed natively as a JSON document. If you prefer\nnot to work with JSON directly, there are [many config adapters](/docs/config-adapters)\navailable that can convert various inputs into Caddy JSON.\n\nMany parts of this config are extensible through the use of Caddy modules.\nFields which have a json.RawMessage type and which appear as dots (•••) in\nthe online docs can be fulfilled by modules in a certain module\nnamespace. The docs show which modules can be used in a given place.\n\nWhenever a module is used, its name must be given either inline as part of\nthe module, or as the key to the module's value. The docs will make it clear\nwhich to use.\n\nGenerally, all config settings are optional, as it is Caddy convention to\nhave good, documented default values. If a parameter is required, the docs\nshould say so.\n\nGo programs which are directly building a Config struct value should take\ncare to populate the JSON-encodable fields of the struct (i.e. the fields\nwith `json` struct tags) if employing the module lifecycle (e.g. Provision\nmethod calls).\n",
    "type": "object",
    "definitions": {
        "admin.api.load": {
            "description": "load: `object`  \nModule: `admin.api.load`  \n",
            "markdownDescription": "load: `object`  \nModule: `admin.api.load`  \n",
            "type": "object"
        },
        "caddy.adapters.caddyfile": {
            "description": "caddyfile: `object`  \nModule: `caddy.adapters.caddyfile`  \n",
            "markdownDescription": "caddyfile: `object`  \nModule: `caddy.adapters.caddyfile`  \n",
            "type": "object"
        },
        "caddy.listeners.tls": {
            "description": "tls: `object`  \nModule: `caddy.listeners.tls`  \n\ntlsPlaceholderWrapper is a no-op listener wrapper that marks\nwhere the TLS listener should be in a chain of listener wrappers.\nIt should only be used if another listener wrapper must be placed\nin front of the TLS handshake.\n",
            "markdownDescription": "tls: `object`  \nModule: `caddy.listeners.tls`  \n  \ntlsPlaceholderWrapper is a no-op listener wrapper that marks\nwhere the TLS listener should be in a chain of listener wrappers.\nIt should only be used if another listener wrapper must be placed\nin front of the TLS handshake.\n",
            "type": "object"
        },
        "caddy.logging.encoders.console": {
            "description": "console: `object`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)\nConsoleEncoder encodes log entries that are mostly human-readable.\n",
            "markdownDescription": "console: `object`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)  \nConsoleEncoder encodes log entries that are mostly human-readable.\n",
            "type": "object",
            "properties": {
                "caller_key": {
                    "description": "caller_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)\n",
                    "markdownDescription": "caller_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)  \n",
                    "type": "string"
                },
                "duration_format": {
                    "description": "duration_format: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)\n",
                    "markdownDescription": "duration_format: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)  \n",
                    "type": "string"
                },
                "level_format": {
                    "description": "level_format: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)\n",
                    "markdownDescription": "level_format: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)  \n",
                    "type": "string"
                },
                "level_key": {
                    "description": "level_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)\n",
                    "markdownDescription": "level_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)  \n",
                    "type": "string"
                },
                "line_ending": {
                    "description": "line_ending: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)\n",
                    "markdownDescription": "line_ending: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)  \n",
                    "type": "string"
                },
                "message_key": {
                    "description": "message_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)\n",
                    "markdownDescription": "message_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)  \n",
                    "type": "string"
                },
                "name_key": {
                    "description": "name_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)\n",
                    "markdownDescription": "name_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)  \n",
                    "type": "string"
                },
                "stacktrace_key": {
                    "description": "stacktrace_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)\n",
                    "markdownDescription": "stacktrace_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)  \n",
                    "type": "string"
                },
                "time_format": {
                    "description": "time_format: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)\n",
                    "markdownDescription": "time_format: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)  \n",
                    "type": "string"
                },
                "time_key": {
                    "description": "time_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)\n",
                    "markdownDescription": "time_key: `string`  \nModule: `caddy.logging.encoders.console`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#ConsoleEncoder)  \n",
                    "type": "string"
                }
            }
        },
        "caddy.logging.encoders.filter": {
            "description": "filter: `object`  \nModule: `caddy.logging.encoders.filter`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FilterEncoder)\nFilterEncoder can filter (manipulate) fields on\nlog entries before they are actually encoded by\nan underlying encoder.\n",
            "markdownDescription": "filter: `object`  \nModule: `caddy.logging.encoders.filter`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FilterEncoder)  \nFilterEncoder can filter (manipulate) fields on\nlog entries before they are actually encoded by\nan underlying encoder.\n",
            "type": "object",
            "properties": {
                "fields": {
                    "description": "fields: `array`  \nModule: `caddy.logging.encoders.filter`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FilterEncoder)\nA map of field names to their filters. Note that this\nis not a module map; the keys are field names.\n\nNested fields can be referenced by representing a\nlayer of nesting with `>`. In other words, for an\nobject like `{\"a\":{\"b\":0}}`, the inner field can\nbe referenced as `a>b`.\n\nThe following fields are fundamental to the log and\ncannot be filtered because they are added by the\nunderlying logging library as special cases: ts,\nlevel, logger, and msg.",
                    "markdownDescription": "fields: `array`  \nModule: `caddy.logging.encoders.filter`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FilterEncoder)  \nA map of field names to their filters. Note that this\nis not a module map; the keys are field names.\n\nNested fields can be referenced by representing a\nlayer of nesting with `>`. In other words, for an\nobject like `{\"a\":{\"b\":0}}`, the inner field can\nbe referenced as `a>b`.\n\nThe following fields are fundamental to the log and\ncannot be filtered because they are added by the\nunderlying logging library as special cases: ts,\nlevel, logger, and msg.",
                    "type": "array",
                    "items": {
                        "required": [
                            "filter"
                        ],
                        "allOf": [
                            {
                                "if": {
                                    "properties": {
                                        "filter": {
                                            "const": "delete"
                                        }
                                    }
                                },
                                "then": {
                                    "$ref": "#/definitions/caddy.logging.encoders.filter.delete"
                                }
                            },
                            {
                                "if": {
                                    "properties": {
                                        "filter": {
                                            "const": "ip_mask"
                                        }
                                    }
                                },
                                "then": {
                                    "$ref": "#/definitions/caddy.logging.encoders.filter.ip_mask"
                                }
                            },
                            {
                                "properties": {
                                    "filter": {
                                        "description": "`fields` key to identify specified module.  \nfilter: `string`  \nModule: `caddy.logging.encoders.filter`",
                                        "markdownDescription": "`fields` key to identify specified module.  \nfilter: `string`  \nModule: `caddy.logging.encoders.filter`",
                                        "type": "string",
                                        "enum": [
                                            "delete",
                                            "ip_mask"
                                        ]
                                    }
                                }
                            }
                        ]
                    }
                },
                "wrap": {
                    "description": "wrap: `object`  \nModule: `caddy.logging.encoders`  \n\nThe underlying encoder that actually\nencodes the log entries. Required.",
                    "markdownDescription": "wrap: `object`  \nModule: `caddy.logging.encoders`  \n  \nThe underlying encoder that actually\nencodes the log entries. Required.",
                    "required": [
                        "format"
                    ],
                    "allOf": [
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "json"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.json"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "logfmt"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.logfmt"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "single_field"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.single_field"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "console"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.console"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "filter"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.filter"
                            }
                        },
                        {
                            "properties": {
                                "format": {
                                    "description": "`wrap` key to identify specified module.  \nformat: `string`  \nModule: `caddy.logging.encoders`",
                                    "markdownDescription": "`wrap` key to identify specified module.  \nformat: `string`  \nModule: `caddy.logging.encoders`",
                                    "type": "string",
                                    "enum": [
                                        "json",
                                        "logfmt",
                                        "single_field",
                                        "console",
                                        "filter"
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },
        "caddy.logging.encoders.filter.delete": {
            "description": "delete: `object`  \nModule: `caddy.logging.encoders.filter.delete`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#DeleteFilter)",
            "markdownDescription": "delete: `object`  \nModule: `caddy.logging.encoders.filter.delete`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#DeleteFilter)",
            "type": "object"
        },
        "caddy.logging.encoders.filter.ip_mask": {
            "description": "ip_mask: `object`  \nModule: `caddy.logging.encoders.filter.ip_mask`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#IPMaskFilter)",
            "markdownDescription": "ip_mask: `object`  \nModule: `caddy.logging.encoders.filter.ip_mask`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#IPMaskFilter)",
            "type": "object",
            "properties": {
                "ipv4_cidr": {
                    "description": "ipv4_cidr: `number`  \nModule: `caddy.logging.encoders.filter.ip_mask`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#IPMaskFilter)",
                    "markdownDescription": "ipv4_cidr: `number`  \nModule: `caddy.logging.encoders.filter.ip_mask`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#IPMaskFilter)",
                    "type": "number"
                },
                "ipv6_cidr": {
                    "description": "ipv6_cidr: `number`  \nModule: `caddy.logging.encoders.filter.ip_mask`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#IPMaskFilter)",
                    "markdownDescription": "ipv6_cidr: `number`  \nModule: `caddy.logging.encoders.filter.ip_mask`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#IPMaskFilter)",
                    "type": "number"
                }
            }
        },
        "caddy.logging.encoders.json": {
            "description": "json: `object`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)\nJSONEncoder encodes entries as JSON.\n",
            "markdownDescription": "json: `object`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)  \nJSONEncoder encodes entries as JSON.\n",
            "type": "object",
            "properties": {
                "caller_key": {
                    "description": "caller_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)\n",
                    "markdownDescription": "caller_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)  \n",
                    "type": "string"
                },
                "duration_format": {
                    "description": "duration_format: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)\n",
                    "markdownDescription": "duration_format: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)  \n",
                    "type": "string"
                },
                "level_format": {
                    "description": "level_format: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)\n",
                    "markdownDescription": "level_format: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)  \n",
                    "type": "string"
                },
                "level_key": {
                    "description": "level_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)\n",
                    "markdownDescription": "level_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)  \n",
                    "type": "string"
                },
                "line_ending": {
                    "description": "line_ending: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)\n",
                    "markdownDescription": "line_ending: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)  \n",
                    "type": "string"
                },
                "message_key": {
                    "description": "message_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)\n",
                    "markdownDescription": "message_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)  \n",
                    "type": "string"
                },
                "name_key": {
                    "description": "name_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)\n",
                    "markdownDescription": "name_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)  \n",
                    "type": "string"
                },
                "stacktrace_key": {
                    "description": "stacktrace_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)\n",
                    "markdownDescription": "stacktrace_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)  \n",
                    "type": "string"
                },
                "time_format": {
                    "description": "time_format: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)\n",
                    "markdownDescription": "time_format: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)  \n",
                    "type": "string"
                },
                "time_key": {
                    "description": "time_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)\n",
                    "markdownDescription": "time_key: `string`  \nModule: `caddy.logging.encoders.json`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#JSONEncoder)  \n",
                    "type": "string"
                }
            }
        },
        "caddy.logging.encoders.logfmt": {
            "description": "logfmt: `object`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)\nLogfmtEncoder encodes log entries as logfmt:\nhttps://www.brandur.org/logfmt\n",
            "markdownDescription": "logfmt: `object`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)  \nLogfmtEncoder encodes log entries as logfmt:\nhttps://www.brandur.org/logfmt\n",
            "type": "object",
            "properties": {
                "caller_key": {
                    "description": "caller_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)\n",
                    "markdownDescription": "caller_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)  \n",
                    "type": "string"
                },
                "duration_format": {
                    "description": "duration_format: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)\n",
                    "markdownDescription": "duration_format: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)  \n",
                    "type": "string"
                },
                "level_format": {
                    "description": "level_format: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)\n",
                    "markdownDescription": "level_format: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)  \n",
                    "type": "string"
                },
                "level_key": {
                    "description": "level_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)\n",
                    "markdownDescription": "level_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)  \n",
                    "type": "string"
                },
                "line_ending": {
                    "description": "line_ending: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)\n",
                    "markdownDescription": "line_ending: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)  \n",
                    "type": "string"
                },
                "message_key": {
                    "description": "message_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)\n",
                    "markdownDescription": "message_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)  \n",
                    "type": "string"
                },
                "name_key": {
                    "description": "name_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)\n",
                    "markdownDescription": "name_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)  \n",
                    "type": "string"
                },
                "stacktrace_key": {
                    "description": "stacktrace_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)\n",
                    "markdownDescription": "stacktrace_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)  \n",
                    "type": "string"
                },
                "time_format": {
                    "description": "time_format: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)\n",
                    "markdownDescription": "time_format: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)  \n",
                    "type": "string"
                },
                "time_key": {
                    "description": "time_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)\n",
                    "markdownDescription": "time_key: `string`  \nModule: `caddy.logging.encoders.logfmt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#LogfmtEncoder)  \n",
                    "type": "string"
                }
            }
        },
        "caddy.logging.encoders.single_field": {
            "description": "single_field: `object`  \nModule: `caddy.logging.encoders.single_field`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#SingleFieldEncoder)\nSingleFieldEncoder writes a log entry that consists entirely\nof a single string field in the log entry. This is useful\nfor custom, self-encoded log entries that consist of a\nsingle field in the structured log entry.\n",
            "markdownDescription": "single_field: `object`  \nModule: `caddy.logging.encoders.single_field`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#SingleFieldEncoder)  \nSingleFieldEncoder writes a log entry that consists entirely\nof a single string field in the log entry. This is useful\nfor custom, self-encoded log entries that consist of a\nsingle field in the structured log entry.\n",
            "type": "object",
            "properties": {
                "fallback": {
                    "description": "fallback: `object`  \nModule: `caddy.logging.encoders`  \n\n",
                    "markdownDescription": "fallback: `object`  \nModule: `caddy.logging.encoders`  \n  \n",
                    "required": [
                        "format"
                    ],
                    "allOf": [
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "console"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.console"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "filter"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.filter"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "json"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.json"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "logfmt"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.logfmt"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "format": {
                                        "const": "single_field"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.logging.encoders.single_field"
                            }
                        },
                        {
                            "properties": {
                                "format": {
                                    "description": "`fallback` key to identify specified module.  \nformat: `string`  \nModule: `caddy.logging.encoders`",
                                    "markdownDescription": "`fallback` key to identify specified module.  \nformat: `string`  \nModule: `caddy.logging.encoders`",
                                    "type": "string",
                                    "enum": [
                                        "console",
                                        "filter",
                                        "json",
                                        "logfmt",
                                        "single_field"
                                    ]
                                }
                            }
                        }
                    ]
                },
                "field": {
                    "description": "field: `string`  \nModule: `caddy.logging.encoders.single_field`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#SingleFieldEncoder)\n",
                    "markdownDescription": "field: `string`  \nModule: `caddy.logging.encoders.single_field`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#SingleFieldEncoder)  \n",
                    "type": "string"
                }
            }
        },
        "caddy.logging.writers.discard": {
            "description": "discard: `object`  \nModule: `caddy.logging.writers.discard`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2#DiscardWriter)\nDiscardWriter discards all writes.\n",
            "markdownDescription": "discard: `object`  \nModule: `caddy.logging.writers.discard`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2#DiscardWriter)  \nDiscardWriter discards all writes.\n",
            "type": "object"
        },
        "caddy.logging.writers.file": {
            "description": "file: `object`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)\nFileWriter can write logs to files. By default, log files\nare rotated (\"rolled\") when they get large, and old log\nfiles get deleted, to ensure that the process does not\nexhaust disk space.\n",
            "markdownDescription": "file: `object`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)  \nFileWriter can write logs to files. By default, log files\nare rotated (\"rolled\") when they get large, and old log\nfiles get deleted, to ensure that the process does not\nexhaust disk space.\n",
            "type": "object",
            "properties": {
                "filename": {
                    "description": "filename: `string`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)\nfilename is the name of the file to write.",
                    "markdownDescription": "filename: `string`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)  \nfilename is the name of the file to write.",
                    "type": "string"
                },
                "roll": {
                    "description": "roll: `boolean`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)\nroll toggles log rolling or rotation, which is\nenabled by default.",
                    "markdownDescription": "roll: `boolean`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)  \nroll toggles log rolling or rotation, which is\nenabled by default.",
                    "type": "boolean"
                },
                "roll_gzip": {
                    "description": "roll_gzip: `boolean`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)\nWhether to compress rolled files. Default: true",
                    "markdownDescription": "roll_gzip: `boolean`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)  \nWhether to compress rolled files. Default: true",
                    "type": "boolean"
                },
                "roll_keep": {
                    "description": "roll_keep: `number`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)\nThe maximum number of rolled log files to keep.\nDefault: 10",
                    "markdownDescription": "roll_keep: `number`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)  \nThe maximum number of rolled log files to keep.\nDefault: 10",
                    "type": "number"
                },
                "roll_keep_days": {
                    "description": "roll_keep_days: `number`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)\nHow many days to keep rolled log files. Default: 90",
                    "markdownDescription": "roll_keep_days: `number`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)  \nHow many days to keep rolled log files. Default: 90",
                    "type": "number"
                },
                "roll_local_time": {
                    "description": "roll_local_time: `boolean`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)\nWhether to use local timestamps in rolled filenames.\nDefault: false",
                    "markdownDescription": "roll_local_time: `boolean`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)  \nWhether to use local timestamps in rolled filenames.\nDefault: false",
                    "type": "boolean"
                },
                "roll_size_mb": {
                    "description": "roll_size_mb: `number`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)\nWhen a log file reaches approximately this size,\nit will be rotated.",
                    "markdownDescription": "roll_size_mb: `number`  \nModule: `caddy.logging.writers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#FileWriter)  \nWhen a log file reaches approximately this size,\nit will be rotated.",
                    "type": "number"
                }
            }
        },
        "caddy.logging.writers.net": {
            "description": "net: `object`  \nModule: `caddy.logging.writers.net`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#NetWriter)\nNetWriter implements a log writer that outputs to a network socket.\n",
            "markdownDescription": "net: `object`  \nModule: `caddy.logging.writers.net`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#NetWriter)  \nNetWriter implements a log writer that outputs to a network socket.\n",
            "type": "object",
            "properties": {
                "address": {
                    "description": "address: `string`  \nModule: `caddy.logging.writers.net`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#NetWriter)\n",
                    "markdownDescription": "address: `string`  \nModule: `caddy.logging.writers.net`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/logging#NetWriter)  \n",
                    "type": "string"
                }
            }
        },
        "caddy.logging.writers.stderr": {
            "description": "stderr: `object`  \nModule: `caddy.logging.writers.stderr`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2#StderrWriter)\nStderrWriter writes logs to standard error.\n",
            "markdownDescription": "stderr: `object`  \nModule: `caddy.logging.writers.stderr`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2#StderrWriter)  \nStderrWriter writes logs to standard error.\n",
            "type": "object"
        },
        "caddy.logging.writers.stdout": {
            "description": "stdout: `object`  \nModule: `caddy.logging.writers.stdout`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2#StdoutWriter)\nStdoutWriter writes logs to standard out.\n",
            "markdownDescription": "stdout: `object`  \nModule: `caddy.logging.writers.stdout`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2#StdoutWriter)  \nStdoutWriter writes logs to standard out.\n",
            "type": "object"
        },
        "caddy.storage.file_system": {
            "description": "file_system: `object`  \nModule: `caddy.storage.file_system`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/filestorage#FileStorage)\nFileStorage is a certmagic.Storage wrapper for certmagic.FileStorage.\n",
            "markdownDescription": "file_system: `object`  \nModule: `caddy.storage.file_system`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/filestorage#FileStorage)  \nFileStorage is a certmagic.Storage wrapper for certmagic.FileStorage.\n",
            "type": "object",
            "properties": {
                "root": {
                    "description": "root: `string`  \nModule: `caddy.storage.file_system`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/filestorage#FileStorage)\nThe base path to the folder used for storage.",
                    "markdownDescription": "root: `string`  \nModule: `caddy.storage.file_system`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/filestorage#FileStorage)  \nThe base path to the folder used for storage.",
                    "type": "string"
                }
            }
        },
        "exec": {
            "description": "exec: `object`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
            "markdownDescription": "exec: `object`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
            "type": "object",
            "properties": {
                "commands": {
                    "description": "commands: `array`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                    "markdownDescription": "commands: `array`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "args": {
                                "description": "args: `array`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "markdownDescription": "args: `array`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "at": {
                                "description": "at: `array`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "markdownDescription": "at: `array`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "command": {
                                "description": "command: `string`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "markdownDescription": "command: `string`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "type": "string"
                            },
                            "directory": {
                                "description": "directory: `string`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "markdownDescription": "directory: `string`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "type": "string"
                            },
                            "foreground": {
                                "description": "foreground: `boolean`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "markdownDescription": "foreground: `boolean`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "type": "boolean"
                            },
                            "timeout": {
                                "description": "timeout: `string`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "markdownDescription": "timeout: `string`  \nModule: `exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#App)",
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "http": {
            "description": "http: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nApp is a robust, production-ready HTTP server.\n\nHTTPS is enabled by default if host matchers with qualifying names are used\nin any of routes; certificates are automatically provisioned and renewed.\nAdditionally, automatic HTTPS will also enable HTTPS for servers that listen\nonly on the HTTPS port but which do not have any TLS connection policies\ndefined by adding a good, default TLS connection policy.\n\nIn HTTP routes, additional placeholders are available (replace any `*`):\n\nPlaceholder | Description\n------------|---------------\n`{http.request.cookie.*}` | HTTP request cookie\n`{http.request.header.*}` | Specific request header field\n`{http.request.host.labels.*}` | Request host labels (0-based from right); e.g. for foo.example.com: 0=com, 1=example, 2=foo\n`{http.request.host}` | The host part of the request's Host header\n`{http.request.hostport}` | The host and port from the request's Host header\n`{http.request.method}` | The request method\n`{http.request.orig_method}` | The request's original method\n`{http.request.orig_uri.path.dir}` | The request's original directory\n`{http.request.orig_uri.path.file}` | The request's original filename\n`{http.request.orig_uri.path}` | The request's original path\n`{http.request.orig_uri.query}` | The request's original query string (without `?`)\n`{http.request.orig_uri}` | The request's original URI\n`{http.request.port}` | The port part of the request's Host header\n`{http.request.proto}` | The protocol of the request\n`{http.request.remote.host}` | The host part of the remote client's address\n`{http.request.remote.port}` | The port part of the remote client's address\n`{http.request.remote}` | The address of the remote client\n`{http.request.scheme}` | The request scheme\n`{http.request.tls.version}` | The TLS version name\n`{http.request.tls.cipher_suite}` | The TLS cipher suite\n`{http.request.tls.resumed}` | The TLS connection resumed a previous connection\n`{http.request.tls.proto}` | The negotiated next protocol\n`{http.request.tls.proto_mutual}` | The negotiated next protocol was advertised by the server\n`{http.request.tls.server_name}` | The server name requested by the client, if any\n`{http.request.tls.client.fingerprint}` | The SHA256 checksum of the client certificate\n`{http.request.tls.client.issuer}` | The issuer DN of the client certificate\n`{http.request.tls.client.serial}` | The serial number of the client certificate\n`{http.request.tls.client.subject}` | The subject DN of the client certificate\n`{http.request.uri.path.*}` | Parts of the path, split by `/` (0-based from left)\n`{http.request.uri.path.dir}` | The directory, excluding leaf filename\n`{http.request.uri.path.file}` | The filename of the path, excluding directory\n`{http.request.uri.path}` | The path component of the request URI\n`{http.request.uri.query.*}` | Individual query string value\n`{http.request.uri.query}` | The query string (without `?`)\n`{http.request.uri}` | The full request URI\n`{http.response.header.*}` | Specific response header field\n`{http.vars.*}` | Custom variables in the HTTP handler chain\n",
            "markdownDescription": "http: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nApp is a robust, production-ready HTTP server.\n\nHTTPS is enabled by default if host matchers with qualifying names are used\nin any of routes; certificates are automatically provisioned and renewed.\nAdditionally, automatic HTTPS will also enable HTTPS for servers that listen\nonly on the HTTPS port but which do not have any TLS connection policies\ndefined by adding a good, default TLS connection policy.\n\nIn HTTP routes, additional placeholders are available (replace any `*`):\n\nPlaceholder | Description\n------------|---------------\n`{http.request.cookie.*}` | HTTP request cookie\n`{http.request.header.*}` | Specific request header field\n`{http.request.host.labels.*}` | Request host labels (0-based from right); e.g. for foo.example.com: 0=com, 1=example, 2=foo\n`{http.request.host}` | The host part of the request's Host header\n`{http.request.hostport}` | The host and port from the request's Host header\n`{http.request.method}` | The request method\n`{http.request.orig_method}` | The request's original method\n`{http.request.orig_uri.path.dir}` | The request's original directory\n`{http.request.orig_uri.path.file}` | The request's original filename\n`{http.request.orig_uri.path}` | The request's original path\n`{http.request.orig_uri.query}` | The request's original query string (without `?`)\n`{http.request.orig_uri}` | The request's original URI\n`{http.request.port}` | The port part of the request's Host header\n`{http.request.proto}` | The protocol of the request\n`{http.request.remote.host}` | The host part of the remote client's address\n`{http.request.remote.port}` | The port part of the remote client's address\n`{http.request.remote}` | The address of the remote client\n`{http.request.scheme}` | The request scheme\n`{http.request.tls.version}` | The TLS version name\n`{http.request.tls.cipher_suite}` | The TLS cipher suite\n`{http.request.tls.resumed}` | The TLS connection resumed a previous connection\n`{http.request.tls.proto}` | The negotiated next protocol\n`{http.request.tls.proto_mutual}` | The negotiated next protocol was advertised by the server\n`{http.request.tls.server_name}` | The server name requested by the client, if any\n`{http.request.tls.client.fingerprint}` | The SHA256 checksum of the client certificate\n`{http.request.tls.client.issuer}` | The issuer DN of the client certificate\n`{http.request.tls.client.serial}` | The serial number of the client certificate\n`{http.request.tls.client.subject}` | The subject DN of the client certificate\n`{http.request.uri.path.*}` | Parts of the path, split by `/` (0-based from left)\n`{http.request.uri.path.dir}` | The directory, excluding leaf filename\n`{http.request.uri.path.file}` | The filename of the path, excluding directory\n`{http.request.uri.path}` | The path component of the request URI\n`{http.request.uri.query.*}` | Individual query string value\n`{http.request.uri.query}` | The query string (without `?`)\n`{http.request.uri}` | The full request URI\n`{http.response.header.*}` | Specific response header field\n`{http.vars.*}` | Custom variables in the HTTP handler chain\n",
            "type": "object",
            "properties": {
                "grace_period": {
                    "description": "grace_period: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\ngrace_period is how long to wait for active connections when shutting\ndown the server. Once the grace period is over, connections will\nbe forcefully closed.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                    "markdownDescription": "grace_period: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \ngrace_period is how long to wait for active connections when shutting\ndown the server. Once the grace period is over, connections will\nbe forcefully closed.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                    "type": "number"
                },
                "http_port": {
                    "description": "http_port: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nhttp_port specifies the port to use for HTTP (as opposed to HTTPS),\nwhich is used when setting up HTTP->HTTPS redirects or ACME HTTP\nchallenge solvers. Default: 80.",
                    "markdownDescription": "http_port: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nhttp_port specifies the port to use for HTTP (as opposed to HTTPS),\nwhich is used when setting up HTTP->HTTPS redirects or ACME HTTP\nchallenge solvers. Default: 80.",
                    "type": "number"
                },
                "https_port": {
                    "description": "https_port: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nhttps_port specifies the port to use for HTTPS, which is used when\nsolving the ACME TLS-ALPN challenges, or whenever HTTPS is needed\nbut no specific port number is given. Default: 443.",
                    "markdownDescription": "https_port: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nhttps_port specifies the port to use for HTTPS, which is used when\nsolving the ACME TLS-ALPN challenges, or whenever HTTPS is needed\nbut no specific port number is given. Default: 443.",
                    "type": "number"
                },
                "servers": {
                    "description": "servers: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\n",
                    "markdownDescription": "servers: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \n",
                    "type": "object",
                    "additionalProperties": {
                        "description": "\nservers is the list of servers, keyed by arbitrary names chosen\nat your discretion for your own convenience; the keys do not\naffect functionality.\n\nServer describes an HTTP server.",
                        "markdownDescription": "  \nservers is the list of servers, keyed by arbitrary names chosen\nat your discretion for your own convenience; the keys do not\naffect functionality.\n\nServer describes an HTTP server.",
                        "properties": {
                            "automatic_https": {
                                "description": "automatic_https: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nautomatic_https configures or disables automatic HTTPS within this server.\nHTTPS is enabled automatically and by default when qualifying names\nare present in a Host matcher and/or when the server is listening\nonly on the HTTPS port.\n\nAutoHTTPSConfig is used to disable automatic HTTPS\nor certain aspects of it for a specific server.\nHTTPS is enabled automatically and by default when\nqualifying hostnames are available from the config.",
                                "markdownDescription": "automatic_https: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nautomatic_https configures or disables automatic HTTPS within this server.\nHTTPS is enabled automatically and by default when qualifying names\nare present in a Host matcher and/or when the server is listening\nonly on the HTTPS port.\n\nAutoHTTPSConfig is used to disable automatic HTTPS\nor certain aspects of it for a specific server.\nHTTPS is enabled automatically and by default when\nqualifying hostnames are available from the config.",
                                "type": "object",
                                "properties": {
                                    "disable": {
                                        "description": "disable: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nIf true, automatic HTTPS will be entirely disabled.",
                                        "markdownDescription": "disable: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nIf true, automatic HTTPS will be entirely disabled.",
                                        "type": "boolean"
                                    },
                                    "disable_redirects": {
                                        "description": "disable_redirects: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nIf true, only automatic HTTP->HTTPS redirects will\nbe disabled.",
                                        "markdownDescription": "disable_redirects: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nIf true, only automatic HTTP->HTTPS redirects will\nbe disabled.",
                                        "type": "boolean"
                                    },
                                    "ignore_loaded_certificates": {
                                        "description": "ignore_loaded_certificates: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nBy default, automatic HTTPS will obtain and renew\ncertificates for qualifying hostnames. However, if\na certificate with a matching SAN is already loaded\ninto the cache, certificate management will not be\nenabled. To force automated certificate management\nregardless of loaded certificates, set this to true.",
                                        "markdownDescription": "ignore_loaded_certificates: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nBy default, automatic HTTPS will obtain and renew\ncertificates for qualifying hostnames. However, if\na certificate with a matching SAN is already loaded\ninto the cache, certificate management will not be\nenabled. To force automated certificate management\nregardless of loaded certificates, set this to true.",
                                        "type": "boolean"
                                    },
                                    "skip": {
                                        "description": "skip: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\n",
                                        "markdownDescription": "skip: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \n",
                                        "type": "array",
                                        "items": {
                                            "description": "\nHosts/domain names listed here will not be included\nin automatic HTTPS (they will not have certificates\nloaded nor redirects applied).",
                                            "markdownDescription": "  \nHosts/domain names listed here will not be included\nin automatic HTTPS (they will not have certificates\nloaded nor redirects applied).",
                                            "type": "string"
                                        }
                                    },
                                    "skip_certificates": {
                                        "description": "skip_certificates: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\n",
                                        "markdownDescription": "skip_certificates: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \n",
                                        "type": "array",
                                        "items": {
                                            "description": "\nHosts/domain names listed here will still be enabled\nfor automatic HTTPS (unless in the Skip list), except\nthat certificates will not be provisioned and managed\nfor these names.",
                                            "markdownDescription": "  \nHosts/domain names listed here will still be enabled\nfor automatic HTTPS (unless in the Skip list), except\nthat certificates will not be provisioned and managed\nfor these names.",
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "errors": {
                                "description": "errors: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nerrors is how this server will handle errors returned from any\nof the handlers in the primary routes. If the primary handler\nchain returns an error, the error along with its recommended\nstatus code are bubbled back up to the HTTP server which\nexecutes a separate error route, specified using this property.\nThe error routes work exactly like the normal routes.\n\nHTTPErrorConfig determines how to handle errors\nfrom the HTTP handlers.",
                                "markdownDescription": "errors: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nerrors is how this server will handle errors returned from any\nof the handlers in the primary routes. If the primary handler\nchain returns an error, the error along with its recommended\nstatus code are bubbled back up to the HTTP server which\nexecutes a separate error route, specified using this property.\nThe error routes work exactly like the normal routes.\n\nHTTPErrorConfig determines how to handle errors\nfrom the HTTP handlers.",
                                "type": "object",
                                "properties": {
                                    "routes": {
                                        "description": "routes: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nRouteList is a list of server routes that can\ncreate a middleware chain.\n",
                                        "markdownDescription": "routes: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nRouteList is a list of server routes that can\ncreate a middleware chain.\n",
                                        "type": "array",
                                        "items": {
                                            "description": "\nThe routes to evaluate after the primary handler\nchain returns an error. In an error route, extra\nplaceholders are available:\n\nPlaceholder | Description\n------------|---------------\n`{http.error.status_code}` | The recommended HTTP status code\n`{http.error.status_text}` | The status text associated with the recommended status code\n`{http.error.message}`     | The error message\n`{http.error.trace}`       | The origin of the error\n`{http.error.id}`          | An identifier for this occurrence of the error\n\nRoute consists of a set of rules for matching HTTP requests,\na list of handlers to execute, and optional flow control\nparameters which customize the handling of HTTP requests\nin a highly flexible and performant manner.",
                                            "markdownDescription": "  \nThe routes to evaluate after the primary handler\nchain returns an error. In an error route, extra\nplaceholders are available:\n\nPlaceholder | Description\n------------|---------------\n`{http.error.status_code}` | The recommended HTTP status code\n`{http.error.status_text}` | The status text associated with the recommended status code\n`{http.error.message}`     | The error message\n`{http.error.trace}`       | The origin of the error\n`{http.error.id}`          | An identifier for this occurrence of the error\n\nRoute consists of a set of rules for matching HTTP requests,\na list of handlers to execute, and optional flow control\nparameters which customize the handling of HTTP requests\nin a highly flexible and performant manner.",
                                            "type": "object",
                                            "properties": {
                                                "group": {
                                                    "description": "group: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\ngroup is an optional name for a group to which this\nroute belongs. Grouping a route makes it mutually\nexclusive with others in its group; if a route belongs\nto a group, only the first matching route in that group\nwill be executed.",
                                                    "markdownDescription": "group: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \ngroup is an optional name for a group to which this\nroute belongs. Grouping a route makes it mutually\nexclusive with others in its group; if a route belongs\nto a group, only the first matching route in that group\nwill be executed.",
                                                    "type": "string"
                                                },
                                                "handle": {
                                                    "description": "handle: `array`  \nModule: `http.handlers`  \n\n",
                                                    "markdownDescription": "handle: `array`  \nModule: `http.handlers`  \n  \n",
                                                    "type": "array",
                                                    "items": {
                                                        "description": "\nThe list of handlers for this route. Upon matching a request, they are chained\ntogether in a middleware fashion: requests flow from the first handler to the last\n(top of the list to the bottom), with the possibility that any handler could stop\nthe chain and/or return an error. Responses flow back through the chain (bottom of\nthe list to the top) as they are written out to the client.\n\nNot all handlers call the next handler in the chain. For example, the reverse_proxy\nhandler always sends a request upstream or returns an error. Thus, configuring\nhandlers after reverse_proxy in the same route is illogical, since they would never\nbe executed. You will want to put handlers which originate the response at the very\nend of your route(s). The documentation for a module should state whether it invokes\nthe next handler, but sometimes it is common sense.\n\nSome handlers manipulate the response. Remember that requests flow down the list, and\nresponses flow up the list.\n\nFor example, if you wanted to use both `templates` and `encode` handlers, you would\nneed to put `templates` after `encode` in your route, because responses flow up.\nThus, `templates` will be able to parse and execute the plain-text response as a\ntemplate, and then return it up to the `encode` handler which will then compress it\ninto a binary format.\n\nIf `templates` came before `encode`, then `encode` would write a compressed,\nbinary-encoded response to `templates` which would not be able to parse the response\nproperly.\n\nThe correct order, then, is this:\n\n    [\n        {\"handler\": \"encode\"},\n        {\"handler\": \"templates\"},\n        {\"handler\": \"file_server\"}\n    ]\n\nThe request flows ⬇️ DOWN (`encode` -> `templates` -> `file_server`).\n\n1. First, `encode` will choose how to `encode` the response and wrap the response.\n2. Then, `templates` will wrap the response with a buffer.\n3. Finally, `file_server` will originate the content from a file.\n\nThe response flows ⬆️ UP (`file_server` -> `templates` -> `encode`):\n\n1. First, `file_server` will write the file to the response.\n2. That write will be buffered and then executed by `templates`.\n3. Lastly, the write from `templates` will flow into `encode` which will compress the stream.\n\nIf you think of routes in this way, it will be easy and even fun to solve the puzzle of writing correct routes.",
                                                        "markdownDescription": "  \nThe list of handlers for this route. Upon matching a request, they are chained\ntogether in a middleware fashion: requests flow from the first handler to the last\n(top of the list to the bottom), with the possibility that any handler could stop\nthe chain and/or return an error. Responses flow back through the chain (bottom of\nthe list to the top) as they are written out to the client.\n\nNot all handlers call the next handler in the chain. For example, the reverse_proxy\nhandler always sends a request upstream or returns an error. Thus, configuring\nhandlers after reverse_proxy in the same route is illogical, since they would never\nbe executed. You will want to put handlers which originate the response at the very\nend of your route(s). The documentation for a module should state whether it invokes\nthe next handler, but sometimes it is common sense.\n\nSome handlers manipulate the response. Remember that requests flow down the list, and\nresponses flow up the list.\n\nFor example, if you wanted to use both `templates` and `encode` handlers, you would\nneed to put `templates` after `encode` in your route, because responses flow up.\nThus, `templates` will be able to parse and execute the plain-text response as a\ntemplate, and then return it up to the `encode` handler which will then compress it\ninto a binary format.\n\nIf `templates` came before `encode`, then `encode` would write a compressed,\nbinary-encoded response to `templates` which would not be able to parse the response\nproperly.\n\nThe correct order, then, is this:\n\n    [\n        {\"handler\": \"encode\"},\n        {\"handler\": \"templates\"},\n        {\"handler\": \"file_server\"}\n    ]\n\nThe request flows ⬇️ DOWN (`encode` -> `templates` -> `file_server`).\n\n1. First, `encode` will choose how to `encode` the response and wrap the response.\n2. Then, `templates` will wrap the response with a buffer.\n3. Finally, `file_server` will originate the content from a file.\n\nThe response flows ⬆️ UP (`file_server` -> `templates` -> `encode`):\n\n1. First, `file_server` will write the file to the response.\n2. That write will be buffered and then executed by `templates`.\n3. Lastly, the write from `templates` will flow into `encode` which will compress the stream.\n\nIf you think of routes in this way, it will be easy and even fun to solve the puzzle of writing correct routes.",
                                                        "required": [
                                                            "handler"
                                                        ],
                                                        "allOf": [
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "static_response"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.static_response"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "encode"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.encode"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "file_server"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.file_server"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "headers"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.headers"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "reverse_proxy"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.reverse_proxy"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "authentication"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.authentication"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "error"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.error"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "request_body"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.request_body"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "templates"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.templates"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "visitor_ip"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.visitor_ip"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "subroute"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.subroute"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "vars"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.vars"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "exec"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.exec"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "hmac"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.hmac"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "json_parse"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.json_parse"
                                                                }
                                                            },
                                                            {
                                                                "if": {
                                                                    "properties": {
                                                                        "handler": {
                                                                            "const": "rewrite"
                                                                        }
                                                                    }
                                                                },
                                                                "then": {
                                                                    "$ref": "#/definitions/http.handlers.rewrite"
                                                                }
                                                            },
                                                            {
                                                                "properties": {
                                                                    "handler": {
                                                                        "description": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                                        "markdownDescription": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                                        "type": "string",
                                                                        "enum": [
                                                                            "static_response",
                                                                            "encode",
                                                                            "file_server",
                                                                            "headers",
                                                                            "reverse_proxy",
                                                                            "authentication",
                                                                            "error",
                                                                            "request_body",
                                                                            "templates",
                                                                            "visitor_ip",
                                                                            "subroute",
                                                                            "vars",
                                                                            "exec",
                                                                            "hmac",
                                                                            "json_parse",
                                                                            "rewrite"
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                "match": {
                                                    "description": "match: `array`  \nModule: `http.matchers`  \n\nRawMatcherSets is a group of matcher sets\nin their raw, JSON form.\n",
                                                    "markdownDescription": "match: `array`  \nModule: `http.matchers`  \n  \nRawMatcherSets is a group of matcher sets\nin their raw, JSON form.\n",
                                                    "type": "array",
                                                    "items": {
                                                        "description": "\nThe matcher sets which will be used to qualify this\nroute for a request (essentially the \"if\" statement\nof this route). Each matcher set is OR'ed, but matchers\nwithin a set are AND'ed together.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                                                        "markdownDescription": "  \nThe matcher sets which will be used to qualify this\nroute for a request (essentially the \"if\" statement\nof this route). Each matcher set is OR'ed, but matchers\nwithin a set are AND'ed together.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                                                        "properties": {
                                                            "execnopmatch": {
                                                                "$ref": "#/definitions/http.matchers.execnopmatch"
                                                            },
                                                            "expression": {
                                                                "$ref": "#/definitions/http.matchers.expression"
                                                            },
                                                            "file": {
                                                                "$ref": "#/definitions/http.matchers.file"
                                                            },
                                                            "header": {
                                                                "$ref": "#/definitions/http.matchers.header"
                                                            },
                                                            "header_regexp": {
                                                                "$ref": "#/definitions/http.matchers.header_regexp"
                                                            },
                                                            "host": {
                                                                "$ref": "#/definitions/http.matchers.host"
                                                            },
                                                            "method": {
                                                                "$ref": "#/definitions/http.matchers.method"
                                                            },
                                                            "not": {
                                                                "$ref": "#/definitions/http.matchers.not"
                                                            },
                                                            "path": {
                                                                "$ref": "#/definitions/http.matchers.path"
                                                            },
                                                            "path_regexp": {
                                                                "$ref": "#/definitions/http.matchers.path_regexp"
                                                            },
                                                            "protocol": {
                                                                "$ref": "#/definitions/http.matchers.protocol"
                                                            },
                                                            "query": {
                                                                "$ref": "#/definitions/http.matchers.query"
                                                            },
                                                            "remote_ip": {
                                                                "$ref": "#/definitions/http.matchers.remote_ip"
                                                            },
                                                            "vars": {
                                                                "$ref": "#/definitions/http.matchers.vars"
                                                            },
                                                            "vars_regexp": {
                                                                "$ref": "#/definitions/http.matchers.vars_regexp"
                                                            }
                                                        }
                                                    }
                                                },
                                                "terminal": {
                                                    "description": "terminal: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nIf true, no more routes will be executed after this one.",
                                                    "markdownDescription": "terminal: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nIf true, no more routes will be executed after this one.",
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "experimental_http3": {
                                "description": "experimental_http3: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nEnable experimental HTTP/3 support. Note that HTTP/3 is not a\nfinished standard and has extremely limited client support.\nThis field is not subject to compatibility promises.",
                                "markdownDescription": "experimental_http3: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nEnable experimental HTTP/3 support. Note that HTTP/3 is not a\nfinished standard and has extremely limited client support.\nThis field is not subject to compatibility promises.",
                                "type": "boolean"
                            },
                            "idle_timeout": {
                                "description": "idle_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nidle_timeout is the maximum time to wait for the next request\nwhen keep-alives are enabled. If zero, ReadTimeout is used.\nIf both are zero, there is no timeout.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                "markdownDescription": "idle_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nidle_timeout is the maximum time to wait for the next request\nwhen keep-alives are enabled. If zero, ReadTimeout is used.\nIf both are zero, there is no timeout.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                "type": "number"
                            },
                            "listen": {
                                "description": "listen: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\n",
                                "markdownDescription": "listen: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \n",
                                "type": "array",
                                "items": {
                                    "description": "\nSocket addresses to which to bind listeners. Accepts\n[network addresses](/docs/conventions#network-addresses)\nthat may include port ranges. Listener addresses must\nbe unique; they cannot be repeated across all defined\nservers.",
                                    "markdownDescription": "  \nSocket addresses to which to bind listeners. Accepts\n[network addresses](/docs/conventions#network-addresses)\nthat may include port ranges. Listener addresses must\nbe unique; they cannot be repeated across all defined\nservers.",
                                    "type": "string"
                                }
                            },
                            "listener_wrappers": {
                                "description": "listener_wrappers: `array`  \nModule: `caddy.listeners`  \n\n",
                                "markdownDescription": "listener_wrappers: `array`  \nModule: `caddy.listeners`  \n  \n",
                                "type": "array",
                                "items": {
                                    "description": "\nA list of listener wrapper modules, which can modify the behavior\nof the base listener. They are applied in the given order.",
                                    "markdownDescription": "  \nA list of listener wrapper modules, which can modify the behavior\nof the base listener. They are applied in the given order.",
                                    "required": [
                                        "wrapper"
                                    ],
                                    "allOf": [
                                        {
                                            "if": {
                                                "properties": {
                                                    "wrapper": {
                                                        "const": "tls"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/caddy.listeners.tls"
                                            }
                                        },
                                        {
                                            "properties": {
                                                "wrapper": {
                                                    "description": "`listener_wrappers` key to identify specified module.  \nwrapper: `string`  \nModule: `caddy.listeners`",
                                                    "markdownDescription": "`listener_wrappers` key to identify specified module.  \nwrapper: `string`  \nModule: `caddy.listeners`",
                                                    "type": "string",
                                                    "enum": [
                                                        "tls"
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            "logs": {
                                "description": "logs: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nEnables access logging and configures how access logs are handled\nin this server. To minimally enable access logs, simply set this\nto a non-null, empty struct.\n\nServerLogConfig describes a server's logging configuration. If\nenabled without customization, all requests to this server are\nlogged to the default logger; logger destinations may be\ncustomized per-request-host.",
                                "markdownDescription": "logs: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nEnables access logging and configures how access logs are handled\nin this server. To minimally enable access logs, simply set this\nto a non-null, empty struct.\n\nServerLogConfig describes a server's logging configuration. If\nenabled without customization, all requests to this server are\nlogged to the default logger; logger destinations may be\ncustomized per-request-host.",
                                "type": "object",
                                "properties": {
                                    "default_logger_name": {
                                        "description": "default_logger_name: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nThe default logger name for all logs emitted by this server for\nhostnames that are not in the LoggerNames (logger_names) map.",
                                        "markdownDescription": "default_logger_name: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nThe default logger name for all logs emitted by this server for\nhostnames that are not in the LoggerNames (logger_names) map.",
                                        "type": "string"
                                    },
                                    "logger_names": {
                                        "description": "logger_names: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\n",
                                        "markdownDescription": "logger_names: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \n",
                                        "type": "object",
                                        "additionalProperties": {
                                            "description": "\nlogger_names maps request hostnames to a custom logger name.\nFor example, a mapping of \"example.com\" to \"example\" would\ncause access logs from requests with a Host of example.com\nto be emitted by a logger named \"http.log.access.example\".",
                                            "markdownDescription": "  \nlogger_names maps request hostnames to a custom logger name.\nFor example, a mapping of \"example.com\" to \"example\" would\ncause access logs from requests with a Host of example.com\nto be emitted by a logger named \"http.log.access.example\"."
                                        }
                                    },
                                    "skip_hosts": {
                                        "description": "skip_hosts: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\n",
                                        "markdownDescription": "skip_hosts: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \n",
                                        "type": "array",
                                        "items": {
                                            "description": "\nBy default, all requests to this server will be logged if\naccess logging is enabled. This field lists the request\nhosts for which access logging should be disabled.",
                                            "markdownDescription": "  \nBy default, all requests to this server will be logged if\naccess logging is enabled. This field lists the request\nhosts for which access logging should be disabled.",
                                            "type": "string"
                                        }
                                    },
                                    "skip_unmapped_hosts": {
                                        "description": "skip_unmapped_hosts: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nIf true, requests to any host not appearing in the\nLoggerNames (logger_names) map will not be logged.",
                                        "markdownDescription": "skip_unmapped_hosts: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nIf true, requests to any host not appearing in the\nLoggerNames (logger_names) map will not be logged.",
                                        "type": "boolean"
                                    }
                                }
                            },
                            "max_header_bytes": {
                                "description": "max_header_bytes: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nmax_header_bytes is the maximum size to parse from a client's\nHTTP request headers.",
                                "markdownDescription": "max_header_bytes: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nmax_header_bytes is the maximum size to parse from a client's\nHTTP request headers.",
                                "type": "number"
                            },
                            "read_header_timeout": {
                                "description": "read_header_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nread_header_timeout is like ReadTimeout but for request headers.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                "markdownDescription": "read_header_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nread_header_timeout is like ReadTimeout but for request headers.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                "type": "number"
                            },
                            "read_timeout": {
                                "description": "read_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nHow long to allow a read from a client's upload. Setting this\nto a short, non-zero value can mitigate slowloris attacks, but\nmay also affect legitimately slow clients.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                "markdownDescription": "read_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nHow long to allow a read from a client's upload. Setting this\nto a short, non-zero value can mitigate slowloris attacks, but\nmay also affect legitimately slow clients.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                "type": "number"
                            },
                            "routes": {
                                "description": "routes: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nRouteList is a list of server routes that can\ncreate a middleware chain.\n",
                                "markdownDescription": "routes: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nRouteList is a list of server routes that can\ncreate a middleware chain.\n",
                                "type": "array",
                                "items": {
                                    "description": "\nroutes describes how this server will handle requests.\nRoutes are executed sequentially. First a route's matchers\nare evaluated, then its grouping. If it matches and has\nnot been mutually-excluded by its grouping, then its\nhandlers are executed sequentially. The sequence of invoked\nhandlers comprises a compiled middleware chain that flows\nfrom each matching route and its handlers to the next.\n\nRoute consists of a set of rules for matching HTTP requests,\na list of handlers to execute, and optional flow control\nparameters which customize the handling of HTTP requests\nin a highly flexible and performant manner.",
                                    "markdownDescription": "  \nroutes describes how this server will handle requests.\nRoutes are executed sequentially. First a route's matchers\nare evaluated, then its grouping. If it matches and has\nnot been mutually-excluded by its grouping, then its\nhandlers are executed sequentially. The sequence of invoked\nhandlers comprises a compiled middleware chain that flows\nfrom each matching route and its handlers to the next.\n\nRoute consists of a set of rules for matching HTTP requests,\na list of handlers to execute, and optional flow control\nparameters which customize the handling of HTTP requests\nin a highly flexible and performant manner.",
                                    "type": "object",
                                    "properties": {
                                        "group": {
                                            "description": "group: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\ngroup is an optional name for a group to which this\nroute belongs. Grouping a route makes it mutually\nexclusive with others in its group; if a route belongs\nto a group, only the first matching route in that group\nwill be executed.",
                                            "markdownDescription": "group: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \ngroup is an optional name for a group to which this\nroute belongs. Grouping a route makes it mutually\nexclusive with others in its group; if a route belongs\nto a group, only the first matching route in that group\nwill be executed.",
                                            "type": "string"
                                        },
                                        "handle": {
                                            "description": "handle: `array`  \nModule: `http.handlers`  \n\n",
                                            "markdownDescription": "handle: `array`  \nModule: `http.handlers`  \n  \n",
                                            "type": "array",
                                            "items": {
                                                "description": "\nThe list of handlers for this route. Upon matching a request, they are chained\ntogether in a middleware fashion: requests flow from the first handler to the last\n(top of the list to the bottom), with the possibility that any handler could stop\nthe chain and/or return an error. Responses flow back through the chain (bottom of\nthe list to the top) as they are written out to the client.\n\nNot all handlers call the next handler in the chain. For example, the reverse_proxy\nhandler always sends a request upstream or returns an error. Thus, configuring\nhandlers after reverse_proxy in the same route is illogical, since they would never\nbe executed. You will want to put handlers which originate the response at the very\nend of your route(s). The documentation for a module should state whether it invokes\nthe next handler, but sometimes it is common sense.\n\nSome handlers manipulate the response. Remember that requests flow down the list, and\nresponses flow up the list.\n\nFor example, if you wanted to use both `templates` and `encode` handlers, you would\nneed to put `templates` after `encode` in your route, because responses flow up.\nThus, `templates` will be able to parse and execute the plain-text response as a\ntemplate, and then return it up to the `encode` handler which will then compress it\ninto a binary format.\n\nIf `templates` came before `encode`, then `encode` would write a compressed,\nbinary-encoded response to `templates` which would not be able to parse the response\nproperly.\n\nThe correct order, then, is this:\n\n    [\n        {\"handler\": \"encode\"},\n        {\"handler\": \"templates\"},\n        {\"handler\": \"file_server\"}\n    ]\n\nThe request flows ⬇️ DOWN (`encode` -> `templates` -> `file_server`).\n\n1. First, `encode` will choose how to `encode` the response and wrap the response.\n2. Then, `templates` will wrap the response with a buffer.\n3. Finally, `file_server` will originate the content from a file.\n\nThe response flows ⬆️ UP (`file_server` -> `templates` -> `encode`):\n\n1. First, `file_server` will write the file to the response.\n2. That write will be buffered and then executed by `templates`.\n3. Lastly, the write from `templates` will flow into `encode` which will compress the stream.\n\nIf you think of routes in this way, it will be easy and even fun to solve the puzzle of writing correct routes.",
                                                "markdownDescription": "  \nThe list of handlers for this route. Upon matching a request, they are chained\ntogether in a middleware fashion: requests flow from the first handler to the last\n(top of the list to the bottom), with the possibility that any handler could stop\nthe chain and/or return an error. Responses flow back through the chain (bottom of\nthe list to the top) as they are written out to the client.\n\nNot all handlers call the next handler in the chain. For example, the reverse_proxy\nhandler always sends a request upstream or returns an error. Thus, configuring\nhandlers after reverse_proxy in the same route is illogical, since they would never\nbe executed. You will want to put handlers which originate the response at the very\nend of your route(s). The documentation for a module should state whether it invokes\nthe next handler, but sometimes it is common sense.\n\nSome handlers manipulate the response. Remember that requests flow down the list, and\nresponses flow up the list.\n\nFor example, if you wanted to use both `templates` and `encode` handlers, you would\nneed to put `templates` after `encode` in your route, because responses flow up.\nThus, `templates` will be able to parse and execute the plain-text response as a\ntemplate, and then return it up to the `encode` handler which will then compress it\ninto a binary format.\n\nIf `templates` came before `encode`, then `encode` would write a compressed,\nbinary-encoded response to `templates` which would not be able to parse the response\nproperly.\n\nThe correct order, then, is this:\n\n    [\n        {\"handler\": \"encode\"},\n        {\"handler\": \"templates\"},\n        {\"handler\": \"file_server\"}\n    ]\n\nThe request flows ⬇️ DOWN (`encode` -> `templates` -> `file_server`).\n\n1. First, `encode` will choose how to `encode` the response and wrap the response.\n2. Then, `templates` will wrap the response with a buffer.\n3. Finally, `file_server` will originate the content from a file.\n\nThe response flows ⬆️ UP (`file_server` -> `templates` -> `encode`):\n\n1. First, `file_server` will write the file to the response.\n2. That write will be buffered and then executed by `templates`.\n3. Lastly, the write from `templates` will flow into `encode` which will compress the stream.\n\nIf you think of routes in this way, it will be easy and even fun to solve the puzzle of writing correct routes.",
                                                "required": [
                                                    "handler"
                                                ],
                                                "allOf": [
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "rewrite"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.rewrite"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "subroute"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.subroute"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "vars"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.vars"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "exec"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.exec"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "hmac"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.hmac"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "json_parse"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.json_parse"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "reverse_proxy"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.reverse_proxy"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "static_response"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.static_response"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "encode"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.encode"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "file_server"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.file_server"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "headers"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.headers"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "authentication"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.authentication"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "visitor_ip"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.visitor_ip"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "error"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.error"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "request_body"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.request_body"
                                                        }
                                                    },
                                                    {
                                                        "if": {
                                                            "properties": {
                                                                "handler": {
                                                                    "const": "templates"
                                                                }
                                                            }
                                                        },
                                                        "then": {
                                                            "$ref": "#/definitions/http.handlers.templates"
                                                        }
                                                    },
                                                    {
                                                        "properties": {
                                                            "handler": {
                                                                "description": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                                "markdownDescription": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                                "type": "string",
                                                                "enum": [
                                                                    "rewrite",
                                                                    "subroute",
                                                                    "vars",
                                                                    "exec",
                                                                    "hmac",
                                                                    "json_parse",
                                                                    "reverse_proxy",
                                                                    "static_response",
                                                                    "encode",
                                                                    "file_server",
                                                                    "headers",
                                                                    "authentication",
                                                                    "visitor_ip",
                                                                    "error",
                                                                    "request_body",
                                                                    "templates"
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        "match": {
                                            "description": "match: `array`  \nModule: `http.matchers`  \n\nRawMatcherSets is a group of matcher sets\nin their raw, JSON form.\n",
                                            "markdownDescription": "match: `array`  \nModule: `http.matchers`  \n  \nRawMatcherSets is a group of matcher sets\nin their raw, JSON form.\n",
                                            "type": "array",
                                            "items": {
                                                "description": "\nThe matcher sets which will be used to qualify this\nroute for a request (essentially the \"if\" statement\nof this route). Each matcher set is OR'ed, but matchers\nwithin a set are AND'ed together.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                                                "markdownDescription": "  \nThe matcher sets which will be used to qualify this\nroute for a request (essentially the \"if\" statement\nof this route). Each matcher set is OR'ed, but matchers\nwithin a set are AND'ed together.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                                                "properties": {
                                                    "execnopmatch": {
                                                        "$ref": "#/definitions/http.matchers.execnopmatch"
                                                    },
                                                    "expression": {
                                                        "$ref": "#/definitions/http.matchers.expression"
                                                    },
                                                    "file": {
                                                        "$ref": "#/definitions/http.matchers.file"
                                                    },
                                                    "header": {
                                                        "$ref": "#/definitions/http.matchers.header"
                                                    },
                                                    "header_regexp": {
                                                        "$ref": "#/definitions/http.matchers.header_regexp"
                                                    },
                                                    "host": {
                                                        "$ref": "#/definitions/http.matchers.host"
                                                    },
                                                    "method": {
                                                        "$ref": "#/definitions/http.matchers.method"
                                                    },
                                                    "not": {
                                                        "$ref": "#/definitions/http.matchers.not"
                                                    },
                                                    "path": {
                                                        "$ref": "#/definitions/http.matchers.path"
                                                    },
                                                    "path_regexp": {
                                                        "$ref": "#/definitions/http.matchers.path_regexp"
                                                    },
                                                    "protocol": {
                                                        "$ref": "#/definitions/http.matchers.protocol"
                                                    },
                                                    "query": {
                                                        "$ref": "#/definitions/http.matchers.query"
                                                    },
                                                    "remote_ip": {
                                                        "$ref": "#/definitions/http.matchers.remote_ip"
                                                    },
                                                    "vars": {
                                                        "$ref": "#/definitions/http.matchers.vars"
                                                    },
                                                    "vars_regexp": {
                                                        "$ref": "#/definitions/http.matchers.vars_regexp"
                                                    }
                                                }
                                            }
                                        },
                                        "terminal": {
                                            "description": "terminal: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nIf true, no more routes will be executed after this one.",
                                            "markdownDescription": "terminal: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nIf true, no more routes will be executed after this one.",
                                            "type": "boolean"
                                        }
                                    }
                                }
                            },
                            "strict_sni_host": {
                                "description": "strict_sni_host: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nIf true, will require that a request's Host header match\nthe value of the ServerName sent by the client's TLS\nClientHello; often a necessary safeguard when using TLS\nclient authentication.",
                                "markdownDescription": "strict_sni_host: `boolean`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nIf true, will require that a request's Host header match\nthe value of the ServerName sent by the client's TLS\nClientHello; often a necessary safeguard when using TLS\nclient authentication.",
                                "type": "boolean"
                            },
                            "tls_connection_policies": {
                                "description": "tls_connection_policies: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nConnectionPolicies is an ordered group of connection policies;\nthe first matching policy will be used to configure TLS\nconnections at handshake-time.\n",
                                "markdownDescription": "tls_connection_policies: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nConnectionPolicies is an ordered group of connection policies;\nthe first matching policy will be used to configure TLS\nconnections at handshake-time.\n",
                                "type": "array",
                                "items": {
                                    "description": "\nHow to handle TLS connections. At least one policy is\nrequired to enable HTTPS on this server if automatic\nHTTPS is disabled or does not apply.\n\nConnectionPolicy specifies the logic for handling a TLS handshake.\nAn empty policy is valid; safe and sensible defaults will be used.",
                                    "markdownDescription": "  \nHow to handle TLS connections. At least one policy is\nrequired to enable HTTPS on this server if automatic\nHTTPS is disabled or does not apply.\n\nConnectionPolicy specifies the logic for handling a TLS handshake.\nAn empty policy is valid; safe and sensible defaults will be used.",
                                    "type": "object",
                                    "properties": {
                                        "alpn": {
                                            "description": "alpn: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\n",
                                            "markdownDescription": "alpn: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \n",
                                            "type": "array",
                                            "items": {
                                                "description": "\nProtocols to use for Application-Layer Protocol\nNegotiation (ALPN) during the handshake.",
                                                "markdownDescription": "  \nProtocols to use for Application-Layer Protocol\nNegotiation (ALPN) during the handshake.",
                                                "type": "string"
                                            }
                                        },
                                        "certificate_selection": {
                                            "description": "certificate_selection: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nHow to choose a certificate if more than one matched\nthe given ServerName (SNI) value.\n\nCustomCertSelectionPolicy represents a policy for selecting the certificate\nused to complete a handshake when there may be multiple options. All fields\nspecified must match the candidate certificate for it to be chosen.\nThis was needed to solve https://github.com/caddyserver/caddy/issues/2588.",
                                            "markdownDescription": "certificate_selection: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nHow to choose a certificate if more than one matched\nthe given ServerName (SNI) value.\n\nCustomCertSelectionPolicy represents a policy for selecting the certificate\nused to complete a handshake when there may be multiple options. All fields\nspecified must match the candidate certificate for it to be chosen.\nThis was needed to solve https://github.com/caddyserver/caddy/issues/2588.",
                                            "type": "object",
                                            "properties": {
                                                "all_tags": {
                                                    "description": "all_tags: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\n",
                                                    "markdownDescription": "all_tags: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \n",
                                                    "type": "array",
                                                    "items": {
                                                        "description": "\nThe certificate must have all of the tags in the list.",
                                                        "markdownDescription": "  \nThe certificate must have all of the tags in the list.",
                                                        "type": "string"
                                                    }
                                                },
                                                "any_tag": {
                                                    "description": "any_tag: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\n",
                                                    "markdownDescription": "any_tag: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \n",
                                                    "type": "array",
                                                    "items": {
                                                        "description": "\nThe certificate must have at least one of the tags in the list.",
                                                        "markdownDescription": "  \nThe certificate must have at least one of the tags in the list.",
                                                        "type": "string"
                                                    }
                                                },
                                                "public_key_algorithm": {
                                                    "description": "public_key_algorithm: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nThe certificate must use this public key algorithm.\n\nPublicKeyAlgorithm is a JSON-unmarshalable wrapper type.",
                                                    "markdownDescription": "public_key_algorithm: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nThe certificate must use this public key algorithm.\n\nPublicKeyAlgorithm is a JSON-unmarshalable wrapper type.",
                                                    "type": "number"
                                                },
                                                "serial_number": {
                                                    "description": "serial_number: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\n",
                                                    "markdownDescription": "serial_number: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \n",
                                                    "type": "array",
                                                    "items": {
                                                        "description": "\nThe certificate must have one of these serial numbers.\n\nbigInt is a big.Int type that interops with JSON encodings as a string.",
                                                        "markdownDescription": "  \nThe certificate must have one of these serial numbers.\n\nbigInt is a big.Int type that interops with JSON encodings as a string.",
                                                        "type": "object"
                                                    }
                                                },
                                                "subject_organization": {
                                                    "description": "subject_organization: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\n",
                                                    "markdownDescription": "subject_organization: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \n",
                                                    "type": "array",
                                                    "items": {
                                                        "description": "\nThe certificate must have one of these organization names.",
                                                        "markdownDescription": "  \nThe certificate must have one of these organization names.",
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        },
                                        "cipher_suites": {
                                            "description": "cipher_suites: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\n",
                                            "markdownDescription": "cipher_suites: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \n",
                                            "type": "array",
                                            "items": {
                                                "description": "\nThe list of cipher suites to support. Caddy's\ndefaults are modern and secure.",
                                                "markdownDescription": "  \nThe list of cipher suites to support. Caddy's\ndefaults are modern and secure.",
                                                "type": "string"
                                            }
                                        },
                                        "client_authentication": {
                                            "description": "client_authentication: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nEnables and configures TLS client authentication.\n\nClientAuthentication configures TLS client auth.",
                                            "markdownDescription": "client_authentication: `object`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nEnables and configures TLS client authentication.\n\nClientAuthentication configures TLS client auth.",
                                            "type": "object",
                                            "properties": {
                                                "mode": {
                                                    "description": "mode: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nThe mode for authenticating the client. Allowed values are:\n\nMode | Description\n-----|---------------\n`request` | Ask clients for a certificate, but allow even if there isn't one; do not verify it\n`require` | Require clients to present a certificate, but do not verify it\n`verify_if_given` | Ask clients for a certificate; allow even if there isn't one, but verify it if there is\n`require_and_verify` | Require clients to present a valid certificate that is verified\n\nThe default mode is `require_and_verify` if any\nTrustedCACerts or TrustedLeafCerts are provided;\notherwise, the default mode is `require`.",
                                                    "markdownDescription": "mode: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nThe mode for authenticating the client. Allowed values are:\n\nMode | Description\n-----|---------------\n`request` | Ask clients for a certificate, but allow even if there isn't one; do not verify it\n`require` | Require clients to present a certificate, but do not verify it\n`verify_if_given` | Ask clients for a certificate; allow even if there isn't one, but verify it if there is\n`require_and_verify` | Require clients to present a valid certificate that is verified\n\nThe default mode is `require_and_verify` if any\nTrustedCACerts or TrustedLeafCerts are provided;\notherwise, the default mode is `require`.",
                                                    "type": "string"
                                                },
                                                "trusted_ca_certs": {
                                                    "description": "trusted_ca_certs: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\n",
                                                    "markdownDescription": "trusted_ca_certs: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \n",
                                                    "type": "array",
                                                    "items": {
                                                        "description": "\nA list of base64 DER-encoded CA certificates\nagainst which to validate client certificates.\nClient certs which are not signed by any of\nthese CAs will be rejected.",
                                                        "markdownDescription": "  \nA list of base64 DER-encoded CA certificates\nagainst which to validate client certificates.\nClient certs which are not signed by any of\nthese CAs will be rejected.",
                                                        "type": "string"
                                                    }
                                                },
                                                "trusted_leaf_certs": {
                                                    "description": "trusted_leaf_certs: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\n",
                                                    "markdownDescription": "trusted_leaf_certs: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \n",
                                                    "type": "array",
                                                    "items": {
                                                        "description": "\nA list of base64 DER-encoded client leaf certs\nto accept. If this list is not empty, client certs\nwhich are not in this list will be rejected.",
                                                        "markdownDescription": "  \nA list of base64 DER-encoded client leaf certs\nto accept. If this list is not empty, client certs\nwhich are not in this list will be rejected.",
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        },
                                        "curves": {
                                            "description": "curves: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\n",
                                            "markdownDescription": "curves: `array`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \n",
                                            "type": "array",
                                            "items": {
                                                "description": "\nThe list of elliptic curves to support. Caddy's\ndefaults are modern and secure.",
                                                "markdownDescription": "  \nThe list of elliptic curves to support. Caddy's\ndefaults are modern and secure.",
                                                "type": "string"
                                            }
                                        },
                                        "default_sni": {
                                            "description": "default_sni: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\ndefault_sni becomes the ServerName in a ClientHello if there\nis no policy configured for the empty SNI value.",
                                            "markdownDescription": "default_sni: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \ndefault_sni becomes the ServerName in a ClientHello if there\nis no policy configured for the empty SNI value.",
                                            "type": "string"
                                        },
                                        "match": {
                                            "description": "match: `object`  \nModule: `tls.handshake_match`  \n\nHow to match this policy with a TLS ClientHello. If\nthis policy is the first to match, it will be used.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                                            "markdownDescription": "match: `object`  \nModule: `tls.handshake_match`  \n  \nHow to match this policy with a TLS ClientHello. If\nthis policy is the first to match, it will be used.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                                            "properties": {
                                                "sni": {
                                                    "$ref": "#/definitions/tls.handshake_match.sni"
                                                }
                                            }
                                        },
                                        "protocol_max": {
                                            "description": "protocol_max: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nMaximum TLS protocol version to allow. Default: `tls1.3`",
                                            "markdownDescription": "protocol_max: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nMaximum TLS protocol version to allow. Default: `tls1.3`",
                                            "type": "string"
                                        },
                                        "protocol_min": {
                                            "description": "protocol_min: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nMinimum TLS protocol version to allow. Default: `tls1.2`",
                                            "markdownDescription": "protocol_min: `string`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nMinimum TLS protocol version to allow. Default: `tls1.2`",
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "write_timeout": {
                                "description": "write_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)\nwrite_timeout is how long to allow a write to a client. Note\nthat setting this to a small value when serving large files\nmay negatively affect legitimately slow clients.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                "markdownDescription": "write_timeout: `number`  \nModule: `http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#App)  \nwrite_timeout is how long to allow a write to a client. Note\nthat setting this to a small value when serving large files\nmay negatively affect legitimately slow clients.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                "type": "number"
                            }
                        }
                    }
                }
            }
        },
        "http.authentication.hashes.bcrypt": {
            "description": "bcrypt: `object`  \nModule: `http.authentication.hashes.bcrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#BcryptHash)",
            "markdownDescription": "bcrypt: `object`  \nModule: `http.authentication.hashes.bcrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#BcryptHash)",
            "type": "object"
        },
        "http.authentication.hashes.scrypt": {
            "description": "scrypt: `object`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
            "markdownDescription": "scrypt: `object`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
            "type": "object",
            "properties": {
                "N": {
                    "description": "N: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "markdownDescription": "N: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "type": "number"
                },
                "key_length": {
                    "description": "key_length: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "markdownDescription": "key_length: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "type": "number"
                },
                "p": {
                    "description": "p: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "markdownDescription": "p: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "type": "number"
                },
                "r": {
                    "description": "r: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "markdownDescription": "r: `number`  \nModule: `http.authentication.hashes.scrypt`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#ScryptHash)",
                    "type": "number"
                }
            }
        },
        "http.authentication.providers.http_basic": {
            "description": "http_basic: `object`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
            "markdownDescription": "http_basic: `object`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
            "type": "object",
            "properties": {
                "accounts": {
                    "description": "accounts: `array`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                    "markdownDescription": "accounts: `array`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "password": {
                                "description": "password: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                                "markdownDescription": "password: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                                "type": "string"
                            },
                            "salt": {
                                "description": "salt: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                                "markdownDescription": "salt: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                                "type": "string"
                            },
                            "username": {
                                "description": "username: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                                "markdownDescription": "username: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                                "type": "string"
                            }
                        }
                    }
                },
                "hash": {
                    "description": "hash: `object`  \nModule: `http.authentication.hashes`  \n",
                    "markdownDescription": "hash: `object`  \nModule: `http.authentication.hashes`  \n",
                    "required": [
                        "algorithm"
                    ],
                    "allOf": [
                        {
                            "if": {
                                "properties": {
                                    "algorithm": {
                                        "const": "bcrypt"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/http.authentication.hashes.bcrypt"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "algorithm": {
                                        "const": "scrypt"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/http.authentication.hashes.scrypt"
                            }
                        },
                        {
                            "properties": {
                                "algorithm": {
                                    "description": "`hash` key to identify specified module.  \nalgorithm: `string`  \nModule: `http.authentication.hashes`",
                                    "markdownDescription": "`hash` key to identify specified module.  \nalgorithm: `string`  \nModule: `http.authentication.hashes`",
                                    "type": "string",
                                    "enum": [
                                        "bcrypt",
                                        "scrypt"
                                    ]
                                }
                            }
                        }
                    ]
                },
                "realm": {
                    "description": "realm: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                    "markdownDescription": "realm: `string`  \nModule: `http.authentication.providers.http_basic`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#HTTPBasicAuth)",
                    "type": "string"
                }
            }
        },
        "http.encoders.gzip": {
            "description": "gzip: `object`  \nModule: `http.encoders.gzip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode/gzip#Gzip)",
            "markdownDescription": "gzip: `object`  \nModule: `http.encoders.gzip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode/gzip#Gzip)",
            "type": "object",
            "properties": {
                "level": {
                    "description": "level: `number`  \nModule: `http.encoders.gzip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode/gzip#Gzip)",
                    "markdownDescription": "level: `number`  \nModule: `http.encoders.gzip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode/gzip#Gzip)",
                    "type": "number"
                }
            }
        },
        "http.encoders.zstd": {
            "description": "zstd: `object`  \nModule: `http.encoders.zstd`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode/zstd#Zstd)",
            "markdownDescription": "zstd: `object`  \nModule: `http.encoders.zstd`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode/zstd#Zstd)",
            "type": "object"
        },
        "http.handlers.authentication": {
            "description": "authentication: `object`  \nModule: `http.handlers.authentication`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#Authentication)\nAuthentication is a middleware which provides user authentication.\nRejects requests with HTTP 401 if the request is not authenticated.\n\nIts API is still experimental and may be subject to change.\n",
            "markdownDescription": "authentication: `object`  \nModule: `http.handlers.authentication`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/caddyauth#Authentication)  \nAuthentication is a middleware which provides user authentication.\nRejects requests with HTTP 401 if the request is not authenticated.\n\nIts API is still experimental and may be subject to change.\n",
            "type": "object",
            "properties": {
                "providers": {
                    "description": "providers: `object`  \nModule: `http.authentication.providers`  \n\nA set of authentication providers. If none are specified,\nall requests will always be unauthenticated.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                    "markdownDescription": "providers: `object`  \nModule: `http.authentication.providers`  \n  \nA set of authentication providers. If none are specified,\nall requests will always be unauthenticated.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                    "properties": {
                        "http_basic": {
                            "$ref": "#/definitions/http.authentication.providers.http_basic"
                        }
                    }
                }
            }
        },
        "http.handlers.encode": {
            "description": "encode: `object`  \nModule: `http.handlers.encode`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode#Encode)\nEncode is a middleware which can encode responses.\n",
            "markdownDescription": "encode: `object`  \nModule: `http.handlers.encode`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode#Encode)  \nEncode is a middleware which can encode responses.\n",
            "type": "object",
            "properties": {
                "encodings": {
                    "description": "encodings: `object`  \nModule: `http.encoders`  \n\nSelection of compression algorithms to choose from. The best one\nwill be chosen based on the client's Accept-Encoding header.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                    "markdownDescription": "encodings: `object`  \nModule: `http.encoders`  \n  \nSelection of compression algorithms to choose from. The best one\nwill be chosen based on the client's Accept-Encoding header.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                    "properties": {
                        "gzip": {
                            "$ref": "#/definitions/http.encoders.gzip"
                        },
                        "zstd": {
                            "$ref": "#/definitions/http.encoders.zstd"
                        }
                    }
                },
                "minimum_length": {
                    "description": "minimum_length: `number`  \nModule: `http.handlers.encode`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode#Encode)\nOnly encode responses that are at least this many bytes long.",
                    "markdownDescription": "minimum_length: `number`  \nModule: `http.handlers.encode`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/encode#Encode)  \nOnly encode responses that are at least this many bytes long.",
                    "type": "number"
                }
            }
        },
        "http.handlers.error": {
            "description": "error: `object`  \nModule: `http.handlers.error`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticError)\nStaticError implements a simple handler that returns an error.\nThis handler returns an error value, but does not write a response.\nThis is useful when you want the server to act as if an error\noccurred; for example, to invoke your custom error handling logic.\n\nSince this handler does not write a response, the error information\nis for use by the server to know how to handle the error.\n",
            "markdownDescription": "error: `object`  \nModule: `http.handlers.error`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticError)  \nStaticError implements a simple handler that returns an error.\nThis handler returns an error value, but does not write a response.\nThis is useful when you want the server to act as if an error\noccurred; for example, to invoke your custom error handling logic.\n\nSince this handler does not write a response, the error information\nis for use by the server to know how to handle the error.\n",
            "type": "object",
            "properties": {
                "error": {
                    "description": "error: `string`  \nModule: `http.handlers.error`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticError)\nThe error message. Optional. Default is no error message.",
                    "markdownDescription": "error: `string`  \nModule: `http.handlers.error`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticError)  \nThe error message. Optional. Default is no error message.",
                    "type": "string"
                },
                "status_code": {
                    "description": "status_code: `string`  \nModule: `http.handlers.error`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticError)\nThe recommended HTTP status code. Can be either an integer or a\nstring if placeholders are needed. Optional. Default is 500.\n\nWeakString is a type that unmarshals any JSON value\nas a string literal, with the following exceptions:\n\n1. actual string values are decoded as strings; and\n2. null is decoded as empty string;\n\nand provides methods for getting the value as various\nprimitive types. However, using this type removes any\ntype safety as far as deserializing JSON is concerned.",
                    "markdownDescription": "status_code: `string`  \nModule: `http.handlers.error`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticError)  \nThe recommended HTTP status code. Can be either an integer or a\nstring if placeholders are needed. Optional. Default is 500.\n\nWeakString is a type that unmarshals any JSON value\nas a string literal, with the following exceptions:\n\n1. actual string values are decoded as strings; and\n2. null is decoded as empty string;\n\nand provides methods for getting the value as various\nprimitive types. However, using this type removes any\ntype safety as far as deserializing JSON is concerned.",
                    "type": "string"
                }
            }
        },
        "http.handlers.exec": {
            "description": "exec: `object`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
            "markdownDescription": "exec: `object`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
            "type": "object",
            "properties": {
                "args": {
                    "description": "args: `array`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "markdownDescription": "args: `array`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "at": {
                    "description": "at: `array`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "markdownDescription": "at: `array`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "command: `string`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "markdownDescription": "command: `string`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "type": "string"
                },
                "directory": {
                    "description": "directory: `string`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "markdownDescription": "directory: `string`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "type": "string"
                },
                "foreground": {
                    "description": "foreground: `boolean`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "markdownDescription": "foreground: `boolean`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "type": "boolean"
                },
                "timeout": {
                    "description": "timeout: `string`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "markdownDescription": "timeout: `string`  \nModule: `http.handlers.exec`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#Middleware)",
                    "type": "string"
                }
            }
        },
        "http.handlers.file_server": {
            "description": "file_server: `object`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)\nFileServer implements a static file server responder for Caddy.\n",
            "markdownDescription": "file_server: `object`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)  \nFileServer implements a static file server responder for Caddy.\n",
            "type": "object",
            "properties": {
                "browse": {
                    "description": "browse: `object`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)\nEnables file listings if a directory was requested and no index\nfile is present.\n\nBrowse configures directory browsing.",
                    "markdownDescription": "browse: `object`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)  \nEnables file listings if a directory was requested and no index\nfile is present.\n\nBrowse configures directory browsing.",
                    "type": "object",
                    "properties": {
                        "template_file": {
                            "description": "template_file: `string`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)\nUse this template file instead of the default browse template.",
                            "markdownDescription": "template_file: `string`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)  \nUse this template file instead of the default browse template.",
                            "type": "string"
                        }
                    }
                },
                "canonical_uris": {
                    "description": "canonical_uris: `boolean`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)\nUse redirects to enforce trailing slashes for directories, or to\nremove trailing slash from URIs for files. Default is true.",
                    "markdownDescription": "canonical_uris: `boolean`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)  \nUse redirects to enforce trailing slashes for directories, or to\nremove trailing slash from URIs for files. Default is true.",
                    "type": "boolean"
                },
                "hide": {
                    "description": "hide: `array`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)\n",
                    "markdownDescription": "hide: `array`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)  \n",
                    "type": "array",
                    "items": {
                        "description": "\nA list of files or folders to hide; the file server will pretend as if\nthey don't exist. Accepts globular patterns like \"*.hidden\" or \"/foo/*/bar\".",
                        "markdownDescription": "  \nA list of files or folders to hide; the file server will pretend as if\nthey don't exist. Accepts globular patterns like \"*.hidden\" or \"/foo/*/bar\".",
                        "type": "string"
                    }
                },
                "index_names": {
                    "description": "index_names: `array`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)\n",
                    "markdownDescription": "index_names: `array`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)  \n",
                    "type": "array",
                    "items": {
                        "description": "\nThe names of files to try as index files if a folder is requested.",
                        "markdownDescription": "  \nThe names of files to try as index files if a folder is requested.",
                        "type": "string"
                    }
                },
                "pass_thru": {
                    "description": "pass_thru: `boolean`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)\nIf pass-thru mode is enabled and a requested file is not found,\nit will invoke the next handler in the chain instead of returning\na 404 error. By default, this is false (disabled).",
                    "markdownDescription": "pass_thru: `boolean`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)  \nIf pass-thru mode is enabled and a requested file is not found,\nit will invoke the next handler in the chain instead of returning\na 404 error. By default, this is false (disabled).",
                    "type": "boolean"
                },
                "root": {
                    "description": "root: `string`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)\nThe path to the root of the site. Default is `{http.vars.root}` if set,\nor current working directory otherwise.",
                    "markdownDescription": "root: `string`  \nModule: `http.handlers.file_server`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#FileServer)  \nThe path to the root of the site. Default is `{http.vars.root}` if set,\nor current working directory otherwise.",
                    "type": "string"
                }
            }
        },
        "http.handlers.headers": {
            "description": "headers: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nHandler is a middleware which modifies request and response headers.\n\nChanges to headers are applied immediately, except for the response\nheaders when Deferred is true or when Required is set. In those cases,\nthe changes are applied when the headers are written to the response.\nNote that deferred changes do not take effect if an error occurs later\nin the middleware chain.\n\nProperties in this module accept placeholders.\n\nResponse header operations can be conditioned upon response status code\nand/or other header values.\n",
            "markdownDescription": "headers: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nHandler is a middleware which modifies request and response headers.\n\nChanges to headers are applied immediately, except for the response\nheaders when Deferred is true or when Required is set. In those cases,\nthe changes are applied when the headers are written to the response.\nNote that deferred changes do not take effect if an error occurs later\nin the middleware chain.\n\nProperties in this module accept placeholders.\n\nResponse header operations can be conditioned upon response status code\nand/or other header values.\n",
            "type": "object",
            "properties": {
                "request": {
                    "description": "request: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nHeaderOps defines manipulations for HTTP headers.\n",
                    "markdownDescription": "request: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nHeaderOps defines manipulations for HTTP headers.\n",
                    "type": "object",
                    "properties": {
                        "add": {
                            "description": "add: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                            "markdownDescription": "add: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                            "type": "object",
                            "additionalProperties": {
                                "description": "\nadds HTTP headers; does not replace any existing header fields.",
                                "markdownDescription": "  \nadds HTTP headers; does not replace any existing header fields.",
                                "type": "array",
                                "items": {
                                    "description": "\n",
                                    "markdownDescription": "  \n",
                                    "type": "string"
                                }
                            }
                        },
                        "delete": {
                            "description": "delete: `array`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\n",
                            "markdownDescription": "delete: `array`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \n",
                            "type": "array",
                            "items": {
                                "description": "\nNames of HTTP header fields to delete.",
                                "markdownDescription": "  \nNames of HTTP header fields to delete.",
                                "type": "string"
                            }
                        },
                        "replace": {
                            "description": "replace: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\n",
                            "markdownDescription": "replace: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \n",
                            "type": "object",
                            "additionalProperties": {
                                "description": "\nPerforms substring replacements of HTTP headers in-situ.",
                                "markdownDescription": "  \nPerforms substring replacements of HTTP headers in-situ.",
                                "type": "array",
                                "items": {
                                    "description": "\nReplacement describes a string replacement,\neither a simple and fast substring search\nor a slower but more powerful regex search.\n",
                                    "markdownDescription": "  \nReplacement describes a string replacement,\neither a simple and fast substring search\nor a slower but more powerful regex search.\n",
                                    "type": "object",
                                    "properties": {
                                        "replace": {
                                            "description": "replace: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nThe string with which to replace matches.",
                                            "markdownDescription": "replace: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nThe string with which to replace matches.",
                                            "type": "string"
                                        },
                                        "search": {
                                            "description": "search: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nThe substring to search for.",
                                            "markdownDescription": "search: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nThe substring to search for.",
                                            "type": "string"
                                        },
                                        "search_regexp": {
                                            "description": "search_regexp: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nThe regular expression to search with.",
                                            "markdownDescription": "search_regexp: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nThe regular expression to search with.",
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "set": {
                            "description": "set: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                            "markdownDescription": "set: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                            "type": "object",
                            "additionalProperties": {
                                "description": "\nsets HTTP headers; replaces existing header fields.",
                                "markdownDescription": "  \nsets HTTP headers; replaces existing header fields.",
                                "type": "array",
                                "items": {
                                    "description": "\n",
                                    "markdownDescription": "  \n",
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "response": {
                    "description": "response: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nRespHeaderOps defines manipulations for response headers.\n",
                    "markdownDescription": "response: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nRespHeaderOps defines manipulations for response headers.\n",
                    "type": "object",
                    "properties": {
                        "add": {
                            "description": "add: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                            "markdownDescription": "add: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                            "type": "object",
                            "additionalProperties": {
                                "description": "\nadds HTTP headers; does not replace any existing header fields.",
                                "markdownDescription": "  \nadds HTTP headers; does not replace any existing header fields.",
                                "type": "array",
                                "items": {
                                    "description": "\n",
                                    "markdownDescription": "  \n",
                                    "type": "string"
                                }
                            }
                        },
                        "deferred": {
                            "description": "deferred: `boolean`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nIf true, header operations will be deferred until\nthey are written out. Superceded if Require is set.\nUsually you will need to set this to true if any\nfields are being deleted.",
                            "markdownDescription": "deferred: `boolean`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nIf true, header operations will be deferred until\nthey are written out. Superceded if Require is set.\nUsually you will need to set this to true if any\nfields are being deleted.",
                            "type": "boolean"
                        },
                        "delete": {
                            "description": "delete: `array`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\n",
                            "markdownDescription": "delete: `array`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \n",
                            "type": "array",
                            "items": {
                                "description": "\nNames of HTTP header fields to delete.",
                                "markdownDescription": "  \nNames of HTTP header fields to delete.",
                                "type": "string"
                            }
                        },
                        "replace": {
                            "description": "replace: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\n",
                            "markdownDescription": "replace: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \n",
                            "type": "object",
                            "additionalProperties": {
                                "description": "\nPerforms substring replacements of HTTP headers in-situ.",
                                "markdownDescription": "  \nPerforms substring replacements of HTTP headers in-situ.",
                                "type": "array",
                                "items": {
                                    "description": "\nReplacement describes a string replacement,\neither a simple and fast substring search\nor a slower but more powerful regex search.\n",
                                    "markdownDescription": "  \nReplacement describes a string replacement,\neither a simple and fast substring search\nor a slower but more powerful regex search.\n",
                                    "type": "object",
                                    "properties": {
                                        "replace": {
                                            "description": "replace: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nThe string with which to replace matches.",
                                            "markdownDescription": "replace: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nThe string with which to replace matches.",
                                            "type": "string"
                                        },
                                        "search": {
                                            "description": "search: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nThe substring to search for.",
                                            "markdownDescription": "search: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nThe substring to search for.",
                                            "type": "string"
                                        },
                                        "search_regexp": {
                                            "description": "search_regexp: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nThe regular expression to search with.",
                                            "markdownDescription": "search_regexp: `string`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nThe regular expression to search with.",
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "require": {
                            "description": "require: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nIf set, header operations will be deferred until\nthey are written out and only performed if the\nresponse matches these criteria.\n\nResponseMatcher is a type which can determine if an\nHTTP response matches some criteria.",
                            "markdownDescription": "require: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nIf set, header operations will be deferred until\nthey are written out and only performed if the\nresponse matches these criteria.\n\nResponseMatcher is a type which can determine if an\nHTTP response matches some criteria.",
                            "type": "object",
                            "properties": {
                                "headers": {
                                    "description": "headers: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                                    "markdownDescription": "headers: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "\nIf set, each header specified must be one of the specified values.",
                                        "markdownDescription": "  \nIf set, each header specified must be one of the specified values.",
                                        "type": "array",
                                        "items": {
                                            "description": "\n",
                                            "markdownDescription": "  \n",
                                            "type": "string"
                                        }
                                    }
                                },
                                "status_code": {
                                    "description": "status_code: `array`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\n",
                                    "markdownDescription": "status_code: `array`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \n",
                                    "type": "array",
                                    "items": {
                                        "description": "\nIf set, one of these status codes would be required.\nA one-digit status can be used to represent all codes\nin that class (e.g. 3 for all 3xx codes).",
                                        "markdownDescription": "  \nIf set, one of these status codes would be required.\nA one-digit status can be used to represent all codes\nin that class (e.g. 3 for all 3xx codes).",
                                        "type": "number"
                                    }
                                }
                            }
                        },
                        "set": {
                            "description": "set: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)\nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                            "markdownDescription": "set: `object`  \nModule: `http.handlers.headers`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/headers#Handler)  \nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                            "type": "object",
                            "additionalProperties": {
                                "description": "\nsets HTTP headers; replaces existing header fields.",
                                "markdownDescription": "  \nsets HTTP headers; replaces existing header fields.",
                                "type": "array",
                                "items": {
                                    "description": "\n",
                                    "markdownDescription": "  \n",
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "http.handlers.hmac": {
            "description": "hmac: `object`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
            "markdownDescription": "hmac: `object`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
            "type": "object",
            "properties": {
                "algorithm": {
                    "description": "algorithm: `string`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
                    "markdownDescription": "algorithm: `string`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
                    "type": "string"
                },
                "name": {
                    "description": "name: `string`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
                    "markdownDescription": "name: `string`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
                    "type": "string"
                },
                "secret": {
                    "description": "secret: `string`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
                    "markdownDescription": "secret: `string`  \nModule: `http.handlers.hmac`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-hmac#HMAC)",
                    "type": "string"
                }
            }
        },
        "http.handlers.json_parse": {
            "description": "json_parse: `object`  \nModule: `http.handlers.json_parse`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-json-parse#JSONParse)",
            "markdownDescription": "json_parse: `object`  \nModule: `http.handlers.json_parse`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-json-parse#JSONParse)",
            "type": "object",
            "properties": {
                "strict": {
                    "description": "strict: `boolean`  \nModule: `http.handlers.json_parse`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-json-parse#JSONParse)",
                    "markdownDescription": "strict: `boolean`  \nModule: `http.handlers.json_parse`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-json-parse#JSONParse)",
                    "type": "boolean"
                }
            }
        },
        "http.handlers.request_body": {
            "description": "request_body: `object`  \nModule: `http.handlers.request_body`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/requestbody#RequestBody)\nRequestBody is a middleware for manipulating the request body.\n",
            "markdownDescription": "request_body: `object`  \nModule: `http.handlers.request_body`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/requestbody#RequestBody)  \nRequestBody is a middleware for manipulating the request body.\n",
            "type": "object",
            "properties": {
                "max_size": {
                    "description": "max_size: `number`  \nModule: `http.handlers.request_body`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/requestbody#RequestBody)\nThe maximum number of bytes to allow reading from the body by a later handler.",
                    "markdownDescription": "max_size: `number`  \nModule: `http.handlers.request_body`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/requestbody#RequestBody)  \nThe maximum number of bytes to allow reading from the body by a later handler.",
                    "type": "number"
                }
            }
        },
        "http.handlers.reverse_proxy": {
            "description": "reverse_proxy: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nHandler implements a highly configurable and production-ready reverse proxy.\n\nUpon proxying, this module sets the following placeholders (which can be used\nboth within and after this handler):\n\nPlaceholder | Description\n------------|-------------\n`{http.reverse_proxy.upstream.address}` | The full address to the upstream as given in the config\n`{http.reverse_proxy.upstream.hostport}` | The host:port of the upstream\n`{http.reverse_proxy.upstream.host}` | The host of the upstream\n`{http.reverse_proxy.upstream.port}` | The port of the upstream\n`{http.reverse_proxy.upstream.requests}` | The approximate current number of requests to the upstream\n`{http.reverse_proxy.upstream.max_requests}` | The maximum approximate number of requests allowed to the upstream\n`{http.reverse_proxy.upstream.fails}` | The number of recent failed requests to the upstream\n",
            "markdownDescription": "reverse_proxy: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nHandler implements a highly configurable and production-ready reverse proxy.\n\nUpon proxying, this module sets the following placeholders (which can be used\nboth within and after this handler):\n\nPlaceholder | Description\n------------|-------------\n`{http.reverse_proxy.upstream.address}` | The full address to the upstream as given in the config\n`{http.reverse_proxy.upstream.hostport}` | The host:port of the upstream\n`{http.reverse_proxy.upstream.host}` | The host of the upstream\n`{http.reverse_proxy.upstream.port}` | The port of the upstream\n`{http.reverse_proxy.upstream.requests}` | The approximate current number of requests to the upstream\n`{http.reverse_proxy.upstream.max_requests}` | The maximum approximate number of requests allowed to the upstream\n`{http.reverse_proxy.upstream.fails}` | The number of recent failed requests to the upstream\n",
            "type": "object",
            "properties": {
                "buffer_requests": {
                    "description": "buffer_requests: `boolean`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nIf true, the entire request body will be read and buffered\nin memory before being proxied to the backend. This should\nbe avoided if at all possible for performance reasons.",
                    "markdownDescription": "buffer_requests: `boolean`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nIf true, the entire request body will be read and buffered\nin memory before being proxied to the backend. This should\nbe avoided if at all possible for performance reasons.",
                    "type": "boolean"
                },
                "circuit_breaker": {
                    "description": "circuit_breaker: `object`  \nModule: `http.reverse_proxy.circuit_breakers`  \n\nA circuit breaker may be used to relieve pressure on a backend\nthat is beginning to exhibit symptoms of stress or latency.\nBy default, there is no circuit breaker.",
                    "markdownDescription": "circuit_breaker: `object`  \nModule: `http.reverse_proxy.circuit_breakers`  \n  \nA circuit breaker may be used to relieve pressure on a backend\nthat is beginning to exhibit symptoms of stress or latency.\nBy default, there is no circuit breaker.",
                    "type": "object"
                },
                "flush_interval": {
                    "description": "flush_interval: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nAdjusts how often to flush the response buffer. A\nnegative value disables response buffering.\nTODO: figure out good defaults and write docs for this\n(see https://github.com/caddyserver/caddy/issues/1460)\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                    "markdownDescription": "flush_interval: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nAdjusts how often to flush the response buffer. A\nnegative value disables response buffering.\nTODO: figure out good defaults and write docs for this\n(see https://github.com/caddyserver/caddy/issues/1460)\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                    "type": "number"
                },
                "headers": {
                    "description": "headers: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nheaders manipulates headers between Caddy and the backend.\nBy default, all headers are passed-thru without changes,\nwith the exceptions of special hop-by-hop headers.\n\nX-Forwarded-For and X-Forwarded-Proto are also set\nimplicitly, but this may change in the future if the official\nstandardized Forwarded header field gains more adoption.\n\nHandler is a middleware which modifies request and response headers.\n\nChanges to headers are applied immediately, except for the response\nheaders when Deferred is true or when Required is set. In those cases,\nthe changes are applied when the headers are written to the response.\nNote that deferred changes do not take effect if an error occurs later\nin the middleware chain.\n\nProperties in this module accept placeholders.\n\nResponse header operations can be conditioned upon response status code\nand/or other header values.",
                    "markdownDescription": "headers: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nheaders manipulates headers between Caddy and the backend.\nBy default, all headers are passed-thru without changes,\nwith the exceptions of special hop-by-hop headers.\n\nX-Forwarded-For and X-Forwarded-Proto are also set\nimplicitly, but this may change in the future if the official\nstandardized Forwarded header field gains more adoption.\n\nHandler is a middleware which modifies request and response headers.\n\nChanges to headers are applied immediately, except for the response\nheaders when Deferred is true or when Required is set. In those cases,\nthe changes are applied when the headers are written to the response.\nNote that deferred changes do not take effect if an error occurs later\nin the middleware chain.\n\nProperties in this module accept placeholders.\n\nResponse header operations can be conditioned upon response status code\nand/or other header values.",
                    "type": "object",
                    "properties": {
                        "request": {
                            "description": "request: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nHeaderOps defines manipulations for HTTP headers.\n",
                            "markdownDescription": "request: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nHeaderOps defines manipulations for HTTP headers.\n",
                            "type": "object",
                            "properties": {
                                "add": {
                                    "description": "add: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                                    "markdownDescription": "add: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "\nadds HTTP headers; does not replace any existing header fields.",
                                        "markdownDescription": "  \nadds HTTP headers; does not replace any existing header fields.",
                                        "type": "array",
                                        "items": {
                                            "description": "\n",
                                            "markdownDescription": "  \n",
                                            "type": "string"
                                        }
                                    }
                                },
                                "delete": {
                                    "description": "delete: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\n",
                                    "markdownDescription": "delete: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \n",
                                    "type": "array",
                                    "items": {
                                        "description": "\nNames of HTTP header fields to delete.",
                                        "markdownDescription": "  \nNames of HTTP header fields to delete.",
                                        "type": "string"
                                    }
                                },
                                "replace": {
                                    "description": "replace: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\n",
                                    "markdownDescription": "replace: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \n",
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "\nPerforms substring replacements of HTTP headers in-situ.",
                                        "markdownDescription": "  \nPerforms substring replacements of HTTP headers in-situ.",
                                        "type": "array",
                                        "items": {
                                            "description": "\nReplacement describes a string replacement,\neither a simple and fast substring search\nor a slower but more powerful regex search.\n",
                                            "markdownDescription": "  \nReplacement describes a string replacement,\neither a simple and fast substring search\nor a slower but more powerful regex search.\n",
                                            "type": "object",
                                            "properties": {
                                                "replace": {
                                                    "description": "replace: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nThe string with which to replace matches.",
                                                    "markdownDescription": "replace: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nThe string with which to replace matches.",
                                                    "type": "string"
                                                },
                                                "search": {
                                                    "description": "search: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nThe substring to search for.",
                                                    "markdownDescription": "search: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nThe substring to search for.",
                                                    "type": "string"
                                                },
                                                "search_regexp": {
                                                    "description": "search_regexp: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nThe regular expression to search with.",
                                                    "markdownDescription": "search_regexp: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nThe regular expression to search with.",
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "set": {
                                    "description": "set: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                                    "markdownDescription": "set: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "\nsets HTTP headers; replaces existing header fields.",
                                        "markdownDescription": "  \nsets HTTP headers; replaces existing header fields.",
                                        "type": "array",
                                        "items": {
                                            "description": "\n",
                                            "markdownDescription": "  \n",
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "response": {
                            "description": "response: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nRespHeaderOps defines manipulations for response headers.\n",
                            "markdownDescription": "response: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nRespHeaderOps defines manipulations for response headers.\n",
                            "type": "object",
                            "properties": {
                                "add": {
                                    "description": "add: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                                    "markdownDescription": "add: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "\nadds HTTP headers; does not replace any existing header fields.",
                                        "markdownDescription": "  \nadds HTTP headers; does not replace any existing header fields.",
                                        "type": "array",
                                        "items": {
                                            "description": "\n",
                                            "markdownDescription": "  \n",
                                            "type": "string"
                                        }
                                    }
                                },
                                "deferred": {
                                    "description": "deferred: `boolean`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nIf true, header operations will be deferred until\nthey are written out. Superceded if Require is set.\nUsually you will need to set this to true if any\nfields are being deleted.",
                                    "markdownDescription": "deferred: `boolean`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nIf true, header operations will be deferred until\nthey are written out. Superceded if Require is set.\nUsually you will need to set this to true if any\nfields are being deleted.",
                                    "type": "boolean"
                                },
                                "delete": {
                                    "description": "delete: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\n",
                                    "markdownDescription": "delete: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \n",
                                    "type": "array",
                                    "items": {
                                        "description": "\nNames of HTTP header fields to delete.",
                                        "markdownDescription": "  \nNames of HTTP header fields to delete.",
                                        "type": "string"
                                    }
                                },
                                "replace": {
                                    "description": "replace: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\n",
                                    "markdownDescription": "replace: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \n",
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "\nPerforms substring replacements of HTTP headers in-situ.",
                                        "markdownDescription": "  \nPerforms substring replacements of HTTP headers in-situ.",
                                        "type": "array",
                                        "items": {
                                            "description": "\nReplacement describes a string replacement,\neither a simple and fast substring search\nor a slower but more powerful regex search.\n",
                                            "markdownDescription": "  \nReplacement describes a string replacement,\neither a simple and fast substring search\nor a slower but more powerful regex search.\n",
                                            "type": "object",
                                            "properties": {
                                                "replace": {
                                                    "description": "replace: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nThe string with which to replace matches.",
                                                    "markdownDescription": "replace: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nThe string with which to replace matches.",
                                                    "type": "string"
                                                },
                                                "search": {
                                                    "description": "search: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nThe substring to search for.",
                                                    "markdownDescription": "search: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nThe substring to search for.",
                                                    "type": "string"
                                                },
                                                "search_regexp": {
                                                    "description": "search_regexp: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nThe regular expression to search with.",
                                                    "markdownDescription": "search_regexp: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nThe regular expression to search with.",
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "require": {
                                    "description": "require: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nIf set, header operations will be deferred until\nthey are written out and only performed if the\nresponse matches these criteria.\n\nResponseMatcher is a type which can determine if an\nHTTP response matches some criteria.",
                                    "markdownDescription": "require: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nIf set, header operations will be deferred until\nthey are written out and only performed if the\nresponse matches these criteria.\n\nResponseMatcher is a type which can determine if an\nHTTP response matches some criteria.",
                                    "type": "object",
                                    "properties": {
                                        "headers": {
                                            "description": "headers: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                                            "markdownDescription": "headers: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                                            "type": "object",
                                            "additionalProperties": {
                                                "description": "\nIf set, each header specified must be one of the specified values.",
                                                "markdownDescription": "  \nIf set, each header specified must be one of the specified values.",
                                                "type": "array",
                                                "items": {
                                                    "description": "\n",
                                                    "markdownDescription": "  \n",
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "status_code": {
                                            "description": "status_code: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\n",
                                            "markdownDescription": "status_code: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \n",
                                            "type": "array",
                                            "items": {
                                                "description": "\nIf set, one of these status codes would be required.\nA one-digit status can be used to represent all codes\nin that class (e.g. 3 for all 3xx codes).",
                                                "markdownDescription": "  \nIf set, one of these status codes would be required.\nA one-digit status can be used to represent all codes\nin that class (e.g. 3 for all 3xx codes).",
                                                "type": "number"
                                            }
                                        }
                                    }
                                },
                                "set": {
                                    "description": "set: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                                    "markdownDescription": "set: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "\nsets HTTP headers; replaces existing header fields.",
                                        "markdownDescription": "  \nsets HTTP headers; replaces existing header fields.",
                                        "type": "array",
                                        "items": {
                                            "description": "\n",
                                            "markdownDescription": "  \n",
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "health_checks": {
                    "description": "health_checks: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nHealth checks update the status of backends, whether they are\nup or down. Down backends will not be proxied to.\n\nHealthChecks configures active and passive health checks.",
                    "markdownDescription": "health_checks: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nHealth checks update the status of backends, whether they are\nup or down. Down backends will not be proxied to.\n\nHealthChecks configures active and passive health checks.",
                    "type": "object",
                    "properties": {
                        "active": {
                            "description": "active: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nactive health checks run in the background on a timer. To\nminimally enable active health checks, set either path or\nport (or both).\n\nActiveHealthChecks holds configuration related to active\nhealth checks (that is, health checks which occur in a\nbackground goroutine independently).",
                            "markdownDescription": "active: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nactive health checks run in the background on a timer. To\nminimally enable active health checks, set either path or\nport (or both).\n\nActiveHealthChecks holds configuration related to active\nhealth checks (that is, health checks which occur in a\nbackground goroutine independently).",
                            "type": "object",
                            "properties": {
                                "expect_body": {
                                    "description": "expect_body: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nA regular expression against which to match the response\nbody of a healthy backend.",
                                    "markdownDescription": "expect_body: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nA regular expression against which to match the response\nbody of a healthy backend.",
                                    "type": "string"
                                },
                                "expect_status": {
                                    "description": "expect_status: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nThe HTTP status code to expect from a healthy backend.",
                                    "markdownDescription": "expect_status: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nThe HTTP status code to expect from a healthy backend.",
                                    "type": "number"
                                },
                                "headers": {
                                    "description": "headers: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                                    "markdownDescription": "headers: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                                    "type": "object",
                                    "additionalProperties": {
                                        "description": "\nHTTP headers to set on health check requests.",
                                        "markdownDescription": "  \nHTTP headers to set on health check requests.",
                                        "type": "array",
                                        "items": {
                                            "description": "\n",
                                            "markdownDescription": "  \n",
                                            "type": "string"
                                        }
                                    }
                                },
                                "interval": {
                                    "description": "interval: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nHow frequently to perform active health checks (default 30s).\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                    "markdownDescription": "interval: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nHow frequently to perform active health checks (default 30s).\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                    "type": "number"
                                },
                                "max_size": {
                                    "description": "max_size: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nThe maximum response body to download from the backend\nduring a health check.",
                                    "markdownDescription": "max_size: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nThe maximum response body to download from the backend\nduring a health check.",
                                    "type": "number"
                                },
                                "path": {
                                    "description": "path: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nThe URI path to use for health checks.",
                                    "markdownDescription": "path: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nThe URI path to use for health checks.",
                                    "type": "string"
                                },
                                "port": {
                                    "description": "port: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nThe port to use (if different from the upstream's dial\naddress) for health checks.",
                                    "markdownDescription": "port: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nThe port to use (if different from the upstream's dial\naddress) for health checks.",
                                    "type": "number"
                                },
                                "timeout": {
                                    "description": "timeout: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nHow long to wait for a response from a backend before\nconsidering it unhealthy (default 5s).\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                    "markdownDescription": "timeout: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nHow long to wait for a response from a backend before\nconsidering it unhealthy (default 5s).\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                    "type": "number"
                                }
                            }
                        },
                        "passive": {
                            "description": "passive: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\npassive health checks monitor proxied requests for errors or timeouts.\nTo minimally enable passive health checks, specify at least an empty\nconfig object.\n\nPassiveHealthChecks holds configuration related to passive\nhealth checks (that is, health checks which occur during\nthe normal flow of request proxying).",
                            "markdownDescription": "passive: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \npassive health checks monitor proxied requests for errors or timeouts.\nTo minimally enable passive health checks, specify at least an empty\nconfig object.\n\nPassiveHealthChecks holds configuration related to passive\nhealth checks (that is, health checks which occur during\nthe normal flow of request proxying).",
                            "type": "object",
                            "properties": {
                                "fail_duration": {
                                    "description": "fail_duration: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nHow long to remember a failed request to a backend. A duration > 0\nenables passive health checking. Default is 0.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                    "markdownDescription": "fail_duration: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nHow long to remember a failed request to a backend. A duration > 0\nenables passive health checking. Default is 0.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                    "type": "number"
                                },
                                "max_fails": {
                                    "description": "max_fails: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nThe number of failed requests within the FailDuration window to\nconsider a backend as \"down\". Must be >= 1; default is 1. Requires\nthat FailDuration be > 0.",
                                    "markdownDescription": "max_fails: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nThe number of failed requests within the FailDuration window to\nconsider a backend as \"down\". Must be >= 1; default is 1. Requires\nthat FailDuration be > 0.",
                                    "type": "number"
                                },
                                "unhealthy_latency": {
                                    "description": "unhealthy_latency: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nCount the request as failed if the response takes at least this\nlong to receive.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                    "markdownDescription": "unhealthy_latency: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nCount the request as failed if the response takes at least this\nlong to receive.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                    "type": "number"
                                },
                                "unhealthy_request_count": {
                                    "description": "unhealthy_request_count: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nLimits the number of simultaneous requests to a backend by\nmarking the backend as \"down\" if it has this many concurrent\nrequests or more.",
                                    "markdownDescription": "unhealthy_request_count: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nLimits the number of simultaneous requests to a backend by\nmarking the backend as \"down\" if it has this many concurrent\nrequests or more.",
                                    "type": "number"
                                },
                                "unhealthy_status": {
                                    "description": "unhealthy_status: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\n",
                                    "markdownDescription": "unhealthy_status: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \n",
                                    "type": "array",
                                    "items": {
                                        "description": "\nCount the request as failed if the response comes back with\none of these status codes.",
                                        "markdownDescription": "  \nCount the request as failed if the response comes back with\none of these status codes.",
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    }
                },
                "load_balancing": {
                    "description": "load_balancing: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nLoad balancing distributes load/requests between backends.\n\nLoadBalancing has parameters related to load balancing.",
                    "markdownDescription": "load_balancing: `object`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nLoad balancing distributes load/requests between backends.\n\nLoadBalancing has parameters related to load balancing.",
                    "type": "object",
                    "properties": {
                        "retry_match": {
                            "description": "retry_match: `array`  \nModule: `http.matchers`  \n\nRawMatcherSets is a group of matcher sets\nin their raw, JSON form.\n",
                            "markdownDescription": "retry_match: `array`  \nModule: `http.matchers`  \n  \nRawMatcherSets is a group of matcher sets\nin their raw, JSON form.\n",
                            "type": "array",
                            "items": {
                                "description": "\nA list of matcher sets that restricts with which requests retries are\nallowed. A request must match any of the given matcher sets in order\nto be retried if the connection to the upstream succeeded but the\nsubsequent round-trip failed. If the connection to the upstream failed,\na retry is always allowed. If unspecified, only GET requests will be\nallowed to be retried. Note that a retry is done with the next available\nhost according to the load balancing policy.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                                "markdownDescription": "  \nA list of matcher sets that restricts with which requests retries are\nallowed. A request must match any of the given matcher sets in order\nto be retried if the connection to the upstream succeeded but the\nsubsequent round-trip failed. If the connection to the upstream failed,\na retry is always allowed. If unspecified, only GET requests will be\nallowed to be retried. Note that a retry is done with the next available\nhost according to the load balancing policy.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                                "properties": {
                                    "execnopmatch": {
                                        "$ref": "#/definitions/http.matchers.execnopmatch"
                                    },
                                    "expression": {
                                        "$ref": "#/definitions/http.matchers.expression"
                                    },
                                    "file": {
                                        "$ref": "#/definitions/http.matchers.file"
                                    },
                                    "header": {
                                        "$ref": "#/definitions/http.matchers.header"
                                    },
                                    "header_regexp": {
                                        "$ref": "#/definitions/http.matchers.header_regexp"
                                    },
                                    "host": {
                                        "$ref": "#/definitions/http.matchers.host"
                                    },
                                    "method": {
                                        "$ref": "#/definitions/http.matchers.method"
                                    },
                                    "not": {
                                        "$ref": "#/definitions/http.matchers.not"
                                    },
                                    "path": {
                                        "$ref": "#/definitions/http.matchers.path"
                                    },
                                    "path_regexp": {
                                        "$ref": "#/definitions/http.matchers.path_regexp"
                                    },
                                    "protocol": {
                                        "$ref": "#/definitions/http.matchers.protocol"
                                    },
                                    "query": {
                                        "$ref": "#/definitions/http.matchers.query"
                                    },
                                    "remote_ip": {
                                        "$ref": "#/definitions/http.matchers.remote_ip"
                                    },
                                    "vars": {
                                        "$ref": "#/definitions/http.matchers.vars"
                                    },
                                    "vars_regexp": {
                                        "$ref": "#/definitions/http.matchers.vars_regexp"
                                    }
                                }
                            }
                        },
                        "selection_policy": {
                            "description": "selection_policy: `object`  \nModule: `http.reverse_proxy.selection_policies`  \n\nA selection policy is how to choose an available backend.\nThe default policy is random selection.",
                            "markdownDescription": "selection_policy: `object`  \nModule: `http.reverse_proxy.selection_policies`  \n  \nA selection policy is how to choose an available backend.\nThe default policy is random selection.",
                            "required": [
                                "policy"
                            ],
                            "allOf": [
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "first"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.first"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "header"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.header"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "ip_hash"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.ip_hash"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "least_conn"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.least_conn"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "random"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.random"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "random_choose"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.random_choose"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "round_robin"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.round_robin"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "policy": {
                                                "const": "uri_hash"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/http.reverse_proxy.selection_policies.uri_hash"
                                    }
                                },
                                {
                                    "properties": {
                                        "policy": {
                                            "description": "`selection_policy` key to identify specified module.  \npolicy: `string`  \nModule: `http.reverse_proxy.selection_policies`",
                                            "markdownDescription": "`selection_policy` key to identify specified module.  \npolicy: `string`  \nModule: `http.reverse_proxy.selection_policies`",
                                            "type": "string",
                                            "enum": [
                                                "first",
                                                "header",
                                                "ip_hash",
                                                "least_conn",
                                                "random",
                                                "random_choose",
                                                "round_robin",
                                                "uri_hash"
                                            ]
                                        }
                                    }
                                }
                            ]
                        },
                        "try_duration": {
                            "description": "try_duration: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nHow long to try selecting available backends for each request\nif the next available host is down. By default, this retry is\ndisabled. Clients will wait for up to this long while the load\nbalancer tries to find an available upstream host.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                            "markdownDescription": "try_duration: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nHow long to try selecting available backends for each request\nif the next available host is down. By default, this retry is\ndisabled. Clients will wait for up to this long while the load\nbalancer tries to find an available upstream host.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                            "type": "number"
                        },
                        "try_interval": {
                            "description": "try_interval: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nHow long to wait between selecting the next host from the pool. Default\nis 250ms. Only relevant when a request to an upstream host fails. Be\naware that setting this to 0 with a non-zero try_duration can cause the\nCPU to spin if all backends are down and latency is very low.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                            "markdownDescription": "try_interval: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nHow long to wait between selecting the next host from the pool. Default\nis 250ms. Only relevant when a request to an upstream host fails. Be\naware that setting this to 0 with a non-zero try_duration can cause the\nCPU to spin if all backends are down and latency is very low.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                            "type": "number"
                        }
                    }
                },
                "transport": {
                    "description": "transport: `object`  \nModule: `http.reverse_proxy.transport`  \n\nConfigures the method of transport for the proxy. A transport\nis what performs the actual \"round trip\" to the backend.\nThe default transport is plaintext HTTP.",
                    "markdownDescription": "transport: `object`  \nModule: `http.reverse_proxy.transport`  \n  \nConfigures the method of transport for the proxy. A transport\nis what performs the actual \"round trip\" to the backend.\nThe default transport is plaintext HTTP.",
                    "required": [
                        "protocol"
                    ],
                    "allOf": [
                        {
                            "if": {
                                "properties": {
                                    "protocol": {
                                        "const": "fastcgi"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/http.reverse_proxy.transport.fastcgi"
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "protocol": {
                                        "const": "http"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/http.reverse_proxy.transport.http"
                            }
                        },
                        {
                            "properties": {
                                "protocol": {
                                    "description": "`transport` key to identify specified module.  \nprotocol: `string`  \nModule: `http.reverse_proxy.transport`",
                                    "markdownDescription": "`transport` key to identify specified module.  \nprotocol: `string`  \nModule: `http.reverse_proxy.transport`",
                                    "type": "string",
                                    "enum": [
                                        "fastcgi",
                                        "http"
                                    ]
                                }
                            }
                        }
                    ]
                },
                "upstreams": {
                    "description": "upstreams: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nUpstreamPool is a collection of upstreams.\n",
                    "markdownDescription": "upstreams: `array`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nUpstreamPool is a collection of upstreams.\n",
                    "type": "array",
                    "items": {
                        "description": "\nupstreams is the list of backends to proxy to.\n\nUpstream bridges this proxy's configuration to the\nstate of the backend host it is correlated with.",
                        "markdownDescription": "  \nupstreams is the list of backends to proxy to.\n\nUpstream bridges this proxy's configuration to the\nstate of the backend host it is correlated with.",
                        "type": "object",
                        "properties": {
                            "dial": {
                                "description": "dial: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nThe [network address](/docs/conventions#network-addresses)\nto dial to connect to the upstream. Must represent precisely\none socket (i.e. no port ranges). A valid network address\neither has a host and port or is a unix socket address.\n\nPlaceholders may be used to make the upstream dynamic, but be\naware of the health check implications of this: a single\nupstream that represents numerous (perhaps arbitrary) backends\ncan be considered down if one or enough of the arbitrary\nbackends is down. Also be aware of open proxy vulnerabilities.",
                                "markdownDescription": "dial: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nThe [network address](/docs/conventions#network-addresses)\nto dial to connect to the upstream. Must represent precisely\none socket (i.e. no port ranges). A valid network address\neither has a host and port or is a unix socket address.\n\nPlaceholders may be used to make the upstream dynamic, but be\naware of the health check implications of this: a single\nupstream that represents numerous (perhaps arbitrary) backends\ncan be considered down if one or enough of the arbitrary\nbackends is down. Also be aware of open proxy vulnerabilities.",
                                "type": "string"
                            },
                            "lookup_srv": {
                                "description": "lookup_srv: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nIf DNS SRV records are used for service discovery with this\nupstream, specify the DNS name for which to look up SRV\nrecords here, instead of specifying a dial address.",
                                "markdownDescription": "lookup_srv: `string`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nIf DNS SRV records are used for service discovery with this\nupstream, specify the DNS name for which to look up SRV\nrecords here, instead of specifying a dial address.",
                                "type": "string"
                            },
                            "max_requests": {
                                "description": "max_requests: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)\nThe maximum number of simultaneous requests to allow to\nthis upstream. If set, overrides the global passive health\ncheck UnhealthyRequestCount value.",
                                "markdownDescription": "max_requests: `number`  \nModule: `http.handlers.reverse_proxy`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#Handler)  \nThe maximum number of simultaneous requests to allow to\nthis upstream. If set, overrides the global passive health\ncheck UnhealthyRequestCount value.",
                                "type": "number"
                            }
                        }
                    }
                }
            }
        },
        "http.handlers.rewrite": {
            "description": "rewrite: `object`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)\nRewrite is a middleware which can rewrite HTTP requests.\n\nThe Method and URI properties are \"setters\": the request URI\nwill be set to the given values. Other properties are \"modifiers\":\nthey modify existing files but do not explicitly specify what the\nresult will be. It is atypical to combine the use of setters and\nmodifiers in a single rewrite.\n",
            "markdownDescription": "rewrite: `object`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)  \nRewrite is a middleware which can rewrite HTTP requests.\n\nThe Method and URI properties are \"setters\": the request URI\nwill be set to the given values. Other properties are \"modifiers\":\nthey modify existing files but do not explicitly specify what the\nresult will be. It is atypical to combine the use of setters and\nmodifiers in a single rewrite.\n",
            "type": "object",
            "properties": {
                "method": {
                    "description": "method: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)\nChanges the request's HTTP verb.",
                    "markdownDescription": "method: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)  \nChanges the request's HTTP verb.",
                    "type": "string"
                },
                "strip_path_prefix": {
                    "description": "strip_path_prefix: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)\nStrips the given prefix from the beginning of the URI path.",
                    "markdownDescription": "strip_path_prefix: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)  \nStrips the given prefix from the beginning of the URI path.",
                    "type": "string"
                },
                "strip_path_suffix": {
                    "description": "strip_path_suffix: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)\nStrips the given suffix from the end of the URI path.",
                    "markdownDescription": "strip_path_suffix: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)  \nStrips the given suffix from the end of the URI path.",
                    "type": "string"
                },
                "uri": {
                    "description": "uri: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)\nChanges the request's URI, which consists of path and query string.\nOnly components of the URI that are specified will be changed.\nFor example, a value of \"/foo.html\" or \"foo.html\" will only change\nthe path and will preserve any existing query string. Similarly, a\nvalue of \"?a=b\" will only change the query string and will not affect\nthe path. Both can also be changed: \"/foo?a=b\" - this sets both the\npath and query string at the same time.\n\nYou can also use placeholders. For example, to preserve the existing\nquery string, you might use: \"?{http.request.uri.query}&a=b\". Any\nkey-value pairs you add to the query string will not overwrite\nexisting values (individual pairs are append-only).\n\nTo clear the query string, explicitly set an empty one: \"?\"",
                    "markdownDescription": "uri: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)  \nChanges the request's URI, which consists of path and query string.\nOnly components of the URI that are specified will be changed.\nFor example, a value of \"/foo.html\" or \"foo.html\" will only change\nthe path and will preserve any existing query string. Similarly, a\nvalue of \"?a=b\" will only change the query string and will not affect\nthe path. Both can also be changed: \"/foo?a=b\" - this sets both the\npath and query string at the same time.\n\nYou can also use placeholders. For example, to preserve the existing\nquery string, you might use: \"?{http.request.uri.query}&a=b\". Any\nkey-value pairs you add to the query string will not overwrite\nexisting values (individual pairs are append-only).\n\nTo clear the query string, explicitly set an empty one: \"?\"",
                    "type": "string"
                },
                "uri_substring": {
                    "description": "uri_substring: `array`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)\n",
                    "markdownDescription": "uri_substring: `array`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)  \n",
                    "type": "array",
                    "items": {
                        "description": "\nPerforms substring replacements on the URI.\n\nreplacer describes a simple and fast substring replacement.",
                        "markdownDescription": "  \nPerforms substring replacements on the URI.\n\nreplacer describes a simple and fast substring replacement.",
                        "type": "object",
                        "properties": {
                            "find": {
                                "description": "find: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)\nThe substring to find. Supports placeholders.",
                                "markdownDescription": "find: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)  \nThe substring to find. Supports placeholders.",
                                "type": "string"
                            },
                            "limit": {
                                "description": "limit: `number`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)\nMaximum number of replacements per string.\nSet to <= 0 for no limit (default).",
                                "markdownDescription": "limit: `number`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)  \nMaximum number of replacements per string.\nSet to <= 0 for no limit (default).",
                                "type": "number"
                            },
                            "replace": {
                                "description": "replace: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)\nThe substring to replace. Supports placeholders.",
                                "markdownDescription": "replace: `string`  \nModule: `http.handlers.rewrite`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/rewrite#Rewrite)  \nThe substring to replace. Supports placeholders.",
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "http.handlers.static_response": {
            "description": "static_response: `object`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)\nStaticResponse implements a simple responder for static responses.\n",
            "markdownDescription": "static_response: `object`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)  \nStaticResponse implements a simple responder for static responses.\n",
            "type": "object",
            "properties": {
                "body": {
                    "description": "body: `string`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)\nThe response body.",
                    "markdownDescription": "body: `string`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)  \nThe response body.",
                    "type": "string"
                },
                "close": {
                    "description": "close: `boolean`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)\nIf true, the server will close the client's connection\nafter writing the response.",
                    "markdownDescription": "close: `boolean`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)  \nIf true, the server will close the client's connection\nafter writing the response.",
                    "type": "boolean"
                },
                "headers": {
                    "description": "headers: `object`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)\nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                    "markdownDescription": "headers: `object`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)  \nA Header represents the key-value pairs in an HTTP header.\n\nThe keys should be in canonical form, as returned by\nCanonicalHeaderKey.\n",
                    "type": "object",
                    "additionalProperties": {
                        "description": "\nHeader fields to set on the response.",
                        "markdownDescription": "  \nHeader fields to set on the response.",
                        "type": "array",
                        "items": {
                            "description": "\n",
                            "markdownDescription": "  \n",
                            "type": "string"
                        }
                    }
                },
                "status_code": {
                    "description": "status_code: `string`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)\nThe HTTP status code to respond with. Can be an integer or,\nif needing to use a placeholder, a string.\n\nWeakString is a type that unmarshals any JSON value\nas a string literal, with the following exceptions:\n\n1. actual string values are decoded as strings; and\n2. null is decoded as empty string;\n\nand provides methods for getting the value as various\nprimitive types. However, using this type removes any\ntype safety as far as deserializing JSON is concerned.",
                    "markdownDescription": "status_code: `string`  \nModule: `http.handlers.static_response`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#StaticResponse)  \nThe HTTP status code to respond with. Can be an integer or,\nif needing to use a placeholder, a string.\n\nWeakString is a type that unmarshals any JSON value\nas a string literal, with the following exceptions:\n\n1. actual string values are decoded as strings; and\n2. null is decoded as empty string;\n\nand provides methods for getting the value as various\nprimitive types. However, using this type removes any\ntype safety as far as deserializing JSON is concerned.",
                    "type": "string"
                }
            }
        },
        "http.handlers.subroute": {
            "description": "subroute: `object`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)\nSubroute implements a handler that compiles and executes routes.\nThis is useful for a batch of routes that all inherit the same\nmatchers, or for multiple routes that should be treated as a\nsingle route.\n\nYou can also use subroutes to handle errors from its handlers.\nFirst the primary routes will be executed, and if they return an\nerror, the errors routes will be executed; in that case, an error\nis only returned to the entry point at the server if there is an\nadditional error returned from the errors routes.\n",
            "markdownDescription": "subroute: `object`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)  \nSubroute implements a handler that compiles and executes routes.\nThis is useful for a batch of routes that all inherit the same\nmatchers, or for multiple routes that should be treated as a\nsingle route.\n\nYou can also use subroutes to handle errors from its handlers.\nFirst the primary routes will be executed, and if they return an\nerror, the errors routes will be executed; in that case, an error\nis only returned to the entry point at the server if there is an\nadditional error returned from the errors routes.\n",
            "type": "object",
            "properties": {
                "errors": {
                    "description": "errors: `object`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)\nIf the primary routes return an error, error handling\ncan be promoted to this configuration instead.\n\nHTTPErrorConfig determines how to handle errors\nfrom the HTTP handlers.",
                    "markdownDescription": "errors: `object`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)  \nIf the primary routes return an error, error handling\ncan be promoted to this configuration instead.\n\nHTTPErrorConfig determines how to handle errors\nfrom the HTTP handlers.",
                    "type": "object",
                    "properties": {
                        "routes": {
                            "description": "routes: `array`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)\nRouteList is a list of server routes that can\ncreate a middleware chain.\n",
                            "markdownDescription": "routes: `array`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)  \nRouteList is a list of server routes that can\ncreate a middleware chain.\n",
                            "type": "array",
                            "items": {
                                "description": "\nThe routes to evaluate after the primary handler\nchain returns an error. In an error route, extra\nplaceholders are available:\n\nPlaceholder | Description\n------------|---------------\n`{http.error.status_code}` | The recommended HTTP status code\n`{http.error.status_text}` | The status text associated with the recommended status code\n`{http.error.message}`     | The error message\n`{http.error.trace}`       | The origin of the error\n`{http.error.id}`          | An identifier for this occurrence of the error\n\nRoute consists of a set of rules for matching HTTP requests,\na list of handlers to execute, and optional flow control\nparameters which customize the handling of HTTP requests\nin a highly flexible and performant manner.",
                                "markdownDescription": "  \nThe routes to evaluate after the primary handler\nchain returns an error. In an error route, extra\nplaceholders are available:\n\nPlaceholder | Description\n------------|---------------\n`{http.error.status_code}` | The recommended HTTP status code\n`{http.error.status_text}` | The status text associated with the recommended status code\n`{http.error.message}`     | The error message\n`{http.error.trace}`       | The origin of the error\n`{http.error.id}`          | An identifier for this occurrence of the error\n\nRoute consists of a set of rules for matching HTTP requests,\na list of handlers to execute, and optional flow control\nparameters which customize the handling of HTTP requests\nin a highly flexible and performant manner.",
                                "type": "object",
                                "properties": {
                                    "group": {
                                        "description": "group: `string`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)\ngroup is an optional name for a group to which this\nroute belongs. Grouping a route makes it mutually\nexclusive with others in its group; if a route belongs\nto a group, only the first matching route in that group\nwill be executed.",
                                        "markdownDescription": "group: `string`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)  \ngroup is an optional name for a group to which this\nroute belongs. Grouping a route makes it mutually\nexclusive with others in its group; if a route belongs\nto a group, only the first matching route in that group\nwill be executed.",
                                        "type": "string"
                                    },
                                    "handle": {
                                        "description": "handle: `array`  \nModule: `http.handlers`  \n\n",
                                        "markdownDescription": "handle: `array`  \nModule: `http.handlers`  \n  \n",
                                        "type": "array",
                                        "items": {
                                            "description": "\nThe list of handlers for this route. Upon matching a request, they are chained\ntogether in a middleware fashion: requests flow from the first handler to the last\n(top of the list to the bottom), with the possibility that any handler could stop\nthe chain and/or return an error. Responses flow back through the chain (bottom of\nthe list to the top) as they are written out to the client.\n\nNot all handlers call the next handler in the chain. For example, the reverse_proxy\nhandler always sends a request upstream or returns an error. Thus, configuring\nhandlers after reverse_proxy in the same route is illogical, since they would never\nbe executed. You will want to put handlers which originate the response at the very\nend of your route(s). The documentation for a module should state whether it invokes\nthe next handler, but sometimes it is common sense.\n\nSome handlers manipulate the response. Remember that requests flow down the list, and\nresponses flow up the list.\n\nFor example, if you wanted to use both `templates` and `encode` handlers, you would\nneed to put `templates` after `encode` in your route, because responses flow up.\nThus, `templates` will be able to parse and execute the plain-text response as a\ntemplate, and then return it up to the `encode` handler which will then compress it\ninto a binary format.\n\nIf `templates` came before `encode`, then `encode` would write a compressed,\nbinary-encoded response to `templates` which would not be able to parse the response\nproperly.\n\nThe correct order, then, is this:\n\n    [\n        {\"handler\": \"encode\"},\n        {\"handler\": \"templates\"},\n        {\"handler\": \"file_server\"}\n    ]\n\nThe request flows ⬇️ DOWN (`encode` -> `templates` -> `file_server`).\n\n1. First, `encode` will choose how to `encode` the response and wrap the response.\n2. Then, `templates` will wrap the response with a buffer.\n3. Finally, `file_server` will originate the content from a file.\n\nThe response flows ⬆️ UP (`file_server` -> `templates` -> `encode`):\n\n1. First, `file_server` will write the file to the response.\n2. That write will be buffered and then executed by `templates`.\n3. Lastly, the write from `templates` will flow into `encode` which will compress the stream.\n\nIf you think of routes in this way, it will be easy and even fun to solve the puzzle of writing correct routes.",
                                            "markdownDescription": "  \nThe list of handlers for this route. Upon matching a request, they are chained\ntogether in a middleware fashion: requests flow from the first handler to the last\n(top of the list to the bottom), with the possibility that any handler could stop\nthe chain and/or return an error. Responses flow back through the chain (bottom of\nthe list to the top) as they are written out to the client.\n\nNot all handlers call the next handler in the chain. For example, the reverse_proxy\nhandler always sends a request upstream or returns an error. Thus, configuring\nhandlers after reverse_proxy in the same route is illogical, since they would never\nbe executed. You will want to put handlers which originate the response at the very\nend of your route(s). The documentation for a module should state whether it invokes\nthe next handler, but sometimes it is common sense.\n\nSome handlers manipulate the response. Remember that requests flow down the list, and\nresponses flow up the list.\n\nFor example, if you wanted to use both `templates` and `encode` handlers, you would\nneed to put `templates` after `encode` in your route, because responses flow up.\nThus, `templates` will be able to parse and execute the plain-text response as a\ntemplate, and then return it up to the `encode` handler which will then compress it\ninto a binary format.\n\nIf `templates` came before `encode`, then `encode` would write a compressed,\nbinary-encoded response to `templates` which would not be able to parse the response\nproperly.\n\nThe correct order, then, is this:\n\n    [\n        {\"handler\": \"encode\"},\n        {\"handler\": \"templates\"},\n        {\"handler\": \"file_server\"}\n    ]\n\nThe request flows ⬇️ DOWN (`encode` -> `templates` -> `file_server`).\n\n1. First, `encode` will choose how to `encode` the response and wrap the response.\n2. Then, `templates` will wrap the response with a buffer.\n3. Finally, `file_server` will originate the content from a file.\n\nThe response flows ⬆️ UP (`file_server` -> `templates` -> `encode`):\n\n1. First, `file_server` will write the file to the response.\n2. That write will be buffered and then executed by `templates`.\n3. Lastly, the write from `templates` will flow into `encode` which will compress the stream.\n\nIf you think of routes in this way, it will be easy and even fun to solve the puzzle of writing correct routes.",
                                            "required": [
                                                "handler"
                                            ],
                                            "allOf": [
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "authentication"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.authentication"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "templates"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.templates"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "visitor_ip"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.visitor_ip"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "error"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.error"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "request_body"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.request_body"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "json_parse"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.json_parse"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "rewrite"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.rewrite"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "subroute"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.subroute"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "vars"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.vars"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "exec"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.exec"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "hmac"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.hmac"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "headers"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.headers"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "reverse_proxy"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.reverse_proxy"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "static_response"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.static_response"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "encode"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.encode"
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": {
                                                            "handler": {
                                                                "const": "file_server"
                                                            }
                                                        }
                                                    },
                                                    "then": {
                                                        "$ref": "#/definitions/http.handlers.file_server"
                                                    }
                                                },
                                                {
                                                    "properties": {
                                                        "handler": {
                                                            "description": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                            "markdownDescription": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                            "type": "string",
                                                            "enum": [
                                                                "authentication",
                                                                "templates",
                                                                "visitor_ip",
                                                                "error",
                                                                "request_body",
                                                                "json_parse",
                                                                "rewrite",
                                                                "subroute",
                                                                "vars",
                                                                "exec",
                                                                "hmac",
                                                                "headers",
                                                                "reverse_proxy",
                                                                "static_response",
                                                                "encode",
                                                                "file_server"
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "match": {
                                        "description": "match: `array`  \nModule: `http.matchers`  \n\nRawMatcherSets is a group of matcher sets\nin their raw, JSON form.\n",
                                        "markdownDescription": "match: `array`  \nModule: `http.matchers`  \n  \nRawMatcherSets is a group of matcher sets\nin their raw, JSON form.\n",
                                        "type": "array",
                                        "items": {
                                            "description": "\nThe matcher sets which will be used to qualify this\nroute for a request (essentially the \"if\" statement\nof this route). Each matcher set is OR'ed, but matchers\nwithin a set are AND'ed together.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                                            "markdownDescription": "  \nThe matcher sets which will be used to qualify this\nroute for a request (essentially the \"if\" statement\nof this route). Each matcher set is OR'ed, but matchers\nwithin a set are AND'ed together.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                                            "properties": {
                                                "execnopmatch": {
                                                    "$ref": "#/definitions/http.matchers.execnopmatch"
                                                },
                                                "expression": {
                                                    "$ref": "#/definitions/http.matchers.expression"
                                                },
                                                "file": {
                                                    "$ref": "#/definitions/http.matchers.file"
                                                },
                                                "header": {
                                                    "$ref": "#/definitions/http.matchers.header"
                                                },
                                                "header_regexp": {
                                                    "$ref": "#/definitions/http.matchers.header_regexp"
                                                },
                                                "host": {
                                                    "$ref": "#/definitions/http.matchers.host"
                                                },
                                                "method": {
                                                    "$ref": "#/definitions/http.matchers.method"
                                                },
                                                "not": {
                                                    "$ref": "#/definitions/http.matchers.not"
                                                },
                                                "path": {
                                                    "$ref": "#/definitions/http.matchers.path"
                                                },
                                                "path_regexp": {
                                                    "$ref": "#/definitions/http.matchers.path_regexp"
                                                },
                                                "protocol": {
                                                    "$ref": "#/definitions/http.matchers.protocol"
                                                },
                                                "query": {
                                                    "$ref": "#/definitions/http.matchers.query"
                                                },
                                                "remote_ip": {
                                                    "$ref": "#/definitions/http.matchers.remote_ip"
                                                },
                                                "vars": {
                                                    "$ref": "#/definitions/http.matchers.vars"
                                                },
                                                "vars_regexp": {
                                                    "$ref": "#/definitions/http.matchers.vars_regexp"
                                                }
                                            }
                                        }
                                    },
                                    "terminal": {
                                        "description": "terminal: `boolean`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)\nIf true, no more routes will be executed after this one.",
                                        "markdownDescription": "terminal: `boolean`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)  \nIf true, no more routes will be executed after this one.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "routes": {
                    "description": "routes: `array`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)\nRouteList is a list of server routes that can\ncreate a middleware chain.\n",
                    "markdownDescription": "routes: `array`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)  \nRouteList is a list of server routes that can\ncreate a middleware chain.\n",
                    "type": "array",
                    "items": {
                        "description": "\nThe primary list of routes to compile and execute.\n\nRoute consists of a set of rules for matching HTTP requests,\na list of handlers to execute, and optional flow control\nparameters which customize the handling of HTTP requests\nin a highly flexible and performant manner.",
                        "markdownDescription": "  \nThe primary list of routes to compile and execute.\n\nRoute consists of a set of rules for matching HTTP requests,\na list of handlers to execute, and optional flow control\nparameters which customize the handling of HTTP requests\nin a highly flexible and performant manner.",
                        "type": "object",
                        "properties": {
                            "group": {
                                "description": "group: `string`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)\ngroup is an optional name for a group to which this\nroute belongs. Grouping a route makes it mutually\nexclusive with others in its group; if a route belongs\nto a group, only the first matching route in that group\nwill be executed.",
                                "markdownDescription": "group: `string`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)  \ngroup is an optional name for a group to which this\nroute belongs. Grouping a route makes it mutually\nexclusive with others in its group; if a route belongs\nto a group, only the first matching route in that group\nwill be executed.",
                                "type": "string"
                            },
                            "handle": {
                                "description": "handle: `array`  \nModule: `http.handlers`  \n\n",
                                "markdownDescription": "handle: `array`  \nModule: `http.handlers`  \n  \n",
                                "type": "array",
                                "items": {
                                    "description": "\nThe list of handlers for this route. Upon matching a request, they are chained\ntogether in a middleware fashion: requests flow from the first handler to the last\n(top of the list to the bottom), with the possibility that any handler could stop\nthe chain and/or return an error. Responses flow back through the chain (bottom of\nthe list to the top) as they are written out to the client.\n\nNot all handlers call the next handler in the chain. For example, the reverse_proxy\nhandler always sends a request upstream or returns an error. Thus, configuring\nhandlers after reverse_proxy in the same route is illogical, since they would never\nbe executed. You will want to put handlers which originate the response at the very\nend of your route(s). The documentation for a module should state whether it invokes\nthe next handler, but sometimes it is common sense.\n\nSome handlers manipulate the response. Remember that requests flow down the list, and\nresponses flow up the list.\n\nFor example, if you wanted to use both `templates` and `encode` handlers, you would\nneed to put `templates` after `encode` in your route, because responses flow up.\nThus, `templates` will be able to parse and execute the plain-text response as a\ntemplate, and then return it up to the `encode` handler which will then compress it\ninto a binary format.\n\nIf `templates` came before `encode`, then `encode` would write a compressed,\nbinary-encoded response to `templates` which would not be able to parse the response\nproperly.\n\nThe correct order, then, is this:\n\n    [\n        {\"handler\": \"encode\"},\n        {\"handler\": \"templates\"},\n        {\"handler\": \"file_server\"}\n    ]\n\nThe request flows ⬇️ DOWN (`encode` -> `templates` -> `file_server`).\n\n1. First, `encode` will choose how to `encode` the response and wrap the response.\n2. Then, `templates` will wrap the response with a buffer.\n3. Finally, `file_server` will originate the content from a file.\n\nThe response flows ⬆️ UP (`file_server` -> `templates` -> `encode`):\n\n1. First, `file_server` will write the file to the response.\n2. That write will be buffered and then executed by `templates`.\n3. Lastly, the write from `templates` will flow into `encode` which will compress the stream.\n\nIf you think of routes in this way, it will be easy and even fun to solve the puzzle of writing correct routes.",
                                    "markdownDescription": "  \nThe list of handlers for this route. Upon matching a request, they are chained\ntogether in a middleware fashion: requests flow from the first handler to the last\n(top of the list to the bottom), with the possibility that any handler could stop\nthe chain and/or return an error. Responses flow back through the chain (bottom of\nthe list to the top) as they are written out to the client.\n\nNot all handlers call the next handler in the chain. For example, the reverse_proxy\nhandler always sends a request upstream or returns an error. Thus, configuring\nhandlers after reverse_proxy in the same route is illogical, since they would never\nbe executed. You will want to put handlers which originate the response at the very\nend of your route(s). The documentation for a module should state whether it invokes\nthe next handler, but sometimes it is common sense.\n\nSome handlers manipulate the response. Remember that requests flow down the list, and\nresponses flow up the list.\n\nFor example, if you wanted to use both `templates` and `encode` handlers, you would\nneed to put `templates` after `encode` in your route, because responses flow up.\nThus, `templates` will be able to parse and execute the plain-text response as a\ntemplate, and then return it up to the `encode` handler which will then compress it\ninto a binary format.\n\nIf `templates` came before `encode`, then `encode` would write a compressed,\nbinary-encoded response to `templates` which would not be able to parse the response\nproperly.\n\nThe correct order, then, is this:\n\n    [\n        {\"handler\": \"encode\"},\n        {\"handler\": \"templates\"},\n        {\"handler\": \"file_server\"}\n    ]\n\nThe request flows ⬇️ DOWN (`encode` -> `templates` -> `file_server`).\n\n1. First, `encode` will choose how to `encode` the response and wrap the response.\n2. Then, `templates` will wrap the response with a buffer.\n3. Finally, `file_server` will originate the content from a file.\n\nThe response flows ⬆️ UP (`file_server` -> `templates` -> `encode`):\n\n1. First, `file_server` will write the file to the response.\n2. That write will be buffered and then executed by `templates`.\n3. Lastly, the write from `templates` will flow into `encode` which will compress the stream.\n\nIf you think of routes in this way, it will be easy and even fun to solve the puzzle of writing correct routes.",
                                    "required": [
                                        "handler"
                                    ],
                                    "allOf": [
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "encode"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.encode"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "file_server"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.file_server"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "headers"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.headers"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "reverse_proxy"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.reverse_proxy"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "static_response"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.static_response"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "authentication"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.authentication"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "error"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.error"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "request_body"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.request_body"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "templates"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.templates"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "visitor_ip"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.visitor_ip"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "exec"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.exec"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "hmac"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.hmac"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "json_parse"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.json_parse"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "rewrite"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.rewrite"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "subroute"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.subroute"
                                            }
                                        },
                                        {
                                            "if": {
                                                "properties": {
                                                    "handler": {
                                                        "const": "vars"
                                                    }
                                                }
                                            },
                                            "then": {
                                                "$ref": "#/definitions/http.handlers.vars"
                                            }
                                        },
                                        {
                                            "properties": {
                                                "handler": {
                                                    "description": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                    "markdownDescription": "`handle` key to identify specified module.  \nhandler: `string`  \nModule: `http.handlers`",
                                                    "type": "string",
                                                    "enum": [
                                                        "encode",
                                                        "file_server",
                                                        "headers",
                                                        "reverse_proxy",
                                                        "static_response",
                                                        "authentication",
                                                        "error",
                                                        "request_body",
                                                        "templates",
                                                        "visitor_ip",
                                                        "exec",
                                                        "hmac",
                                                        "json_parse",
                                                        "rewrite",
                                                        "subroute",
                                                        "vars"
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            "match": {
                                "description": "match: `array`  \nModule: `http.matchers`  \n\nRawMatcherSets is a group of matcher sets\nin their raw, JSON form.\n",
                                "markdownDescription": "match: `array`  \nModule: `http.matchers`  \n  \nRawMatcherSets is a group of matcher sets\nin their raw, JSON form.\n",
                                "type": "array",
                                "items": {
                                    "description": "\nThe matcher sets which will be used to qualify this\nroute for a request (essentially the \"if\" statement\nof this route). Each matcher set is OR'ed, but matchers\nwithin a set are AND'ed together.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                                    "markdownDescription": "  \nThe matcher sets which will be used to qualify this\nroute for a request (essentially the \"if\" statement\nof this route). Each matcher set is OR'ed, but matchers\nwithin a set are AND'ed together.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                                    "properties": {
                                        "execnopmatch": {
                                            "$ref": "#/definitions/http.matchers.execnopmatch"
                                        },
                                        "expression": {
                                            "$ref": "#/definitions/http.matchers.expression"
                                        },
                                        "file": {
                                            "$ref": "#/definitions/http.matchers.file"
                                        },
                                        "header": {
                                            "$ref": "#/definitions/http.matchers.header"
                                        },
                                        "header_regexp": {
                                            "$ref": "#/definitions/http.matchers.header_regexp"
                                        },
                                        "host": {
                                            "$ref": "#/definitions/http.matchers.host"
                                        },
                                        "method": {
                                            "$ref": "#/definitions/http.matchers.method"
                                        },
                                        "not": {
                                            "$ref": "#/definitions/http.matchers.not"
                                        },
                                        "path": {
                                            "$ref": "#/definitions/http.matchers.path"
                                        },
                                        "path_regexp": {
                                            "$ref": "#/definitions/http.matchers.path_regexp"
                                        },
                                        "protocol": {
                                            "$ref": "#/definitions/http.matchers.protocol"
                                        },
                                        "query": {
                                            "$ref": "#/definitions/http.matchers.query"
                                        },
                                        "remote_ip": {
                                            "$ref": "#/definitions/http.matchers.remote_ip"
                                        },
                                        "vars": {
                                            "$ref": "#/definitions/http.matchers.vars"
                                        },
                                        "vars_regexp": {
                                            "$ref": "#/definitions/http.matchers.vars_regexp"
                                        }
                                    }
                                }
                            },
                            "terminal": {
                                "description": "terminal: `boolean`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)\nIf true, no more routes will be executed after this one.",
                                "markdownDescription": "terminal: `boolean`  \nModule: `http.handlers.subroute`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#Subroute)  \nIf true, no more routes will be executed after this one.",
                                "type": "boolean"
                            }
                        }
                    }
                }
            }
        },
        "http.handlers.templates": {
            "description": "templates: `object`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)\nTemplates is a middleware which executes response bodies as Go templates.\nThe syntax is documented in the Go standard library's\n[text/template package](https://golang.org/pkg/text/template/).\n\n⚠️ Template functions/actions are still experimental, so they are subject to change.\n\n[All Sprig functions](https://masterminds.github.io/sprig/) are supported.\n\nIn addition to the standard functions and Sprig functions, Caddy adds\nextra functions and data that are available to a template:\n\n##### `.Args`\n\nAccess arguments passed to this page/context, for example as the result of a `include`.\n\n```\n{{.Args 0}} // first argument\n```\n\n##### `.Cookie`\n\nGets the value of a cookie by name.\n\n```\n{{.Cookie \"cookiename\"}}\n```\n\n##### `env`\n\nGets an environment variable.\n\n```\n{{env \"VAR_NAME\"}}\n```\n\n##### `.Host`\n\nReturns the hostname portion (no port) of the Host header of the HTTP request.\n\n```\n{{.Host}}\n```\n\n##### `httpInclude`\n\nIncludes the contents of another file by making a virtual HTTP request (also known as a sub-request). The URI path must exist on the same virtual server because the request does not use sockets; instead, the request is crafted in memory and the handler is invoked directly for increased efficiency.\n\n```\n{{httpInclude \"/foo/bar?q=val\"}}\n```\n\n##### `include`\n\nIncludes the contents of another file. Optionally can pass key-value pairs as arguments to be accessed by the included file.\n\n```\n{{include \"path/to/file.html\"}}  // no arguments\n{{include \"path/to/file.html\" \"arg1\" 2 \"value 3\"}}  // with arguments\n```\n\n##### `listFiles`\n\nReturns a list of the files in the given directory, which is relative to the template context's file root.\n\n```\n{{listFiles \"/mydir\"}}\n```\n\n##### `markdown`\n\nRenders the given Markdown text as HTML.\n\n```\n{{markdown \"My _markdown_ text\"}}\n```\n\n##### `.RemoteIP`\n\nReturns the client's IP address.\n\n```\n{{.RemoteIP}}\n```\n\n##### `.Req`\n\nAccesses the current HTTP request, which has various fields, including:\n\n   - `.Method` - the method\n   - `.URL` - the URL, which in turn has component fields (Scheme, Host, Path, etc.)\n   - `.Header` - the header fields\n   - `.Host` - the Host or :authority header of the request\n\n```\n{{.Req.Header.Get \"User-Agent\"}}\n```\n\n##### `.RespHeader.Add`\n\nAdds a header field to the HTTP response.\n\n```\n{{.RespHeader.Add \"Field-Name\" \"val\"}}\n```\n\n##### `.RespHeader.Del`\n\nDeletes a header field on the HTTP response.\n\n```\n{{.RespHeader.Del \"Field-Name\"}}\n```\n\n##### `.RespHeader.Set`\n\nSets a header field on the HTTP response, replacing any existing value.\n\n```\n{{.RespHeader.Set \"Field-Name\" \"val\"}}\n```\n\n##### `splitFrontMatter`\n\nSplits front matter out from the body. Front matter is metadata that appears at the very beginning of a file or string. Front matter can be in YAML, TOML, or JSON formats:\n\n**TOML** front matter starts and ends with `+++`:\n\n```\n+++\ntemplate = \"blog\"\ntitle = \"Blog Homepage\"\nsitename = \"A Caddy site\"\n+++\n```\n\n**YAML** is surrounded by `---`:\n\n```\n---\ntemplate: blog\ntitle: Blog Homepage\nsitename: A Caddy site\n---\n```\n\n**JSON** is simply `{` and `}`:\n\n```\n{\n\t\"template\": \"blog\",\n\t\"title\": \"Blog Homepage\",\n\t\"sitename\": \"A Caddy site\"\n}\n```\n\nThe resulting front matter will be made available like so:\n\n- `.Meta` to access the metadata fields, for example: `{{$parsed.Meta.title}}`\n- `.Body` to access the body after the front matter, for example: `{{markdown $parsed.Body}}`\n\n##### `stripHTML`\n\nRemoves HTML from a string.\n\n```\n{{stripHTML \"Shows <b>only</b> text content\"}}\n```\n",
            "markdownDescription": "templates: `object`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)  \nTemplates is a middleware which executes response bodies as Go templates.\nThe syntax is documented in the Go standard library's\n[text/template package](https://golang.org/pkg/text/template/).\n\n⚠️ Template functions/actions are still experimental, so they are subject to change.\n\n[All Sprig functions](https://masterminds.github.io/sprig/) are supported.\n\nIn addition to the standard functions and Sprig functions, Caddy adds\nextra functions and data that are available to a template:\n\n##### `.Args`\n\nAccess arguments passed to this page/context, for example as the result of a `include`.\n\n```\n{{.Args 0}} // first argument\n```\n\n##### `.Cookie`\n\nGets the value of a cookie by name.\n\n```\n{{.Cookie \"cookiename\"}}\n```\n\n##### `env`\n\nGets an environment variable.\n\n```\n{{env \"VAR_NAME\"}}\n```\n\n##### `.Host`\n\nReturns the hostname portion (no port) of the Host header of the HTTP request.\n\n```\n{{.Host}}\n```\n\n##### `httpInclude`\n\nIncludes the contents of another file by making a virtual HTTP request (also known as a sub-request). The URI path must exist on the same virtual server because the request does not use sockets; instead, the request is crafted in memory and the handler is invoked directly for increased efficiency.\n\n```\n{{httpInclude \"/foo/bar?q=val\"}}\n```\n\n##### `include`\n\nIncludes the contents of another file. Optionally can pass key-value pairs as arguments to be accessed by the included file.\n\n```\n{{include \"path/to/file.html\"}}  // no arguments\n{{include \"path/to/file.html\" \"arg1\" 2 \"value 3\"}}  // with arguments\n```\n\n##### `listFiles`\n\nReturns a list of the files in the given directory, which is relative to the template context's file root.\n\n```\n{{listFiles \"/mydir\"}}\n```\n\n##### `markdown`\n\nRenders the given Markdown text as HTML.\n\n```\n{{markdown \"My _markdown_ text\"}}\n```\n\n##### `.RemoteIP`\n\nReturns the client's IP address.\n\n```\n{{.RemoteIP}}\n```\n\n##### `.Req`\n\nAccesses the current HTTP request, which has various fields, including:\n\n   - `.Method` - the method\n   - `.URL` - the URL, which in turn has component fields (Scheme, Host, Path, etc.)\n   - `.Header` - the header fields\n   - `.Host` - the Host or :authority header of the request\n\n```\n{{.Req.Header.Get \"User-Agent\"}}\n```\n\n##### `.RespHeader.Add`\n\nAdds a header field to the HTTP response.\n\n```\n{{.RespHeader.Add \"Field-Name\" \"val\"}}\n```\n\n##### `.RespHeader.Del`\n\nDeletes a header field on the HTTP response.\n\n```\n{{.RespHeader.Del \"Field-Name\"}}\n```\n\n##### `.RespHeader.Set`\n\nSets a header field on the HTTP response, replacing any existing value.\n\n```\n{{.RespHeader.Set \"Field-Name\" \"val\"}}\n```\n\n##### `splitFrontMatter`\n\nSplits front matter out from the body. Front matter is metadata that appears at the very beginning of a file or string. Front matter can be in YAML, TOML, or JSON formats:\n\n**TOML** front matter starts and ends with `+++`:\n\n```\n+++\ntemplate = \"blog\"\ntitle = \"Blog Homepage\"\nsitename = \"A Caddy site\"\n+++\n```\n\n**YAML** is surrounded by `---`:\n\n```\n---\ntemplate: blog\ntitle: Blog Homepage\nsitename: A Caddy site\n---\n```\n\n**JSON** is simply `{` and `}`:\n\n```\n{\n\t\"template\": \"blog\",\n\t\"title\": \"Blog Homepage\",\n\t\"sitename\": \"A Caddy site\"\n}\n```\n\nThe resulting front matter will be made available like so:\n\n- `.Meta` to access the metadata fields, for example: `{{$parsed.Meta.title}}`\n- `.Body` to access the body after the front matter, for example: `{{markdown $parsed.Body}}`\n\n##### `stripHTML`\n\nRemoves HTML from a string.\n\n```\n{{stripHTML \"Shows <b>only</b> text content\"}}\n```\n",
            "type": "object",
            "properties": {
                "delimiters": {
                    "description": "delimiters: `array`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)\n",
                    "markdownDescription": "delimiters: `array`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)  \n",
                    "type": "array",
                    "items": {
                        "description": "\nThe template action delimiters.",
                        "markdownDescription": "  \nThe template action delimiters.",
                        "type": "string"
                    }
                },
                "file_root": {
                    "description": "file_root: `string`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)\nThe root path from which to load files. Required if template functions\naccessing the file system are used (such as include). Default is\n`{http.vars.root}` if set, or current working directory otherwise.",
                    "markdownDescription": "file_root: `string`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)  \nThe root path from which to load files. Required if template functions\naccessing the file system are used (such as include). Default is\n`{http.vars.root}` if set, or current working directory otherwise.",
                    "type": "string"
                },
                "mime_types": {
                    "description": "mime_types: `array`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)\n",
                    "markdownDescription": "mime_types: `array`  \nModule: `http.handlers.templates`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/templates#Templates)  \n",
                    "type": "array",
                    "items": {
                        "description": "\nThe MIME types for which to render templates. It is important to use\nthis if the route matchers do not exclude images or other binary files.\nDefault is text/plain, text/markdown, and text/html.",
                        "markdownDescription": "  \nThe MIME types for which to render templates. It is important to use\nthis if the route matchers do not exclude images or other binary files.\nDefault is text/plain, text/markdown, and text/html.",
                        "type": "string"
                    }
                }
            }
        },
        "http.handlers.vars": {
            "description": "vars: `object`  \nModule: `http.handlers.vars`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#VarsMiddleware)\nVarsMiddleware is an HTTP middleware which sets variables\nin the context, mainly for use by placeholders. The\nplaceholders have the form: `{http.vars.variable_name}`\n",
            "markdownDescription": "vars: `object`  \nModule: `http.handlers.vars`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#VarsMiddleware)  \nVarsMiddleware is an HTTP middleware which sets variables\nin the context, mainly for use by placeholders. The\nplaceholders have the form: `{http.vars.variable_name}`\n",
            "type": "object",
            "additionalProperties": {
                "description": "\n",
                "markdownDescription": "  \n"
            }
        },
        "http.handlers.visitor_ip": {
            "description": "visitor_ip: `object`  \nModule: `http.handlers.visitor_ip`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-webhooks#Middleware)",
            "markdownDescription": "visitor_ip: `object`  \nModule: `http.handlers.visitor_ip`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-webhooks#Middleware)",
            "type": "object",
            "properties": {
                "output": {
                    "description": "output: `string`  \nModule: `http.handlers.visitor_ip`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-webhooks#Middleware)",
                    "markdownDescription": "output: `string`  \nModule: `http.handlers.visitor_ip`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-webhooks#Middleware)",
                    "type": "string"
                }
            }
        },
        "http.matchers.execnopmatch": {
            "description": "execnopmatch: `object`  \nModule: `http.matchers.execnopmatch`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#NopMatcher)",
            "markdownDescription": "execnopmatch: `object`  \nModule: `http.matchers.execnopmatch`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#NopMatcher)",
            "type": "object",
            "properties": {
                "label": {
                    "description": "label: `string`  \nModule: `http.matchers.execnopmatch`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#NopMatcher)",
                    "markdownDescription": "label: `string`  \nModule: `http.matchers.execnopmatch`  \n[godoc](https://pkg.go.dev/github.com/abiosoft/caddy-exec#NopMatcher)",
                    "type": "string"
                }
            }
        },
        "http.matchers.expression": {
            "description": "expression: `object`  \nModule: `http.matchers.expression`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchExpression)\nMatchExpression matches requests by evaluating a\n[CEL](https://github.com/google/cel-spec) expression.\nThis enables complex logic to be expressed using a comfortable,\nfamiliar syntax.\n\nThis matcher's JSON interface is actually a string, not a struct.\nThe generated docs are not correct because this type has custom\nmarshaling logic.\n\nCOMPATIBILITY NOTE: This module is still experimental and is not\nsubject to Caddy's compatibility guarantee.\n",
            "markdownDescription": "expression: `object`  \nModule: `http.matchers.expression`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchExpression)  \nMatchExpression matches requests by evaluating a\n[CEL](https://github.com/google/cel-spec) expression.\nThis enables complex logic to be expressed using a comfortable,\nfamiliar syntax.\n\nThis matcher's JSON interface is actually a string, not a struct.\nThe generated docs are not correct because this type has custom\nmarshaling logic.\n\nCOMPATIBILITY NOTE: This module is still experimental and is not\nsubject to Caddy's compatibility guarantee.\n",
            "type": "object"
        },
        "http.matchers.file": {
            "description": "file: `object`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)\nMatchFile is an HTTP request matcher that can match\nrequests based upon file existence.\n\nUpon matching, two new placeholders will be made\navailable:\n\n- `{http.matchers.file.relative}` The root-relative\npath of the file. This is often useful when rewriting\nrequests.\n- `{http.matchers.file.absolute}` The absolute path\nof the matched file.\n",
            "markdownDescription": "file: `object`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)  \nMatchFile is an HTTP request matcher that can match\nrequests based upon file existence.\n\nUpon matching, two new placeholders will be made\navailable:\n\n- `{http.matchers.file.relative}` The root-relative\npath of the file. This is often useful when rewriting\nrequests.\n- `{http.matchers.file.absolute}` The absolute path\nof the matched file.\n",
            "type": "object",
            "properties": {
                "root": {
                    "description": "root: `string`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)\nThe root directory, used for creating absolute\nfile paths, and required when working with\nrelative paths; if not specified, `{http.vars.root}`\nwill be used, if set; otherwise, the current\ndirectory is assumed. Accepts placeholders.",
                    "markdownDescription": "root: `string`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)  \nThe root directory, used for creating absolute\nfile paths, and required when working with\nrelative paths; if not specified, `{http.vars.root}`\nwill be used, if set; otherwise, the current\ndirectory is assumed. Accepts placeholders.",
                    "type": "string"
                },
                "split_path": {
                    "description": "split_path: `array`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)\n",
                    "markdownDescription": "split_path: `array`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)  \n",
                    "type": "array",
                    "items": {
                        "description": "\nA list of delimiters to use to split the path in two\nwhen trying files. If empty, no splitting will\noccur, and the path will be tried as-is. For each\nsplit value, the left-hand side of the split,\nincluding the split value, will be the path tried.\nFor example, the path `/remote.php/dav/` using the\nsplit value `.php` would try the file `/remote.php`.\nEach delimiter must appear at the end of a URI path\ncomponent in order to be used as a split delimiter.",
                        "markdownDescription": "  \nA list of delimiters to use to split the path in two\nwhen trying files. If empty, no splitting will\noccur, and the path will be tried as-is. For each\nsplit value, the left-hand side of the split,\nincluding the split value, will be the path tried.\nFor example, the path `/remote.php/dav/` using the\nsplit value `.php` would try the file `/remote.php`.\nEach delimiter must appear at the end of a URI path\ncomponent in order to be used as a split delimiter.",
                        "type": "string"
                    }
                },
                "try_files": {
                    "description": "try_files: `array`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)\n",
                    "markdownDescription": "try_files: `array`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)  \n",
                    "type": "array",
                    "items": {
                        "description": "\nThe list of files to try. Each path here is\nconsidered related to Root. If nil, the request\nURL's path will be assumed. Files and\ndirectories are treated distinctly, so to match\na directory, the filepath MUST end in a forward\nslash `/`. To match a regular file, there must\nbe no trailing slash. Accepts placeholders.",
                        "markdownDescription": "  \nThe list of files to try. Each path here is\nconsidered related to Root. If nil, the request\nURL's path will be assumed. Files and\ndirectories are treated distinctly, so to match\na directory, the filepath MUST end in a forward\nslash `/`. To match a regular file, there must\nbe no trailing slash. Accepts placeholders.",
                        "type": "string"
                    }
                },
                "try_policy": {
                    "description": "try_policy: `string`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)\nHow to choose a file in TryFiles. Can be:\n\n- first_exist\n- smallest_size\n- largest_size\n- most_recently_modified\n\nDefault is first_exist.",
                    "markdownDescription": "try_policy: `string`  \nModule: `http.matchers.file`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/fileserver#MatchFile)  \nHow to choose a file in TryFiles. Can be:\n\n- first_exist\n- smallest_size\n- largest_size\n- most_recently_modified\n\nDefault is first_exist.",
                    "type": "string"
                }
            }
        },
        "http.matchers.header": {
            "description": "header: `object`  \nModule: `http.matchers.header`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeader)\nMatchHeader matches requests by header fields. It performs fast,\nexact string comparisons of the field values. Fast prefix, suffix,\nand substring matches can also be done by suffixing, prefixing, or\nsurrounding the value with the wildcard `*` character, respectively.\nIf a list is null, the header must not exist. If the list is empty,\nthe field must simply exist, regardless of its value.\n",
            "markdownDescription": "header: `object`  \nModule: `http.matchers.header`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeader)  \nMatchHeader matches requests by header fields. It performs fast,\nexact string comparisons of the field values. Fast prefix, suffix,\nand substring matches can also be done by suffixing, prefixing, or\nsurrounding the value with the wildcard `*` character, respectively.\nIf a list is null, the header must not exist. If the list is empty,\nthe field must simply exist, regardless of its value.\n",
            "type": "object",
            "additionalProperties": {
                "description": "\n",
                "markdownDescription": "  \n",
                "type": "array",
                "items": {
                    "description": "\n",
                    "markdownDescription": "  \n",
                    "type": "string"
                }
            }
        },
        "http.matchers.header_regexp": {
            "description": "header_regexp: `object`  \nModule: `http.matchers.header_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeaderRE)\nMatchHeaderRE matches requests by a regular expression on header fields.\n\nUpon a match, it adds placeholders to the request: `{http.regexp.name.capture_group}`\nwhere `name` is the regular expression's name, and `capture_group` is either\nthe named or positional capture group from the expression itself. If no name\nis given, then the placeholder omits the name: `{http.regexp.capture_group}`\n(potentially leading to collisions).\n",
            "markdownDescription": "header_regexp: `object`  \nModule: `http.matchers.header_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeaderRE)  \nMatchHeaderRE matches requests by a regular expression on header fields.\n\nUpon a match, it adds placeholders to the request: `{http.regexp.name.capture_group}`\nwhere `name` is the regular expression's name, and `capture_group` is either\nthe named or positional capture group from the expression itself. If no name\nis given, then the placeholder omits the name: `{http.regexp.capture_group}`\n(potentially leading to collisions).\n",
            "type": "object",
            "additionalProperties": {
                "description": "\nMatchRegexp is an embedable type for matching\nusing regular expressions. It adds placeholders\nto the request's replacer.\n",
                "markdownDescription": "  \nMatchRegexp is an embedable type for matching\nusing regular expressions. It adds placeholders\nto the request's replacer.\n",
                "properties": {
                    "name": {
                        "description": "name: `string`  \nModule: `http.matchers.header_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeaderRE)\nA unique name for this regular expression. Optional,\nbut useful to prevent overwriting captures from other\nregexp matchers.",
                        "markdownDescription": "name: `string`  \nModule: `http.matchers.header_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeaderRE)  \nA unique name for this regular expression. Optional,\nbut useful to prevent overwriting captures from other\nregexp matchers.",
                        "type": "string"
                    },
                    "pattern": {
                        "description": "pattern: `string`  \nModule: `http.matchers.header_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeaderRE)\nThe regular expression to evaluate, in RE2 syntax,\nwhich is the same general syntax used by Go, Perl,\nand Python. For details, see\n[Go's regexp package](https://golang.org/pkg/regexp/).\nCaptures are accessible via placeholders. Unnamed\ncapture groups are exposed as their numeric, 1-based\nindex, while named capture groups are available by\nthe capture group name.",
                        "markdownDescription": "pattern: `string`  \nModule: `http.matchers.header_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHeaderRE)  \nThe regular expression to evaluate, in RE2 syntax,\nwhich is the same general syntax used by Go, Perl,\nand Python. For details, see\n[Go's regexp package](https://golang.org/pkg/regexp/).\nCaptures are accessible via placeholders. Unnamed\ncapture groups are exposed as their numeric, 1-based\nindex, while named capture groups are available by\nthe capture group name.",
                        "type": "string"
                    }
                }
            }
        },
        "http.matchers.host": {
            "description": "host: `array`  \nModule: `http.matchers.host`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHost)\nMatchHost matches requests by the Host value (case-insensitive).\n\nWhen used in a top-level HTTP route,\n[qualifying domain names](/docs/automatic-https#hostname-requirements)\nmay trigger [automatic HTTPS](/docs/automatic-https), which automatically\nprovisions and renews certificates for you. Before doing this, you\nshould ensure that DNS records for these domains are properly configured,\nespecially A/AAAA pointed at your server.\n\nAutomatic HTTPS can be\n[customized or disabled](/docs/modules/http#servers/automatic_https).\n\nWildcards (`*`) may be used to represent exactly one label of the\nhostname, in accordance with RFC 1034 (because host matchers are also\nused for automatic HTTPS which influences TLS certificates). Thus,\na host of `*` matches hosts like `localhost` or `internal` but not\n`example.com`. To catch all hosts, omit the host matcher entirely.\n\nThe wildcard can be useful for matching all subdomains, for example:\n`*.example.com` matches `foo.example.com` but not `foo.bar.example.com`.\n",
            "markdownDescription": "host: `array`  \nModule: `http.matchers.host`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchHost)  \nMatchHost matches requests by the Host value (case-insensitive).\n\nWhen used in a top-level HTTP route,\n[qualifying domain names](/docs/automatic-https#hostname-requirements)\nmay trigger [automatic HTTPS](/docs/automatic-https), which automatically\nprovisions and renews certificates for you. Before doing this, you\nshould ensure that DNS records for these domains are properly configured,\nespecially A/AAAA pointed at your server.\n\nAutomatic HTTPS can be\n[customized or disabled](/docs/modules/http#servers/automatic_https).\n\nWildcards (`*`) may be used to represent exactly one label of the\nhostname, in accordance with RFC 1034 (because host matchers are also\nused for automatic HTTPS which influences TLS certificates). Thus,\na host of `*` matches hosts like `localhost` or `internal` but not\n`example.com`. To catch all hosts, omit the host matcher entirely.\n\nThe wildcard can be useful for matching all subdomains, for example:\n`*.example.com` matches `foo.example.com` but not `foo.bar.example.com`.\n",
            "type": "array",
            "items": {
                "description": "\n",
                "markdownDescription": "  \n",
                "type": "string"
            }
        },
        "http.matchers.method": {
            "description": "method: `array`  \nModule: `http.matchers.method`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchMethod)\nMatchMethod matches requests by the method.\n",
            "markdownDescription": "method: `array`  \nModule: `http.matchers.method`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchMethod)  \nMatchMethod matches requests by the method.\n",
            "type": "array",
            "items": {
                "description": "\n",
                "markdownDescription": "  \n",
                "type": "string"
            }
        },
        "http.matchers.not": {
            "description": "not: `object`  \nModule: `http.matchers.not`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchNot)\nMatchNot matches requests by negating the results of its matcher\nsets. A single \"not\" matcher takes one or more matcher sets. Each\nmatcher set is OR'ed; in other words, if any matcher set returns\ntrue, the final result of the \"not\" matcher is false. Individual\nmatchers within a set work the same (i.e. different matchers in\nthe same set are AND'ed).\n\nNote that the generated docs which describe the structure of\nthis module are wrong because of how this type unmarshals JSON\nin a custom way. The correct structure is:\n\n```json\n[\n\t{},\n\t{}\n]\n```\n\nwhere each of the array elements is a matcher set, i.e. an\nobject keyed by matcher name.\n",
            "markdownDescription": "not: `object`  \nModule: `http.matchers.not`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchNot)  \nMatchNot matches requests by negating the results of its matcher\nsets. A single \"not\" matcher takes one or more matcher sets. Each\nmatcher set is OR'ed; in other words, if any matcher set returns\ntrue, the final result of the \"not\" matcher is false. Individual\nmatchers within a set work the same (i.e. different matchers in\nthe same set are AND'ed).\n\nNote that the generated docs which describe the structure of\nthis module are wrong because of how this type unmarshals JSON\nin a custom way. The correct structure is:\n\n```json\n[\n\t{},\n\t{}\n]\n```\n\nwhere each of the array elements is a matcher set, i.e. an\nobject keyed by matcher name.\n",
            "type": "object"
        },
        "http.matchers.path": {
            "description": "path: `array`  \nModule: `http.matchers.path`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPath)\nMatchPath matches requests by the URI's path (case-insensitive). Path\nmatches are exact, but wildcards may be used:\n\n- At the end, for a prefix match (`/prefix/*`)\n- At the beginning, for a suffix match (`*.suffix`)\n- On both sides, for a substring match (`*/contains/*`)\n- In the middle, for a globular match (`/accounts/*/info`)\n\nThis matcher is fast, so it does not support regular expressions or\ncapture groups. For slower but more powerful matching, use the\npath_regexp matcher.\n",
            "markdownDescription": "path: `array`  \nModule: `http.matchers.path`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPath)  \nMatchPath matches requests by the URI's path (case-insensitive). Path\nmatches are exact, but wildcards may be used:\n\n- At the end, for a prefix match (`/prefix/*`)\n- At the beginning, for a suffix match (`*.suffix`)\n- On both sides, for a substring match (`*/contains/*`)\n- In the middle, for a globular match (`/accounts/*/info`)\n\nThis matcher is fast, so it does not support regular expressions or\ncapture groups. For slower but more powerful matching, use the\npath_regexp matcher.\n",
            "type": "array",
            "items": {
                "description": "\n",
                "markdownDescription": "  \n",
                "type": "string"
            }
        },
        "http.matchers.path_regexp": {
            "description": "path_regexp: `object`  \nModule: `http.matchers.path_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPathRE)\nMatchPathRE matches requests by a regular expression on the URI's path.\n\nUpon a match, it adds placeholders to the request: `{http.regexp.name.capture_group}`\nwhere `name` is the regular expression's name, and `capture_group` is either\nthe named or positional capture group from the expression itself. If no name\nis given, then the placeholder omits the name: `{http.regexp.capture_group}`\n(potentially leading to collisions).\n",
            "markdownDescription": "path_regexp: `object`  \nModule: `http.matchers.path_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPathRE)  \nMatchPathRE matches requests by a regular expression on the URI's path.\n\nUpon a match, it adds placeholders to the request: `{http.regexp.name.capture_group}`\nwhere `name` is the regular expression's name, and `capture_group` is either\nthe named or positional capture group from the expression itself. If no name\nis given, then the placeholder omits the name: `{http.regexp.capture_group}`\n(potentially leading to collisions).\n",
            "type": "object",
            "properties": {
                "name": {
                    "description": "name: `string`  \nModule: `http.matchers.path_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPathRE)\nA unique name for this regular expression. Optional,\nbut useful to prevent overwriting captures from other\nregexp matchers.",
                    "markdownDescription": "name: `string`  \nModule: `http.matchers.path_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPathRE)  \nA unique name for this regular expression. Optional,\nbut useful to prevent overwriting captures from other\nregexp matchers.",
                    "type": "string"
                },
                "pattern": {
                    "description": "pattern: `string`  \nModule: `http.matchers.path_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPathRE)\nThe regular expression to evaluate, in RE2 syntax,\nwhich is the same general syntax used by Go, Perl,\nand Python. For details, see\n[Go's regexp package](https://golang.org/pkg/regexp/).\nCaptures are accessible via placeholders. Unnamed\ncapture groups are exposed as their numeric, 1-based\nindex, while named capture groups are available by\nthe capture group name.",
                    "markdownDescription": "pattern: `string`  \nModule: `http.matchers.path_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchPathRE)  \nThe regular expression to evaluate, in RE2 syntax,\nwhich is the same general syntax used by Go, Perl,\nand Python. For details, see\n[Go's regexp package](https://golang.org/pkg/regexp/).\nCaptures are accessible via placeholders. Unnamed\ncapture groups are exposed as their numeric, 1-based\nindex, while named capture groups are available by\nthe capture group name.",
                    "type": "string"
                }
            }
        },
        "http.matchers.protocol": {
            "description": "protocol: `string`  \nModule: `http.matchers.protocol`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchProtocol)\nMatchProtocol matches requests by protocol.\n",
            "markdownDescription": "protocol: `string`  \nModule: `http.matchers.protocol`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchProtocol)  \nMatchProtocol matches requests by protocol.\n",
            "type": "string"
        },
        "http.matchers.query": {
            "description": "query: `object`  \nModule: `http.matchers.query`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchQuery)\nMatchQuery matches requests by URI's query string.\n",
            "markdownDescription": "query: `object`  \nModule: `http.matchers.query`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchQuery)  \nMatchQuery matches requests by URI's query string.\n",
            "type": "object",
            "additionalProperties": {
                "description": "\n",
                "markdownDescription": "  \n",
                "type": "array",
                "items": {
                    "description": "\n",
                    "markdownDescription": "  \n",
                    "type": "string"
                }
            }
        },
        "http.matchers.remote_ip": {
            "description": "remote_ip: `object`  \nModule: `http.matchers.remote_ip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchRemoteIP)\nMatchRemoteIP matches requests by client IP (or CIDR range).\n",
            "markdownDescription": "remote_ip: `object`  \nModule: `http.matchers.remote_ip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchRemoteIP)  \nMatchRemoteIP matches requests by client IP (or CIDR range).\n",
            "type": "object",
            "properties": {
                "ranges": {
                    "description": "ranges: `array`  \nModule: `http.matchers.remote_ip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchRemoteIP)\n",
                    "markdownDescription": "ranges: `array`  \nModule: `http.matchers.remote_ip`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchRemoteIP)  \n",
                    "type": "array",
                    "items": {
                        "description": "\n",
                        "markdownDescription": "  \n",
                        "type": "string"
                    }
                }
            }
        },
        "http.matchers.vars": {
            "description": "vars: `object`  \nModule: `http.matchers.vars`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#VarsMatcher)\nVarsMatcher is an HTTP request matcher which can match\nrequests based on variables in the context.\n",
            "markdownDescription": "vars: `object`  \nModule: `http.matchers.vars`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#VarsMatcher)  \nVarsMatcher is an HTTP request matcher which can match\nrequests based on variables in the context.\n",
            "type": "object",
            "additionalProperties": {
                "description": "\n",
                "markdownDescription": "  \n"
            }
        },
        "http.matchers.vars_regexp": {
            "description": "vars_regexp: `object`  \nModule: `http.matchers.vars_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchVarsRE)\nMatchVarsRE matches the value of the context variables by a given regular expression.\n\nUpon a match, it adds placeholders to the request: `{http.regexp.name.capture_group}`\nwhere `name` is the regular expression's name, and `capture_group` is either\nthe named or positional capture group from the expression itself. If no name\nis given, then the placeholder omits the name: `{http.regexp.capture_group}`\n(potentially leading to collisions).\n",
            "markdownDescription": "vars_regexp: `object`  \nModule: `http.matchers.vars_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchVarsRE)  \nMatchVarsRE matches the value of the context variables by a given regular expression.\n\nUpon a match, it adds placeholders to the request: `{http.regexp.name.capture_group}`\nwhere `name` is the regular expression's name, and `capture_group` is either\nthe named or positional capture group from the expression itself. If no name\nis given, then the placeholder omits the name: `{http.regexp.capture_group}`\n(potentially leading to collisions).\n",
            "type": "object",
            "additionalProperties": {
                "description": "\nMatchRegexp is an embedable type for matching\nusing regular expressions. It adds placeholders\nto the request's replacer.\n",
                "markdownDescription": "  \nMatchRegexp is an embedable type for matching\nusing regular expressions. It adds placeholders\nto the request's replacer.\n",
                "properties": {
                    "name": {
                        "description": "name: `string`  \nModule: `http.matchers.vars_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchVarsRE)\nA unique name for this regular expression. Optional,\nbut useful to prevent overwriting captures from other\nregexp matchers.",
                        "markdownDescription": "name: `string`  \nModule: `http.matchers.vars_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchVarsRE)  \nA unique name for this regular expression. Optional,\nbut useful to prevent overwriting captures from other\nregexp matchers.",
                        "type": "string"
                    },
                    "pattern": {
                        "description": "pattern: `string`  \nModule: `http.matchers.vars_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchVarsRE)\nThe regular expression to evaluate, in RE2 syntax,\nwhich is the same general syntax used by Go, Perl,\nand Python. For details, see\n[Go's regexp package](https://golang.org/pkg/regexp/).\nCaptures are accessible via placeholders. Unnamed\ncapture groups are exposed as their numeric, 1-based\nindex, while named capture groups are available by\nthe capture group name.",
                        "markdownDescription": "pattern: `string`  \nModule: `http.matchers.vars_regexp`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp#MatchVarsRE)  \nThe regular expression to evaluate, in RE2 syntax,\nwhich is the same general syntax used by Go, Perl,\nand Python. For details, see\n[Go's regexp package](https://golang.org/pkg/regexp/).\nCaptures are accessible via placeholders. Unnamed\ncapture groups are exposed as their numeric, 1-based\nindex, while named capture groups are available by\nthe capture group name.",
                        "type": "string"
                    }
                }
            }
        },
        "http.reverse_proxy.selection_policies.first": {
            "description": "first: `object`  \nModule: `http.reverse_proxy.selection_policies.first`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#FirstSelection)",
            "markdownDescription": "first: `object`  \nModule: `http.reverse_proxy.selection_policies.first`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#FirstSelection)",
            "type": "object"
        },
        "http.reverse_proxy.selection_policies.header": {
            "description": "header: `object`  \nModule: `http.reverse_proxy.selection_policies.header`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HeaderHashSelection)",
            "markdownDescription": "header: `object`  \nModule: `http.reverse_proxy.selection_policies.header`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HeaderHashSelection)",
            "type": "object",
            "properties": {
                "field": {
                    "description": "field: `string`  \nModule: `http.reverse_proxy.selection_policies.header`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HeaderHashSelection)",
                    "markdownDescription": "field: `string`  \nModule: `http.reverse_proxy.selection_policies.header`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HeaderHashSelection)",
                    "type": "string"
                }
            }
        },
        "http.reverse_proxy.selection_policies.ip_hash": {
            "description": "ip_hash: `object`  \nModule: `http.reverse_proxy.selection_policies.ip_hash`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#IPHashSelection)",
            "markdownDescription": "ip_hash: `object`  \nModule: `http.reverse_proxy.selection_policies.ip_hash`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#IPHashSelection)",
            "type": "object"
        },
        "http.reverse_proxy.selection_policies.least_conn": {
            "description": "least_conn: `object`  \nModule: `http.reverse_proxy.selection_policies.least_conn`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#LeastConnSelection)",
            "markdownDescription": "least_conn: `object`  \nModule: `http.reverse_proxy.selection_policies.least_conn`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#LeastConnSelection)",
            "type": "object"
        },
        "http.reverse_proxy.selection_policies.random": {
            "description": "random: `object`  \nModule: `http.reverse_proxy.selection_policies.random`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RandomSelection)",
            "markdownDescription": "random: `object`  \nModule: `http.reverse_proxy.selection_policies.random`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RandomSelection)",
            "type": "object"
        },
        "http.reverse_proxy.selection_policies.random_choose": {
            "description": "random_choose: `object`  \nModule: `http.reverse_proxy.selection_policies.random_choose`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RandomChoiceSelection)",
            "markdownDescription": "random_choose: `object`  \nModule: `http.reverse_proxy.selection_policies.random_choose`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RandomChoiceSelection)",
            "type": "object",
            "properties": {
                "choose": {
                    "description": "choose: `number`  \nModule: `http.reverse_proxy.selection_policies.random_choose`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RandomChoiceSelection)",
                    "markdownDescription": "choose: `number`  \nModule: `http.reverse_proxy.selection_policies.random_choose`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RandomChoiceSelection)",
                    "type": "number"
                }
            }
        },
        "http.reverse_proxy.selection_policies.round_robin": {
            "description": "round_robin: `object`  \nModule: `http.reverse_proxy.selection_policies.round_robin`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RoundRobinSelection)",
            "markdownDescription": "round_robin: `object`  \nModule: `http.reverse_proxy.selection_policies.round_robin`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#RoundRobinSelection)",
            "type": "object"
        },
        "http.reverse_proxy.selection_policies.uri_hash": {
            "description": "uri_hash: `object`  \nModule: `http.reverse_proxy.selection_policies.uri_hash`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#URIHashSelection)",
            "markdownDescription": "uri_hash: `object`  \nModule: `http.reverse_proxy.selection_policies.uri_hash`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#URIHashSelection)",
            "type": "object"
        },
        "http.reverse_proxy.transport.fastcgi": {
            "description": "fastcgi: `object`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
            "markdownDescription": "fastcgi: `object`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
            "type": "object",
            "properties": {
                "dial_timeout": {
                    "description": "dial_timeout: `number`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "markdownDescription": "dial_timeout: `number`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "type": "number"
                },
                "env": {
                    "description": "env: `object`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "markdownDescription": "env: `object`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "type": "object",
                    "additionalProperties": {}
                },
                "read_timeout": {
                    "description": "read_timeout: `number`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "markdownDescription": "read_timeout: `number`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "type": "number"
                },
                "root": {
                    "description": "root: `string`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "markdownDescription": "root: `string`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "type": "string"
                },
                "split_path": {
                    "description": "split_path: `array`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "markdownDescription": "split_path: `array`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "write_timeout": {
                    "description": "write_timeout: `number`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "markdownDescription": "write_timeout: `number`  \nModule: `http.reverse_proxy.transport.fastcgi`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy/fastcgi#Transport)",
                    "type": "number"
                }
            }
        },
        "http.reverse_proxy.transport.http": {
            "description": "http: `object`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
            "markdownDescription": "http: `object`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
            "type": "object",
            "properties": {
                "compression": {
                    "description": "compression: `boolean`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "compression: `boolean`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "boolean"
                },
                "dial_fallback_delay": {
                    "description": "dial_fallback_delay: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "dial_fallback_delay: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                },
                "dial_timeout": {
                    "description": "dial_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "dial_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                },
                "expect_continue_timeout": {
                    "description": "expect_continue_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "expect_continue_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                },
                "keep_alive": {
                    "description": "keep_alive: `object`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "keep_alive: `object`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "description": "enabled: `boolean`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "enabled: `boolean`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "boolean"
                        },
                        "idle_timeout": {
                            "description": "idle_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "idle_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "number"
                        },
                        "max_idle_conns": {
                            "description": "max_idle_conns: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "max_idle_conns: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "number"
                        },
                        "max_idle_conns_per_host": {
                            "description": "max_idle_conns_per_host: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "max_idle_conns_per_host: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "number"
                        },
                        "probe_interval": {
                            "description": "probe_interval: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "probe_interval: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "number"
                        }
                    }
                },
                "max_conns_per_host": {
                    "description": "max_conns_per_host: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "max_conns_per_host: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                },
                "max_response_header_size": {
                    "description": "max_response_header_size: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "max_response_header_size: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                },
                "read_buffer_size": {
                    "description": "read_buffer_size: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "read_buffer_size: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                },
                "response_header_timeout": {
                    "description": "response_header_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "response_header_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                },
                "tls": {
                    "description": "tls: `object`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "tls: `object`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "object",
                    "properties": {
                        "client_certificate_file": {
                            "description": "client_certificate_file: `string`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "client_certificate_file: `string`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "string"
                        },
                        "client_certificate_key_file": {
                            "description": "client_certificate_key_file: `string`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "client_certificate_key_file: `string`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "string"
                        },
                        "handshake_timeout": {
                            "description": "handshake_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "handshake_timeout: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "number"
                        },
                        "insecure_skip_verify": {
                            "description": "insecure_skip_verify: `boolean`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "insecure_skip_verify: `boolean`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "boolean"
                        },
                        "root_ca_pem_files": {
                            "description": "root_ca_pem_files: `array`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "root_ca_pem_files: `array`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "root_ca_pool": {
                            "description": "root_ca_pool: `array`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "root_ca_pool: `array`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "server_name": {
                            "description": "server_name: `string`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "markdownDescription": "server_name: `string`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                            "type": "string"
                        }
                    }
                },
                "versions": {
                    "description": "versions: `array`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "versions: `array`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "write_buffer_size": {
                    "description": "write_buffer_size: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "markdownDescription": "write_buffer_size: `number`  \nModule: `http.reverse_proxy.transport.http`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy#HTTPTransport)",
                    "type": "number"
                }
            }
        },
        "pki": {
            "description": "pki: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)\nPKI provides Public Key Infrastructure facilities for Caddy.\n",
            "markdownDescription": "pki: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)  \nPKI provides Public Key Infrastructure facilities for Caddy.\n",
            "type": "object",
            "properties": {
                "certificate_authorities": {
                    "description": "certificate_authorities: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)\n",
                    "markdownDescription": "certificate_authorities: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)  \n",
                    "type": "object",
                    "additionalProperties": {
                        "description": "\nThe CAs to manage. Each CA is keyed by an ID that is used\nto uniquely identify it from other CAs. The default CA ID\nis \"local\".\n\nCA describes a certificate authority, which consists of\nroot/signing certificates and various settings pertaining\nto the issuance of certificates and trusting them.",
                        "markdownDescription": "  \nThe CAs to manage. Each CA is keyed by an ID that is used\nto uniquely identify it from other CAs. The default CA ID\nis \"local\".\n\nCA describes a certificate authority, which consists of\nroot/signing certificates and various settings pertaining\nto the issuance of certificates and trusting them.",
                        "properties": {
                            "install_trust": {
                                "description": "install_trust: `boolean`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)\nWhether Caddy will attempt to install the CA's root\ninto the system trust store, as well as into Java\nand Mozilla Firefox trust stores. Default: true.",
                                "markdownDescription": "install_trust: `boolean`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)  \nWhether Caddy will attempt to install the CA's root\ninto the system trust store, as well as into Java\nand Mozilla Firefox trust stores. Default: true.",
                                "type": "boolean"
                            },
                            "intermediate": {
                                "description": "intermediate: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)\nKeyPair represents a public-private key pair, where the\npublic key is also called a certificate.\n",
                                "markdownDescription": "intermediate: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)  \nKeyPair represents a public-private key pair, where the\npublic key is also called a certificate.\n",
                                "type": "object",
                                "properties": {
                                    "certificate": {
                                        "description": "certificate: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)\n",
                                        "markdownDescription": "certificate: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)  \n",
                                        "type": "string"
                                    },
                                    "format": {
                                        "description": "format: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)\n",
                                        "markdownDescription": "format: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)  \n",
                                        "type": "string"
                                    },
                                    "private_key": {
                                        "description": "private_key: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)\n",
                                        "markdownDescription": "private_key: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)  \n",
                                        "type": "string"
                                    }
                                }
                            },
                            "intermediate_common_name": {
                                "description": "intermediate_common_name: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)\nThe name to put in the CommonName field of the\nintermediate certificates.",
                                "markdownDescription": "intermediate_common_name: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)  \nThe name to put in the CommonName field of the\nintermediate certificates.",
                                "type": "string"
                            },
                            "name": {
                                "description": "name: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)\nThe user-facing name of the certificate authority.",
                                "markdownDescription": "name: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)  \nThe user-facing name of the certificate authority.",
                                "type": "string"
                            },
                            "root": {
                                "description": "root: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)\nKeyPair represents a public-private key pair, where the\npublic key is also called a certificate.\n",
                                "markdownDescription": "root: `object`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)  \nKeyPair represents a public-private key pair, where the\npublic key is also called a certificate.\n",
                                "type": "object",
                                "properties": {
                                    "certificate": {
                                        "description": "certificate: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)\n",
                                        "markdownDescription": "certificate: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)  \n",
                                        "type": "string"
                                    },
                                    "format": {
                                        "description": "format: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)\n",
                                        "markdownDescription": "format: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)  \n",
                                        "type": "string"
                                    },
                                    "private_key": {
                                        "description": "private_key: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)\n",
                                        "markdownDescription": "private_key: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)  \n",
                                        "type": "string"
                                    }
                                }
                            },
                            "root_common_name": {
                                "description": "root_common_name: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)\nThe name to put in the CommonName field of the\nroot certificate.",
                                "markdownDescription": "root_common_name: `string`  \nModule: `pki`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddypki#PKI)  \nThe name to put in the CommonName field of the\nroot certificate.",
                                "type": "string"
                            },
                            "storage": {
                                "description": "storage: `object`  \nModule: `caddy.storage`  \n\nOptionally configure a separate storage module associated with this\nissuer, instead of using Caddy's global/default-configured storage.\nThis can be useful if you want to keep your signing keys in a\nseparate location from your leaf certificates.",
                                "markdownDescription": "storage: `object`  \nModule: `caddy.storage`  \n  \nOptionally configure a separate storage module associated with this\nissuer, instead of using Caddy's global/default-configured storage.\nThis can be useful if you want to keep your signing keys in a\nseparate location from your leaf certificates.",
                                "required": [
                                    "module"
                                ],
                                "allOf": [
                                    {
                                        "if": {
                                            "properties": {
                                                "module": {
                                                    "const": "file_system"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.storage.file_system"
                                        }
                                    },
                                    {
                                        "properties": {
                                            "module": {
                                                "description": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                                                "markdownDescription": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                                                "type": "string",
                                                "enum": [
                                                    "file_system"
                                                ]
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "tls": {
            "description": "tls: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nTLS provides TLS facilities including certificate\nloading and management, client auth, and more.\n",
            "markdownDescription": "tls: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nTLS provides TLS facilities including certificate\nloading and management, client auth, and more.\n",
            "type": "object",
            "properties": {
                "automation": {
                    "description": "automation: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nConfigures the automation of certificate management.\n\nAutomationConfig designates configuration for the\nconstruction and use of ACME clients.",
                    "markdownDescription": "automation: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nConfigures the automation of certificate management.\n\nAutomationConfig designates configuration for the\nconstruction and use of ACME clients.",
                    "type": "object",
                    "properties": {
                        "ocsp_interval": {
                            "description": "ocsp_interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nCaddy staples OCSP (and caches the response) for all\nqualifying certificates by default. This setting\nchanges how often it scans responses for freshness,\nand updates them if they are getting stale.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                            "markdownDescription": "ocsp_interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nCaddy staples OCSP (and caches the response) for all\nqualifying certificates by default. This setting\nchanges how often it scans responses for freshness,\nand updates them if they are getting stale.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                            "type": "number"
                        },
                        "on_demand": {
                            "description": "on_demand: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nOn-Demand TLS defers certificate operations to the\nmoment they are needed, e.g. during a TLS handshake.\nUseful when you don't know all the hostnames at\nconfig-time, or when you are not in control of the\ndomain names you are managing certificates for.\nIn 2015, Caddy became the first web server to\nimplement this experimental technology.\n\nNote that this field does not enable on-demand TLS,\nit only configures it for when it is used. To enable\nit, create an automation policy with `on_demand`.\n\nOnDemandConfig configures on-demand TLS, for obtaining\nneeded certificates at handshake-time. Because this\nfeature can easily be abused, you should use this to\nestablish rate limits and/or an internal endpoint that\nCaddy can \"ask\" if it should be allowed to manage\ncertificates for a given hostname.",
                            "markdownDescription": "on_demand: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nOn-Demand TLS defers certificate operations to the\nmoment they are needed, e.g. during a TLS handshake.\nUseful when you don't know all the hostnames at\nconfig-time, or when you are not in control of the\ndomain names you are managing certificates for.\nIn 2015, Caddy became the first web server to\nimplement this experimental technology.\n\nNote that this field does not enable on-demand TLS,\nit only configures it for when it is used. To enable\nit, create an automation policy with `on_demand`.\n\nOnDemandConfig configures on-demand TLS, for obtaining\nneeded certificates at handshake-time. Because this\nfeature can easily be abused, you should use this to\nestablish rate limits and/or an internal endpoint that\nCaddy can \"ask\" if it should be allowed to manage\ncertificates for a given hostname.",
                            "type": "object",
                            "properties": {
                                "ask": {
                                    "description": "ask: `string`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nIf Caddy needs to obtain or renew a certificate\nduring a TLS handshake, it will perform a quick\nHTTP request to this URL to check if it should be\nallowed to try to get a certificate for the name\nin the \"domain\" query string parameter, like so:\n`?domain=example.com`. The endpoint must return a\n200 OK status if a certificate is allowed;\nanything else will cause it to be denied.\nRedirects are not followed.",
                                    "markdownDescription": "ask: `string`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nIf Caddy needs to obtain or renew a certificate\nduring a TLS handshake, it will perform a quick\nHTTP request to this URL to check if it should be\nallowed to try to get a certificate for the name\nin the \"domain\" query string parameter, like so:\n`?domain=example.com`. The endpoint must return a\n200 OK status if a certificate is allowed;\nanything else will cause it to be denied.\nRedirects are not followed.",
                                    "type": "string"
                                },
                                "rate_limit": {
                                    "description": "rate_limit: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nAn optional rate limit to throttle the\nissuance of certificates from handshakes.\n\nRateLimit specifies an interval with optional burst size.",
                                    "markdownDescription": "rate_limit: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nAn optional rate limit to throttle the\nissuance of certificates from handshakes.\n\nRateLimit specifies an interval with optional burst size.",
                                    "type": "object",
                                    "properties": {
                                        "burst": {
                                            "description": "burst: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nHow many times during an interval a certificate can be obtained.",
                                            "markdownDescription": "burst: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nHow many times during an interval a certificate can be obtained.",
                                            "type": "number"
                                        },
                                        "interval": {
                                            "description": "interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nA duration value. A certificate may be obtained 'burst'\ntimes during this interval.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                            "markdownDescription": "interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nA duration value. A certificate may be obtained 'burst'\ntimes during this interval.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                            "type": "number"
                                        }
                                    }
                                }
                            }
                        },
                        "policies": {
                            "description": "policies: `array`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\n",
                            "markdownDescription": "policies: `array`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \n",
                            "type": "array",
                            "items": {
                                "description": "\nThe list of automation policies. The first matching\npolicy will be applied for a given certificate/name.\n\nAutomationPolicy designates the policy for automating the\nmanagement (obtaining, renewal, and revocation) of managed\nTLS certificates.\n\nAn AutomationPolicy value is not valid until it has been\nprovisioned; use the `AddAutomationPolicy()` method on the\nTLS app to properly provision a new policy.",
                                "markdownDescription": "  \nThe list of automation policies. The first matching\npolicy will be applied for a given certificate/name.\n\nAutomationPolicy designates the policy for automating the\nmanagement (obtaining, renewal, and revocation) of managed\nTLS certificates.\n\nAn AutomationPolicy value is not valid until it has been\nprovisioned; use the `AddAutomationPolicy()` method on the\nTLS app to properly provision a new policy.",
                                "type": "object",
                                "properties": {
                                    "issuer": {
                                        "description": "issuer: `object`  \nModule: `tls.issuance`  \n\nThe module that will issue certificates. Default: internal if all\nsubjects do not qualify for public certificates; othewise acme.",
                                        "markdownDescription": "issuer: `object`  \nModule: `tls.issuance`  \n  \nThe module that will issue certificates. Default: internal if all\nsubjects do not qualify for public certificates; othewise acme.",
                                        "required": [
                                            "module"
                                        ],
                                        "allOf": [
                                            {
                                                "if": {
                                                    "properties": {
                                                        "module": {
                                                            "const": "acme"
                                                        }
                                                    }
                                                },
                                                "then": {
                                                    "$ref": "#/definitions/tls.issuance.acme"
                                                }
                                            },
                                            {
                                                "if": {
                                                    "properties": {
                                                        "module": {
                                                            "const": "internal"
                                                        }
                                                    }
                                                },
                                                "then": {
                                                    "$ref": "#/definitions/tls.issuance.internal"
                                                }
                                            },
                                            {
                                                "properties": {
                                                    "module": {
                                                        "description": "`issuer` key to identify specified module.  \nmodule: `string`  \nModule: `tls.issuance`",
                                                        "markdownDescription": "`issuer` key to identify specified module.  \nmodule: `string`  \nModule: `tls.issuance`",
                                                        "type": "string",
                                                        "enum": [
                                                            "acme",
                                                            "internal"
                                                        ]
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "key_type": {
                                        "description": "key_type: `string`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nThe type of key to generate for certificates.\nSupported values: `ed25519`, `p256`, `p384`, `rsa2048`, `rsa4096`.",
                                        "markdownDescription": "key_type: `string`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nThe type of key to generate for certificates.\nSupported values: `ed25519`, `p256`, `p384`, `rsa2048`, `rsa4096`.",
                                        "type": "string"
                                    },
                                    "must_staple": {
                                        "description": "must_staple: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nIf true, certificates will be requested with MustStaple. Not all\nCAs support this, and there are potentially serious consequences\nof enabling this feature without proper threat modeling.",
                                        "markdownDescription": "must_staple: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nIf true, certificates will be requested with MustStaple. Not all\nCAs support this, and there are potentially serious consequences\nof enabling this feature without proper threat modeling.",
                                        "type": "boolean"
                                    },
                                    "on_demand": {
                                        "description": "on_demand: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nIf true, certificates will be managed \"on demand\"; that is, during\nTLS handshakes or when needed, as opposed to at startup or config\nload.",
                                        "markdownDescription": "on_demand: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nIf true, certificates will be managed \"on demand\"; that is, during\nTLS handshakes or when needed, as opposed to at startup or config\nload.",
                                        "type": "boolean"
                                    },
                                    "renewal_window_ratio": {
                                        "description": "renewal_window_ratio: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nHow long before a certificate's expiration to try renewing it,\nas a function of its total lifetime. As a general and conservative\nrule, it is a good idea to renew a certificate when it has about\n1/3 of its total lifetime remaining. This utilizes the majority\nof the certificate's lifetime while still saving time to\ntroubleshoot problems. However, for extremely short-lived certs,\nyou may wish to increase the ratio to ~1/2.",
                                        "markdownDescription": "renewal_window_ratio: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nHow long before a certificate's expiration to try renewing it,\nas a function of its total lifetime. As a general and conservative\nrule, it is a good idea to renew a certificate when it has about\n1/3 of its total lifetime remaining. This utilizes the majority\nof the certificate's lifetime while still saving time to\ntroubleshoot problems. However, for extremely short-lived certs,\nyou may wish to increase the ratio to ~1/2.",
                                        "type": "object"
                                    },
                                    "storage": {
                                        "description": "storage: `object`  \nModule: `caddy.storage`  \n\nOptionally configure a separate storage module associated with this\nmanager, instead of using Caddy's global/default-configured storage.",
                                        "markdownDescription": "storage: `object`  \nModule: `caddy.storage`  \n  \nOptionally configure a separate storage module associated with this\nmanager, instead of using Caddy's global/default-configured storage.",
                                        "required": [
                                            "module"
                                        ],
                                        "allOf": [
                                            {
                                                "if": {
                                                    "properties": {
                                                        "module": {
                                                            "const": "file_system"
                                                        }
                                                    }
                                                },
                                                "then": {
                                                    "$ref": "#/definitions/caddy.storage.file_system"
                                                }
                                            },
                                            {
                                                "properties": {
                                                    "module": {
                                                        "description": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                                                        "markdownDescription": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                                                        "type": "string",
                                                        "enum": [
                                                            "file_system"
                                                        ]
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "subjects": {
                                        "description": "subjects: `array`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\n",
                                        "markdownDescription": "subjects: `array`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \n",
                                        "type": "array",
                                        "items": {
                                            "description": "\nWhich subjects (hostnames or IP addresses) this policy applies to.",
                                            "markdownDescription": "  \nWhich subjects (hostnames or IP addresses) this policy applies to.",
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "renew_interval": {
                            "description": "renew_interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nEvery so often, Caddy will scan all loaded, managed\ncertificates for expiration. This setting changes how\nfrequently the scan for expiring certificates is\nperformed. If your certificate lifetimes are very\nshort (less than ~24 hours), you should set this to\na low value.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                            "markdownDescription": "renew_interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nEvery so often, Caddy will scan all loaded, managed\ncertificates for expiration. This setting changes how\nfrequently the scan for expiring certificates is\nperformed. If your certificate lifetimes are very\nshort (less than ~24 hours), you should set this to\na low value.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                            "type": "number"
                        }
                    }
                },
                "certificates": {
                    "description": "certificates: `object`  \nModule: `tls.certificates`  \n\nCaches certificates in memory for quick use during\nTLS handshakes. Each key is the name of a certificate\nloader module. All loaded certificates get pooled\ninto the same cache and may be used to complete TLS\nhandshakes for the relevant server names (SNI).\nCertificates loaded manually (anything other than\n\"automate\") are not automatically managed and will\nhave to be refreshed manually before they expire.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                    "markdownDescription": "certificates: `object`  \nModule: `tls.certificates`  \n  \nCaches certificates in memory for quick use during\nTLS handshakes. Each key is the name of a certificate\nloader module. All loaded certificates get pooled\ninto the same cache and may be used to complete TLS\nhandshakes for the relevant server names (SNI).\nCertificates loaded manually (anything other than\n\"automate\") are not automatically managed and will\nhave to be refreshed manually before they expire.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
                    "properties": {
                        "automate": {
                            "$ref": "#/definitions/tls.certificates.automate"
                        },
                        "load_files": {
                            "$ref": "#/definitions/tls.certificates.load_files"
                        },
                        "load_folders": {
                            "$ref": "#/definitions/tls.certificates.load_folders"
                        },
                        "load_pem": {
                            "$ref": "#/definitions/tls.certificates.load_pem"
                        }
                    }
                },
                "session_tickets": {
                    "description": "session_tickets: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nConfigures session ticket ephemeral keys (STEKs).\n\nSessionTicketService configures and manages TLS session tickets.",
                    "markdownDescription": "session_tickets: `object`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nConfigures session ticket ephemeral keys (STEKs).\n\nSessionTicketService configures and manages TLS session tickets.",
                    "type": "object",
                    "properties": {
                        "disable_rotation": {
                            "description": "disable_rotation: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nDisables STEK rotation.",
                            "markdownDescription": "disable_rotation: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nDisables STEK rotation.",
                            "type": "boolean"
                        },
                        "disabled": {
                            "description": "disabled: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nDisables TLS session resumption by tickets.",
                            "markdownDescription": "disabled: `boolean`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nDisables TLS session resumption by tickets.",
                            "type": "boolean"
                        },
                        "key_source": {
                            "description": "key_source: `object`  \nModule: `tls.stek`  \n\nkey_source is the method by which Caddy produces or obtains\nTLS session ticket keys (STEKs). By default, Caddy generates\nthem internally using a secure pseudorandom source.",
                            "markdownDescription": "key_source: `object`  \nModule: `tls.stek`  \n  \nkey_source is the method by which Caddy produces or obtains\nTLS session ticket keys (STEKs). By default, Caddy generates\nthem internally using a secure pseudorandom source.",
                            "required": [
                                "provider"
                            ],
                            "allOf": [
                                {
                                    "if": {
                                        "properties": {
                                            "provider": {
                                                "const": "distributed"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/tls.stek.distributed"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "provider": {
                                                "const": "standard"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/tls.stek.standard"
                                    }
                                },
                                {
                                    "properties": {
                                        "provider": {
                                            "description": "`key_source` key to identify specified module.  \nprovider: `string`  \nModule: `tls.stek`",
                                            "markdownDescription": "`key_source` key to identify specified module.  \nprovider: `string`  \nModule: `tls.stek`",
                                            "type": "string",
                                            "enum": [
                                                "distributed",
                                                "standard"
                                            ]
                                        }
                                    }
                                }
                            ]
                        },
                        "max_keys": {
                            "description": "max_keys: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nThe maximum number of keys to keep in rotation. Default: 4.",
                            "markdownDescription": "max_keys: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nThe maximum number of keys to keep in rotation. Default: 4.",
                            "type": "number"
                        },
                        "rotation_interval": {
                            "description": "rotation_interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)\nHow often Caddy rotates STEKs. Default: 12h.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                            "markdownDescription": "rotation_interval: `number`  \nModule: `tls`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#TLS)  \nHow often Caddy rotates STEKs. Default: 12h.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                            "type": "number"
                        }
                    }
                }
            }
        },
        "tls.certificates.automate": {
            "description": "automate: `array`  \nModule: `tls.certificates.automate`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#AutomateLoader)\nAutomateLoader is a no-op certificate loader module\nthat is treated as a special case: it uses this app's\nautomation features to load certificates for the\nlist of hostnames, rather than loading certificates\nmanually.\n",
            "markdownDescription": "automate: `array`  \nModule: `tls.certificates.automate`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#AutomateLoader)  \nAutomateLoader is a no-op certificate loader module\nthat is treated as a special case: it uses this app's\nautomation features to load certificates for the\nlist of hostnames, rather than loading certificates\nmanually.\n",
            "type": "array",
            "items": {
                "description": "\n",
                "markdownDescription": "  \n",
                "type": "string"
            }
        },
        "tls.certificates.load_files": {
            "description": "load_files: `array`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)\nFileLoader loads certificates and their associated keys from disk.\n",
            "markdownDescription": "load_files: `array`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)  \nFileLoader loads certificates and their associated keys from disk.\n",
            "type": "array",
            "items": {
                "description": "\nCertKeyFilePair pairs certificate and key file names along with their\nencoding format so that they can be loaded from disk.\n",
                "markdownDescription": "  \nCertKeyFilePair pairs certificate and key file names along with their\nencoding format so that they can be loaded from disk.\n",
                "type": "object",
                "properties": {
                    "certificate": {
                        "description": "certificate: `string`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)\nPath to the certificate (public key) file.",
                        "markdownDescription": "certificate: `string`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)  \nPath to the certificate (public key) file.",
                        "type": "string"
                    },
                    "format": {
                        "description": "format: `string`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)\nThe format of the cert and key. Can be \"pem\". Default: \"pem\"",
                        "markdownDescription": "format: `string`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)  \nThe format of the cert and key. Can be \"pem\". Default: \"pem\"",
                        "type": "string"
                    },
                    "key": {
                        "description": "key: `string`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)\nPath to the private key file.",
                        "markdownDescription": "key: `string`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)  \nPath to the private key file.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "tags: `array`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)\n",
                        "markdownDescription": "tags: `array`  \nModule: `tls.certificates.load_files`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FileLoader)  \n",
                        "type": "array",
                        "items": {
                            "description": "\nArbitrary values to associate with this certificate.\nCan be useful when you want to select a particular\ncertificate when there may be multiple valid candidates.",
                            "markdownDescription": "  \nArbitrary values to associate with this certificate.\nCan be useful when you want to select a particular\ncertificate when there may be multiple valid candidates.",
                            "type": "string"
                        }
                    }
                }
            }
        },
        "tls.certificates.load_folders": {
            "description": "load_folders: `array`  \nModule: `tls.certificates.load_folders`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FolderLoader)\nFolderLoader loads certificates and their associated keys from disk\nby recursively walking the specified directories, looking for PEM\nfiles which contain both a certificate and a key.\n",
            "markdownDescription": "load_folders: `array`  \nModule: `tls.certificates.load_folders`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#FolderLoader)  \nFolderLoader loads certificates and their associated keys from disk\nby recursively walking the specified directories, looking for PEM\nfiles which contain both a certificate and a key.\n",
            "type": "array",
            "items": {
                "description": "\n",
                "markdownDescription": "  \n",
                "type": "string"
            }
        },
        "tls.certificates.load_pem": {
            "description": "load_pem: `array`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)\nPEMLoader loads certificates and their associated keys by\ndecoding their PEM blocks directly. This has the advantage\nof not needing to store them on disk at all.\n",
            "markdownDescription": "load_pem: `array`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)  \nPEMLoader loads certificates and their associated keys by\ndecoding their PEM blocks directly. This has the advantage\nof not needing to store them on disk at all.\n",
            "type": "array",
            "items": {
                "description": "\nCertKeyPEMPair pairs certificate and key PEM blocks.\n",
                "markdownDescription": "  \nCertKeyPEMPair pairs certificate and key PEM blocks.\n",
                "type": "object",
                "properties": {
                    "certificate": {
                        "description": "certificate: `string`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)\nThe certificate (public key) in PEM format.",
                        "markdownDescription": "certificate: `string`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)  \nThe certificate (public key) in PEM format.",
                        "type": "string"
                    },
                    "key": {
                        "description": "key: `string`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)\nThe private key in PEM format.",
                        "markdownDescription": "key: `string`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)  \nThe private key in PEM format.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "tags: `array`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)\n",
                        "markdownDescription": "tags: `array`  \nModule: `tls.certificates.load_pem`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#PEMLoader)  \n",
                        "type": "array",
                        "items": {
                            "description": "\nArbitrary values to associate with this certificate.\nCan be useful when you want to select a particular\ncertificate when there may be multiple valid candidates.",
                            "markdownDescription": "  \nArbitrary values to associate with this certificate.\nCan be useful when you want to select a particular\ncertificate when there may be multiple valid candidates.",
                            "type": "string"
                        }
                    }
                }
            }
        },
        "tls.handshake_match.sni": {
            "description": "sni: `array`  \nModule: `tls.handshake_match.sni`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#MatchServerName)\nMatchServerName matches based on SNI. Names in\nthis list may use left-most-label wildcards,\nsimilar to wildcard certificates.\n",
            "markdownDescription": "sni: `array`  \nModule: `tls.handshake_match.sni`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#MatchServerName)  \nMatchServerName matches based on SNI. Names in\nthis list may use left-most-label wildcards,\nsimilar to wildcard certificates.\n",
            "type": "array",
            "items": {
                "description": "\n",
                "markdownDescription": "  \n",
                "type": "string"
            }
        },
        "tls.issuance.acme": {
            "description": "acme: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nACMEIssuer makes an ACME manager\nfor managing certificates using ACME.\n\nTODO: support multiple ACME endpoints (probably\nrequires an array of these structs) - caddy would\nalso have to load certs from the backup CAs if the\nfirst one is expired...\n",
            "markdownDescription": "acme: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nACMEIssuer makes an ACME manager\nfor managing certificates using ACME.\n\nTODO: support multiple ACME endpoints (probably\nrequires an array of these structs) - caddy would\nalso have to load certs from the backup CAs if the\nfirst one is expired...\n",
            "type": "object",
            "properties": {
                "acme_timeout": {
                    "description": "acme_timeout: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nTime to wait before timing out an ACME operation.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                    "markdownDescription": "acme_timeout: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nTime to wait before timing out an ACME operation.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                    "type": "number"
                },
                "ca": {
                    "description": "ca: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nThe URL to the CA's ACME directory endpoint.",
                    "markdownDescription": "ca: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nThe URL to the CA's ACME directory endpoint.",
                    "type": "string"
                },
                "challenges": {
                    "description": "challenges: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nConfigures the various ACME challenge types.\n\nChallengesConfig configures the ACME challenges.",
                    "markdownDescription": "challenges: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nConfigures the various ACME challenge types.\n\nChallengesConfig configures the ACME challenges.",
                    "type": "object",
                    "properties": {
                        "bind_host": {
                            "description": "bind_host: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nOptionally customize the host to which a listener\nis bound if required for solving a challenge.",
                            "markdownDescription": "bind_host: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nOptionally customize the host to which a listener\nis bound if required for solving a challenge.",
                            "type": "string"
                        },
                        "dns": {
                            "description": "dns: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nConfigures the ACME DNS challenge. Because this\nchallenge typically requires credentials for\ninterfacing with a DNS provider, this challenge is\nnot enabled by default. This is the only challenge\ntype which does not require a direct connection\nto Caddy from an external server.\nNOTE: DNS providers are currently being upgraded,\nand this API is subject to change, but should be\nstabilized soon.\n\nDNSChallengeConfig configures the ACME DNS challenge.\nNOTE: This API is still experimental and is subject to change.",
                            "markdownDescription": "dns: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nConfigures the ACME DNS challenge. Because this\nchallenge typically requires credentials for\ninterfacing with a DNS provider, this challenge is\nnot enabled by default. This is the only challenge\ntype which does not require a direct connection\nto Caddy from an external server.\nNOTE: DNS providers are currently being upgraded,\nand this API is subject to change, but should be\nstabilized soon.\n\nDNSChallengeConfig configures the ACME DNS challenge.\nNOTE: This API is still experimental and is subject to change.",
                            "type": "object",
                            "properties": {
                                "provider": {
                                    "description": "provider: `object`  \nModule: `dns.providers`  \n\nThe DNS provider module to use which will manage\nthe DNS records relevant to the ACME challenge.",
                                    "markdownDescription": "provider: `object`  \nModule: `dns.providers`  \n  \nThe DNS provider module to use which will manage\nthe DNS records relevant to the ACME challenge.",
                                    "type": "object"
                                },
                                "ttl": {
                                    "description": "ttl: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nThe TTL of the TXT record used for the DNS challenge.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                    "markdownDescription": "ttl: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nThe TTL of the TXT record used for the DNS challenge.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                                    "type": "number"
                                }
                            }
                        },
                        "http": {
                            "description": "http: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nhttp configures the ACME HTTP challenge. This\nchallenge is enabled and used automatically\nand by default.\n\nHTTPChallengeConfig configures the ACME HTTP challenge.",
                            "markdownDescription": "http: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nhttp configures the ACME HTTP challenge. This\nchallenge is enabled and used automatically\nand by default.\n\nHTTPChallengeConfig configures the ACME HTTP challenge.",
                            "type": "object",
                            "properties": {
                                "alternate_port": {
                                    "description": "alternate_port: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nAn alternate port on which to service this\nchallenge. Note that the HTTP challenge port is\nhard-coded into the spec and cannot be changed,\nso you would have to forward packets from the\nstandard HTTP challenge port to this one.",
                                    "markdownDescription": "alternate_port: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nAn alternate port on which to service this\nchallenge. Note that the HTTP challenge port is\nhard-coded into the spec and cannot be changed,\nso you would have to forward packets from the\nstandard HTTP challenge port to this one.",
                                    "type": "number"
                                },
                                "disabled": {
                                    "description": "disabled: `boolean`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nIf true, the HTTP challenge will be disabled.",
                                    "markdownDescription": "disabled: `boolean`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nIf true, the HTTP challenge will be disabled.",
                                    "type": "boolean"
                                }
                            }
                        },
                        "tls-alpn": {
                            "description": "tls-alpn: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\ntls-alpn configures the ACME TLS-ALPN challenge.\nThis challenge is enabled and used automatically\nand by default.\n\nTLSALPNChallengeConfig configures the ACME TLS-ALPN challenge.",
                            "markdownDescription": "tls-alpn: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \ntls-alpn configures the ACME TLS-ALPN challenge.\nThis challenge is enabled and used automatically\nand by default.\n\nTLSALPNChallengeConfig configures the ACME TLS-ALPN challenge.",
                            "type": "object",
                            "properties": {
                                "alternate_port": {
                                    "description": "alternate_port: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nAn alternate port on which to service this\nchallenge. Note that the TLS-ALPN challenge port\nis hard-coded into the spec and cannot be changed,\nso you would have to forward packets from the\nstandard TLS-ALPN challenge port to this one.",
                                    "markdownDescription": "alternate_port: `number`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nAn alternate port on which to service this\nchallenge. Note that the TLS-ALPN challenge port\nis hard-coded into the spec and cannot be changed,\nso you would have to forward packets from the\nstandard TLS-ALPN challenge port to this one.",
                                    "type": "number"
                                },
                                "disabled": {
                                    "description": "disabled: `boolean`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nIf true, the TLS-ALPN challenge will be disabled.",
                                    "markdownDescription": "disabled: `boolean`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nIf true, the TLS-ALPN challenge will be disabled.",
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "email": {
                    "description": "email: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nYour email address, so the CA can contact you if necessary.\nNot required, but strongly recommended to provide one so\nyou can be reached if there is a problem. Your email is\nnot sent to any Caddy mothership or used for any purpose\nother than ACME transactions.",
                    "markdownDescription": "email: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nYour email address, so the CA can contact you if necessary.\nNot required, but strongly recommended to provide one so\nyou can be reached if there is a problem. Your email is\nnot sent to any Caddy mothership or used for any purpose\nother than ACME transactions.",
                    "type": "string"
                },
                "external_account": {
                    "description": "external_account: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nIf using an ACME CA that requires an external account\nbinding, specify the CA-provided credentials here.\n\nExternalAccountBinding contains information for\nbinding an external account to an ACME account.",
                    "markdownDescription": "external_account: `object`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nIf using an ACME CA that requires an external account\nbinding, specify the CA-provided credentials here.\n\nExternalAccountBinding contains information for\nbinding an external account to an ACME account.",
                    "type": "object",
                    "properties": {
                        "hmac": {
                            "description": "hmac: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nThe base64-encoded HMAC.",
                            "markdownDescription": "hmac: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nThe base64-encoded HMAC.",
                            "type": "string"
                        },
                        "key_id": {
                            "description": "key_id: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nThe key identifier.",
                            "markdownDescription": "key_id: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nThe key identifier.",
                            "type": "string"
                        }
                    }
                },
                "test_ca": {
                    "description": "test_ca: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\nThe URL to the test CA's ACME directory endpoint.\nThis endpoint is only used during retries if there\nis a failure using the primary CA.",
                    "markdownDescription": "test_ca: `string`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \nThe URL to the test CA's ACME directory endpoint.\nThis endpoint is only used during retries if there\nis a failure using the primary CA.",
                    "type": "string"
                },
                "trusted_roots_pem_files": {
                    "description": "trusted_roots_pem_files: `array`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)\n",
                    "markdownDescription": "trusted_roots_pem_files: `array`  \nModule: `tls.issuance.acme`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#ACMEIssuer)  \n",
                    "type": "array",
                    "items": {
                        "description": "\nAn array of files of CA certificates to accept when connecting to the\nACME CA. Generally, you should only use this if the ACME CA endpoint\nis internal or for development/testing purposes.",
                        "markdownDescription": "  \nAn array of files of CA certificates to accept when connecting to the\nACME CA. Generally, you should only use this if the ACME CA endpoint\nis internal or for development/testing purposes.",
                        "type": "string"
                    }
                }
            }
        },
        "tls.issuance.internal": {
            "description": "internal: `object`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)\nInternalIssuer is a certificate issuer that generates\ncertificates internally using a locally-configured\nCA which can be customized using the `pki` app.\n",
            "markdownDescription": "internal: `object`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)  \nInternalIssuer is a certificate issuer that generates\ncertificates internally using a locally-configured\nCA which can be customized using the `pki` app.\n",
            "type": "object",
            "properties": {
                "ca": {
                    "description": "ca: `string`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)\nThe ID of the CA to use for signing. The default\nCA ID is \"local\". The CA can be configured with the\n`pki` app.",
                    "markdownDescription": "ca: `string`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)  \nThe ID of the CA to use for signing. The default\nCA ID is \"local\". The CA can be configured with the\n`pki` app.",
                    "type": "string"
                },
                "lifetime": {
                    "description": "lifetime: `number`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)\nThe validity period of certificates.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                    "markdownDescription": "lifetime: `number`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)  \nThe validity period of certificates.\n\nDuration can be an integer or a string. An integer is\ninterpreted as nanoseconds. If a string, it is a Go\ntime.Duration value such as `300ms`, `1.5h`, or `2h45m`;\nvalid units are `ns`, `us`/`µs`, `ms`, `s`, `m`, and `h`.",
                    "type": "number"
                },
                "sign_with_root": {
                    "description": "sign_with_root: `boolean`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)\nIf true, the root will be the issuer instead of\nthe intermediate. This is NOT recommended and should\nonly be used when devices/clients do not properly\nvalidate certificate chains.",
                    "markdownDescription": "sign_with_root: `boolean`  \nModule: `tls.issuance.internal`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls#InternalIssuer)  \nIf true, the root will be the issuer instead of\nthe intermediate. This is NOT recommended and should\nonly be used when devices/clients do not properly\nvalidate certificate chains.",
                    "type": "boolean"
                }
            }
        },
        "tls.stek.distributed": {
            "description": "distributed: `object`  \nModule: `tls.stek.distributed`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls/distributedstek#Provider)\nProvider implements a distributed STEK provider. This\nmodule will obtain STEKs from a storage module instead\nof generating STEKs internally. This allows STEKs to be\ncoordinated, improving TLS session resumption in a cluster.\n",
            "markdownDescription": "distributed: `object`  \nModule: `tls.stek.distributed`  \n[godoc](https://pkg.go.dev/github.com/caddyserver/caddy/v2/modules/caddytls/distributedstek#Provider)  \nProvider implements a distributed STEK provider. This\nmodule will obtain STEKs from a storage module instead\nof generating STEKs internally. This allows STEKs to be\ncoordinated, improving TLS session resumption in a cluster.\n",
            "type": "object",
            "properties": {
                "storage": {
                    "description": "storage: `object`  \nModule: `caddy.storage`  \n\nThe storage module wherein to store and obtain session\nticket keys. If unset, Caddy's default/global-configured\nstorage module will be used.",
                    "markdownDescription": "storage: `object`  \nModule: `caddy.storage`  \n  \nThe storage module wherein to store and obtain session\nticket keys. If unset, Caddy's default/global-configured\nstorage module will be used.",
                    "required": [
                        "module"
                    ],
                    "allOf": [
                        {
                            "if": {
                                "properties": {
                                    "module": {
                                        "const": "file_system"
                                    }
                                }
                            },
                            "then": {
                                "$ref": "#/definitions/caddy.storage.file_system"
                            }
                        },
                        {
                            "properties": {
                                "module": {
                                    "description": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                                    "markdownDescription": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                                    "type": "string",
                                    "enum": [
                                        "file_system"
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },
        "tls.stek.standard": {
            "description": "standard: `object`  \nModule: `tls.stek.standard`  \n\n",
            "markdownDescription": "standard: `object`  \nModule: `tls.stek.standard`  \n  \n",
            "type": "object"
        }
    },
    "properties": {
        "admin": {
            "description": "admin: `object`  \n\nAdminConfig configures Caddy's API endpoint, which is used\nto manage Caddy while it is running.\n",
            "markdownDescription": "admin: `object`  \n  \nAdminConfig configures Caddy's API endpoint, which is used\nto manage Caddy while it is running.\n",
            "type": "object",
            "properties": {
                "config": {
                    "description": "config: `object`  \n\nOptions related to configuration management.\n\nConfigSettings configures the, uh, configuration... and\nmanagement thereof.",
                    "markdownDescription": "config: `object`  \n  \nOptions related to configuration management.\n\nConfigSettings configures the, uh, configuration... and\nmanagement thereof.",
                    "type": "object",
                    "properties": {
                        "persist": {
                            "description": "persist: `boolean`  \n\nWhether to keep a copy of the active config on disk. Default is true.",
                            "markdownDescription": "persist: `boolean`  \n  \nWhether to keep a copy of the active config on disk. Default is true.",
                            "type": "boolean"
                        }
                    }
                },
                "disabled": {
                    "description": "disabled: `boolean`  \n\nIf true, the admin endpoint will be completely disabled.\nNote that this makes any runtime changes to the config\nimpossible, since the interface to do so is through the\nadmin endpoint.",
                    "markdownDescription": "disabled: `boolean`  \n  \nIf true, the admin endpoint will be completely disabled.\nNote that this makes any runtime changes to the config\nimpossible, since the interface to do so is through the\nadmin endpoint.",
                    "type": "boolean"
                },
                "enforce_origin": {
                    "description": "enforce_origin: `boolean`  \n\nIf true, CORS headers will be emitted, and requests to the\nAPI will be rejected if their `Host` and `Origin` headers\ndo not match the expected value(s). Use `origins` to\ncustomize which origins/hosts are allowed.If `origins` is\nnot set, the listen address is the only value allowed by\ndefault.",
                    "markdownDescription": "enforce_origin: `boolean`  \n  \nIf true, CORS headers will be emitted, and requests to the\nAPI will be rejected if their `Host` and `Origin` headers\ndo not match the expected value(s). Use `origins` to\ncustomize which origins/hosts are allowed.If `origins` is\nnot set, the listen address is the only value allowed by\ndefault.",
                    "type": "boolean"
                },
                "listen": {
                    "description": "listen: `string`  \n\nThe address to which the admin endpoint's listener should\nbind itself. Can be any single network address that can be\nparsed by Caddy. Default: localhost:2019",
                    "markdownDescription": "listen: `string`  \n  \nThe address to which the admin endpoint's listener should\nbind itself. Can be any single network address that can be\nparsed by Caddy. Default: localhost:2019",
                    "type": "string"
                },
                "origins": {
                    "description": "origins: `array`  \n\n",
                    "markdownDescription": "origins: `array`  \n  \n",
                    "type": "array",
                    "items": {
                        "description": "\nThe list of allowed origins/hosts for API requests. Only needed\nif accessing the admin endpoint from a host different from the\nsocket's network interface or if `enforce_origin` is true. If not\nset, the listener address will be the default value. If set but\nempty, no origins will be allowed.",
                        "markdownDescription": "  \nThe list of allowed origins/hosts for API requests. Only needed\nif accessing the admin endpoint from a host different from the\nsocket's network interface or if `enforce_origin` is true. If not\nset, the listener address will be the default value. If set but\nempty, no origins will be allowed.",
                        "type": "string"
                    }
                }
            }
        },
        "apps": {
            "description": "apps: `object`  \n\napps are the apps that Caddy will load and run. The\napp module name is the key, and the app's config is the\nassociated value.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
            "markdownDescription": "apps: `object`  \n  \napps are the apps that Caddy will load and run. The\napp module name is the key, and the app's config is the\nassociated value.\n\nModuleMap is a map that can contain multiple modules,\nwhere the map key is the module's name. (The namespace\nis usually read from an associated field's struct tag.)\nBecause the module's name is given as the key in a\nmodule map, the name does not have to be given in the\njson.RawMessage.",
            "properties": {
                "exec": {
                    "$ref": "#/definitions/exec"
                },
                "http": {
                    "$ref": "#/definitions/http"
                },
                "pki": {
                    "$ref": "#/definitions/pki"
                },
                "tls": {
                    "$ref": "#/definitions/tls"
                }
            }
        },
        "logging": {
            "description": "logging: `object`  \n\nLogging facilitates logging within Caddy. The default log is\ncalled \"default\" and you can customize it. You can also define\nadditional logs.\n\nBy default, all logs at INFO level and higher are written to\nstandard error (\"stderr\" writer) in a human-readable format\n(\"console\" encoder if stdout is an interactive terminal, \"json\"\nencoder otherwise).\n\nAll defined logs accept all log entries by default, but you\ncan filter by level and module/logger names. A logger's name\nis the same as the module's name, but a module may append to\nlogger names for more specificity. For example, you can\nfilter logs emitted only by HTTP handlers using the name\n\"http.handlers\", because all HTTP handler module names have\nthat prefix.\n\nCaddy logs (except the sink) are zero-allocation, so they are\nvery high-performing in terms of memory and CPU time. Enabling\nsampling can further increase throughput on extremely high-load\nservers.\n",
            "markdownDescription": "logging: `object`  \n  \nLogging facilitates logging within Caddy. The default log is\ncalled \"default\" and you can customize it. You can also define\nadditional logs.\n\nBy default, all logs at INFO level and higher are written to\nstandard error (\"stderr\" writer) in a human-readable format\n(\"console\" encoder if stdout is an interactive terminal, \"json\"\nencoder otherwise).\n\nAll defined logs accept all log entries by default, but you\ncan filter by level and module/logger names. A logger's name\nis the same as the module's name, but a module may append to\nlogger names for more specificity. For example, you can\nfilter logs emitted only by HTTP handlers using the name\n\"http.handlers\", because all HTTP handler module names have\nthat prefix.\n\nCaddy logs (except the sink) are zero-allocation, so they are\nvery high-performing in terms of memory and CPU time. Enabling\nsampling can further increase throughput on extremely high-load\nservers.\n",
            "type": "object",
            "properties": {
                "logs": {
                    "description": "logs: `object`  \n\n",
                    "markdownDescription": "logs: `object`  \n  \n",
                    "type": "object",
                    "additionalProperties": {
                        "description": "\nlogs are your logs, keyed by an arbitrary name of your\nchoosing. The default log can be customized by defining\na log called \"default\". You can further define other logs\nand filter what kinds of entries they accept.\n\nCustomLog represents a custom logger configuration.\n\nBy default, a log will emit all log entries. Some entries\nwill be skipped if sampling is enabled. Further, the Include\nand Exclude parameters define which loggers (by name) are\nallowed or rejected from emitting in this log. If both Include\nand Exclude are populated, their values must be mutually\nexclusive, and longer namespaces have priority. If neither\nare populated, all logs are emitted.",
                        "markdownDescription": "  \nlogs are your logs, keyed by an arbitrary name of your\nchoosing. The default log can be customized by defining\na log called \"default\". You can further define other logs\nand filter what kinds of entries they accept.\n\nCustomLog represents a custom logger configuration.\n\nBy default, a log will emit all log entries. Some entries\nwill be skipped if sampling is enabled. Further, the Include\nand Exclude parameters define which loggers (by name) are\nallowed or rejected from emitting in this log. If both Include\nand Exclude are populated, their values must be mutually\nexclusive, and longer namespaces have priority. If neither\nare populated, all logs are emitted.",
                        "properties": {
                            "encoder": {
                                "description": "encoder: `object`  \nModule: `caddy.logging.encoders`  \n\nThe encoder is how the log entries are formatted or encoded.",
                                "markdownDescription": "encoder: `object`  \nModule: `caddy.logging.encoders`  \n  \nThe encoder is how the log entries are formatted or encoded.",
                                "required": [
                                    "format"
                                ],
                                "allOf": [
                                    {
                                        "if": {
                                            "properties": {
                                                "format": {
                                                    "const": "console"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.encoders.console"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "format": {
                                                    "const": "filter"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.encoders.filter"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "format": {
                                                    "const": "json"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.encoders.json"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "format": {
                                                    "const": "logfmt"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.encoders.logfmt"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "format": {
                                                    "const": "single_field"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.encoders.single_field"
                                        }
                                    },
                                    {
                                        "properties": {
                                            "format": {
                                                "description": "`encoder` key to identify specified module.  \nformat: `string`  \nModule: `caddy.logging.encoders`",
                                                "markdownDescription": "`encoder` key to identify specified module.  \nformat: `string`  \nModule: `caddy.logging.encoders`",
                                                "type": "string",
                                                "enum": [
                                                    "console",
                                                    "filter",
                                                    "json",
                                                    "logfmt",
                                                    "single_field"
                                                ]
                                            }
                                        }
                                    }
                                ]
                            },
                            "exclude": {
                                "description": "exclude: `array`  \n\n",
                                "markdownDescription": "exclude: `array`  \n  \n",
                                "type": "array",
                                "items": {
                                    "description": "\nexclude defines the names of loggers that should be\nskipped by this log. For example, to exclude only\nHTTP access logs, you would exclude \"http.log.access\".",
                                    "markdownDescription": "  \nexclude defines the names of loggers that should be\nskipped by this log. For example, to exclude only\nHTTP access logs, you would exclude \"http.log.access\".",
                                    "type": "string"
                                }
                            },
                            "include": {
                                "description": "include: `array`  \n\n",
                                "markdownDescription": "include: `array`  \n  \n",
                                "type": "array",
                                "items": {
                                    "description": "\ninclude defines the names of loggers to emit in this\nlog. For example, to include only logs emitted by the\nadmin API, you would include \"admin.api\".",
                                    "markdownDescription": "  \ninclude defines the names of loggers to emit in this\nlog. For example, to include only logs emitted by the\nadmin API, you would include \"admin.api\".",
                                    "type": "string"
                                }
                            },
                            "level": {
                                "description": "level: `string`  \n\nlevel is the minimum level to emit, and is inclusive.\nPossible levels: DEBUG, INFO, WARN, ERROR, PANIC, and FATAL",
                                "markdownDescription": "level: `string`  \n  \nlevel is the minimum level to emit, and is inclusive.\nPossible levels: DEBUG, INFO, WARN, ERROR, PANIC, and FATAL",
                                "type": "string"
                            },
                            "sampling": {
                                "description": "sampling: `object`  \n\nsampling configures log entry sampling. If enabled,\nonly some log entries will be emitted. This is useful\nfor improving performance on extremely high-pressure\nservers.\n\nLogSampling configures log entry sampling.",
                                "markdownDescription": "sampling: `object`  \n  \nsampling configures log entry sampling. If enabled,\nonly some log entries will be emitted. This is useful\nfor improving performance on extremely high-pressure\nservers.\n\nLogSampling configures log entry sampling.",
                                "type": "object",
                                "properties": {
                                    "first": {
                                        "description": "first: `number`  \n\nLog this many entries within a given level and\nmessage for each interval.",
                                        "markdownDescription": "first: `number`  \n  \nLog this many entries within a given level and\nmessage for each interval.",
                                        "type": "number"
                                    },
                                    "interval": {
                                        "description": "interval: `number`  \n\nThe window over which to conduct sampling.\n\nA Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years.",
                                        "markdownDescription": "interval: `number`  \n  \nThe window over which to conduct sampling.\n\nA Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years.",
                                        "type": "number"
                                    },
                                    "thereafter": {
                                        "description": "thereafter: `number`  \n\nIf more entries with the same level and message\nare seen during the same interval, keep one in\nthis many entries until the end of the interval.",
                                        "markdownDescription": "thereafter: `number`  \n  \nIf more entries with the same level and message\nare seen during the same interval, keep one in\nthis many entries until the end of the interval.",
                                        "type": "number"
                                    }
                                }
                            },
                            "writer": {
                                "description": "writer: `object`  \nModule: `caddy.logging.writers`  \n\nThe writer defines where log entries are emitted.",
                                "markdownDescription": "writer: `object`  \nModule: `caddy.logging.writers`  \n  \nThe writer defines where log entries are emitted.",
                                "required": [
                                    "output"
                                ],
                                "allOf": [
                                    {
                                        "if": {
                                            "properties": {
                                                "output": {
                                                    "const": "discard"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.writers.discard"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "output": {
                                                    "const": "file"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.writers.file"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "output": {
                                                    "const": "net"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.writers.net"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "output": {
                                                    "const": "stderr"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.writers.stderr"
                                        }
                                    },
                                    {
                                        "if": {
                                            "properties": {
                                                "output": {
                                                    "const": "stdout"
                                                }
                                            }
                                        },
                                        "then": {
                                            "$ref": "#/definitions/caddy.logging.writers.stdout"
                                        }
                                    },
                                    {
                                        "properties": {
                                            "output": {
                                                "description": "`writer` key to identify specified module.  \noutput: `string`  \nModule: `caddy.logging.writers`",
                                                "markdownDescription": "`writer` key to identify specified module.  \noutput: `string`  \nModule: `caddy.logging.writers`",
                                                "type": "string",
                                                "enum": [
                                                    "discard",
                                                    "file",
                                                    "net",
                                                    "stderr",
                                                    "stdout"
                                                ]
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                },
                "sink": {
                    "description": "sink: `object`  \n\nsink is the destination for all unstructured logs emitted\nfrom Go's standard library logger. These logs are common\nin dependencies that are not designed specifically for use\nin Caddy. Because it is global and unstructured, the sink\nlacks most advanced features and customizations.\n\nStandardLibLog configures the default Go standard library\nglobal logger in the log package. This is necessary because\nmodule dependencies which are not built specifically for\nCaddy will use the standard logger. This is also known as\nthe \"sink\" logger.",
                    "markdownDescription": "sink: `object`  \n  \nsink is the destination for all unstructured logs emitted\nfrom Go's standard library logger. These logs are common\nin dependencies that are not designed specifically for use\nin Caddy. Because it is global and unstructured, the sink\nlacks most advanced features and customizations.\n\nStandardLibLog configures the default Go standard library\nglobal logger in the log package. This is necessary because\nmodule dependencies which are not built specifically for\nCaddy will use the standard logger. This is also known as\nthe \"sink\" logger.",
                    "type": "object",
                    "properties": {
                        "writer": {
                            "description": "writer: `object`  \nModule: `caddy.logging.writers`  \n\nThe module that writes out log entries for the sink.",
                            "markdownDescription": "writer: `object`  \nModule: `caddy.logging.writers`  \n  \nThe module that writes out log entries for the sink.",
                            "required": [
                                "output"
                            ],
                            "allOf": [
                                {
                                    "if": {
                                        "properties": {
                                            "output": {
                                                "const": "discard"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/caddy.logging.writers.discard"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "output": {
                                                "const": "file"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/caddy.logging.writers.file"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "output": {
                                                "const": "net"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/caddy.logging.writers.net"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "output": {
                                                "const": "stderr"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/caddy.logging.writers.stderr"
                                    }
                                },
                                {
                                    "if": {
                                        "properties": {
                                            "output": {
                                                "const": "stdout"
                                            }
                                        }
                                    },
                                    "then": {
                                        "$ref": "#/definitions/caddy.logging.writers.stdout"
                                    }
                                },
                                {
                                    "properties": {
                                        "output": {
                                            "description": "`writer` key to identify specified module.  \noutput: `string`  \nModule: `caddy.logging.writers`",
                                            "markdownDescription": "`writer` key to identify specified module.  \noutput: `string`  \nModule: `caddy.logging.writers`",
                                            "type": "string",
                                            "enum": [
                                                "discard",
                                                "file",
                                                "net",
                                                "stderr",
                                                "stdout"
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "storage": {
            "description": "storage: `object`  \nModule: `caddy.storage`  \n\nstorage is a storage module that defines how/where Caddy\nstores assets (such as TLS certificates). The default storage\nmodule is `caddy.storage.file_system` (the local file system),\nand the default path\n[depends on the OS and environment](/docs/conventions#data-directory).",
            "markdownDescription": "storage: `object`  \nModule: `caddy.storage`  \n  \nstorage is a storage module that defines how/where Caddy\nstores assets (such as TLS certificates). The default storage\nmodule is `caddy.storage.file_system` (the local file system),\nand the default path\n[depends on the OS and environment](/docs/conventions#data-directory).",
            "required": [
                "module"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "module": {
                                "const": "file_system"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/caddy.storage.file_system"
                    }
                },
                {
                    "properties": {
                        "module": {
                            "description": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                            "markdownDescription": "`storage` key to identify specified module.  \nmodule: `string`  \nModule: `caddy.storage`",
                            "type": "string",
                            "enum": [
                                "file_system"
                            ]
                        }
                    }
                }
            ]
        }
    },
    "additionalItems": true
}